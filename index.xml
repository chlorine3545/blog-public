<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>园子里的日光</title><link>https://chlor.me/</link><description/><language>zh-CN</language><managingEditor>Chlorine</managingEditor><webMaster>Chlorine</webMaster><copyright/><lastBuildDate>Fri, 21 Feb 2025 08:42:20 +0000</lastBuildDate><category>Blog</category><generator>Hugo -- gohugo.io</generator><atom:link href="https://chlor.me/index.xml" rel="self" type="application/rss+xml"/><item><title>理想乡构筑手记（3）：Hello，Nieve</title><link>https://chlor.me/hello-nieve/</link><pubDate>Fri, 21 Feb 2025 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-nieve/</guid><category>博客</category><category>图床</category><category>Obsidian</category><description>本文介绍了作者构建名为 Nieve 的图片服务系统的过程。由于原先使用的缤纷云图床出现加载问题，博主决定迁移至又拍云作为主图床，并以 Cloudflare R2 作为备份。迁移过程中，使用了 `rclone` 工具进行图片备份和上传。为了优化 Obsidian 中的写作体验，博主弃用了原先的 Image Converter 插件，转而利用 Shell Commands 插件调用自定义脚本。这些脚本实现了图片粘贴时的自动压缩（使用 `cavif`）、重命名、相对路径计算，以及发布文章时查找图片、上传至又拍云（使用官方工具 `upx`）并替换链接的功能。整个过程涉及了多种工具，包括 Python 脚本、AppleScript、`ripgrep` 等，最终构建了一个自动化、高效的图片处理与发布流程。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-nieve-cover.webp" alt="理想乡构筑手记（3）：Hello，Nieve" />
        </figure>
        <p>诸位老友，上午好，这里是 Chlorine。</p>
<p>本期是「理想乡构筑手记」的第三篇，实际也是最早进行的一篇，主题是园子的图片服务系统——Nieve。本来是想放到新的一期周报里面讲的（<del>没想到吧，园子的周报还活着</del>），但是这部分内容实在是太琐碎了，遂单题一篇。<del>水，你接着水</del>。</p>
<p>Nieve 这个名字，也是很久以前就想好的。这个词是西班牙语，意思是「雪」。</p>
<h2 id="tl--dr">TL ; DR</h2>
<ul>
<li>在 Obsidian 写作时直接粘贴图片，使用 Image Converter 插件自动压缩和重命名</li>
<li>使用 Shell Commands 的自定义脚本上传博客图片到又拍云和 Cloudflare R2</li>
<li>又拍云作为主图床，Cloudflare R2 作为对外的图片服务和备份图床</li>
</ul>
<h2 id="前言">前言</h2>
<p>作为 Vercel 上的静态博客，园子的图片当然使用的是图床。小氯使用的图床服务几经变易，从免费图床的良心之作 <a href="https://smms.app">SMMS</a> 到牢巴（Alibaba）的阿里云 OSS，再到缤纷云，期间甚至还写了[[Markdown图片管理实践|一篇将近一万字的文章]]去讲 Markdown 图片管理（当然那篇文章其实挺水的）。缤纷云提供了相当慷慨的免费额度，具体来说是：</p>
<ul>
<li>前 50 GiB 存储</li>
<li>每月前 10*3 GB HTTP/HTTPS 流量（每日每项限 5 GB）
<ul>
<li>S4 出口流量 10GB/月</li>
<li>内置 CDN 回源 S4 流量 10GB/月</li>
<li>内置 CDN 出口流量 10GB/月</li>
</ul>
</li>
<li>每月前 10*3 万次请求（每日每项限 1 万次）
<ul>
<li>S4 请求数 10 万次/月</li>
<li>内置 CDN 回源 S4 请求数 10 万次/月</li>
<li>内置 CDN 请求数 10 万次/月</li>
</ul>
</li>
</ul>
<p>回来。小氯使用缤纷云已经有快一年了，总体而言速度和稳定性还算可以，有了备案之后还可以用他家的 CDN，可以省一些回源流量之类的（没错，速度其实没快多少）。当然，为了避免免费服务的传统艺能——跑路。小氯也把图片在赛博活佛 Cloudflare 的 R2 上存了一份。和国内的各大对象存储以及 Amazon S3 等同行相比，Cloudflare 的免费额度简直多得不像话，一个月有 10G 的免费空间，1M 次的 A 类操作（存储和删除等），10M 次的 B 类操作（读取等），无限流量。如果不在意国内速度慢一点，那么 Cloudflare R2 堪称是对象存储中的椎间盘——为何你如此突出。</p>
<p>插一句话，小氯写到这里的时候，习惯性地希望使用中文，然后发现自己似乎不知道 Cloudflare 的中文名字……等等，Cloudflare 有中文名字吗？</p>
<p>这个还真难说。Cloudflare 的官网在调为简中后，还是叫作 Cloudflare；而 <code>cloudflare-cn.com</code> 使用的是「科赋锐」（注意：小氯不清楚这个网站和 Cloudflare 官方是否有关，请谨慎），说实话，这个名字……真的让小氯很不满意，就和把 Google 翻译为「谷歌」一样。小氯还没有找到一个被 Cloudflare 官方认可的中文名字，但是从社区来看，似乎有一个不错的选择：<strong>云帆</strong>。</p>
<p>「云」对应 cloud，由于「云计算」「云存储」这些词汇的广泛使用，所以用这个词代表相关的技术领域没什么问题；而「帆」是 flare 的音译（其原意为火焰）。这个词整体读起来还比较顺口，而且寓意也很好，「直挂云帆济沧海」。不过如果在正式的技术讨论里面，还是用 Cloudflare 为好。</p>
<p>回来。不过最近（其实离文章发出来已经是几个月之前了），小氯接到了一些老友的反映，博客的图片加载明显变慢了，甚至很多裂掉了（即无法加载）。直接用 URL 看一下，发现 403。奇怪的是，小氯并没有为这种情况加任何的访问限制，而图片也都好好地在那。而当我希望将新的自定义 URL 添加到 CDN 中时，也是一直提示「未备案」（实际上 ICP 和公安备案已经过了快一个月了）。这可不是什么好兆头，说明缤纷云的后端设施可能出了一些问题。此外，小氯发现自己的流量似乎也出了点差错，其用量比实际应该有的流量高。而其分布也比较均匀，不像是攻击（<del>而且谁闲着没事去攻击小氯酱这条杂鱼啊</del>）。</p>
<p>总而言之，种种因素作用吧，小氯打算换个图片服务了。</p>
<h2 id="图片服务的选择">图片服务的选择</h2>
<p>市面上的图片服务——准确来说，能直接或者间接作为图片服务的服务不胜枚举。虽然说小氯不介意花点小钱，但是如果是像流量费这种很可能让人倾家荡产的服务，小氯还是希望尽可能避免的。于是小氯开始收集各种有免费额度的服务，当然这里指的是国内的。我没备案用的是国外的图片服务，备案了用得还是国外的图片服务，那我这不是白备案了嘛。</p>
<p>具体过程不多说了，极其曲折。小氯甚至想过用服务器 + 一些 CDN 搭一个，但一是没有合适的服务器，二是这种方式相当不稳定。举个例子：<a href="https://dusays.com">杜老师</a>的<a href="https://7bu.top">去不图床</a>，可以说是博友圈最著名的自建图床了（甚至没有之一），也时常会出现许多奇奇怪怪的问题，小氯可不认为自己的运维能力和服务器集群的质量比杜老师强。所以还是老老实实地找对象存储去了。</p>
<p>几番搜索，小氯找到了一个看起来还可以的选择。这个家伙大家也都不陌生：<a href="https://upyun.com">又拍云</a>（这个链接不带 AFF，放心点击）。</p>
<p>牢拍也算是小有名气的商家了，跑路的风险不大，而且也没有大到像套路云、凉心云那样令人讨厌的规模。此外牢拍有一个著名的 League，简单来说就是在自己网站底下挂上牢拍的 logo 可以持续领到代金券，均摊一下也就是每个月 10G 的空间和 15G 的流量，基本上够用一段时间了。而且牢拍的代金券是和账户而不是域名挂钩的，这意味着你只需要找一个备案过的域名挂一下，然后就可以随便用了。</p>
<p>那么……就是你了。</p>
<h2 id="使用-rclone-备份图片">使用 <code>rclone</code> 备份图片</h2>
<p>在转移到牢拍之前，我们当然需要把整个图片目录备份下来。这里小氯打算试一下新玩具 <a href="https://rclone.org">rclone</a>。</p>
<p>rsync 咱都知道，一个有趣的文件传输（这里说的是上传、下载和同步）工具。rsync 的花样很多，甚至可以用它部署静态博客到服务器（这可能是最好的方案之一，不需要装 Gitea 等一堆东西）。rclone 大体可以理解为云存储版的 rsync，支持一大堆各种各样的云存储和云盘。</p>
<pre><code class="language-bash">brew update &amp;&amp; brew install rclone
</code></pre>
<p>先创建一下配置：</p>
<pre><code class="language-bash">rclone config
</code></pre>
<p>下一步输入 n，新建一个配置，选择 S3 - 其他，把 Access Key ID 和 Secret Key ID 之类的参数扔进去就行。</p>
<p>配置好以后，运行：</p>
<pre><code class="language-bash">rclone ls your-service-name:your-bucket
</code></pre>
<p>如果能输出你的桶目录结构那就配置成功了，可以下载了：</p>
<pre><code class="language-bash">rclone copy your-service-name:your-bucket /your/path
</code></pre>
<p>完工。</p>
<h2 id="又拍云的配置">又拍云的配置</h2>
<h3 id="申请又拍云联盟">申请又拍云联盟</h3>
<p>略。注册之后在<a href="https://www.upyun.com/league">这里</a>申请即可。一般来说审核会有 1 ~ 3 天，小氯的用了大概二十分钟，相当快。</p>
<h3 id="创建存储服务">创建存储服务</h3>
<p>和缤纷云不同的是，牢拍的云存储自带 CDN，所以只创建一个存储服务即可。</p>
<h3 id="使用-rclone-重新上传图片">使用 <code>rclone</code> 重新上传图片</h3>
<p>USS 兼容 S3，这就意味着我们可以用我们熟悉的各种小道具去把玩 USS。这里为了方便，我们还是使用 rclone 吧。这里小氯踩了点坑，因此说得详细一些。</p>
<p>首先我们需要获得 USS 的 S3 兼容凭据。这可不是你那个操作员的操作凭据，需要在存储服务的控制界面 - 存储管理里面找这里：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/20250220-upyun-uss-s3.avif" alt="upyun-uss-s3" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>把东西记好喽。</p>
<p>回到终端，创建一个 rclone 配置：</p>
<pre><code class="language-bash">rclone config
</code></pre>
<p>输入 n 新建配置，名字随便起，这里我使用 <code>test</code> 作为演示。</p>
<p>下面依次跟随指示，键入以下配置。这里的数字是以 <code>v1.69.0</code> 为基础的，在键入前，请检查你的版本的相应配置对应于哪个数字：</p>
<ul>
<li><code>Storage</code>：4（Amazon S3 及其兼容服务）</li>
<li><code>provider</code>：34（其他 S3 兼容服务提供商）</li>
<li><code>env_auth</code>：直接回车，使用默认配置即可。</li>
<li><code>access_key_id</code>：你刚才获取的那个 <code>access_key_id</code>。</li>
<li><code>secret_access_key</code>：还是刚才那个。</li>
<li><code>region</code>：直接回车，使用默认配置即可。</li>
<li><code>endpoint</code>：<code>s3.api.upyun.com</code></li>
<li><code>location_constraint</code>：直接回车，使用默认配置即可。</li>
<li><code>acl</code>：直接回车，使用默认配置即可。</li>
<li>高级设置：直接回车，使用默认配置即可。</li>
</ul>
<p>最后保存后，使用 <code>rclone ls test:</code> 即可测试是否成功配置。</p>
<h2 id="obsidian-配置">Obsidian 配置</h2>
<p>小氯在 Obsidian 的配置上花了很多的时间，终于找到了一个自己满意的方案。下面我把思路整理一下。</p>
<p>小氯的需求大概是：</p>
<ul>
<li>图片重命名（语义化命名）</li>
<li>使用相对链接</li>
<li>自动压缩为 WebP 或者 AVIF</li>
<li>发布博客时上传到图床并替换博客文件的链接，而原本的文件保持不变</li>
</ul>
<p>为了方便，我们就叫粘贴处理和发布处理好了。</p>
<h3 id="粘贴处理">粘贴处理</h3>
<p>能实现一部分功能的 Obsidian 的图片插件有很多，例如 Paste Image Rename，Unique Attachments 等。不过小氯最喜欢的还是这个：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/xRyul/obsidian-image-converter" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>xRyul/obsidian-image-converter</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        ⚡️ Convert, compress, resize, annotate, markup, draw, crop, rotate, flip, align images directly in Obsidian. Drag-resize, rename with variables, batch process. WEBP, JPG, PNG, HEIC, TIF.
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #2b7489">
            </span>
            <span>TypeScript</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">315</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-02-18</span>
        </div>
    </div>
</div>
<p>这个插件的功能非常全面，从压缩、格式转换、自定义附件位置到标注、裁剪、缩放、对齐都有。而作者也是位乐于听从社区意见的开发者，更新迭代和 Issue / PR 回复都很勤。小氯给这个插件提了个小小的 PR（改了一个拼写错误），混到了人生中第一个 Contributor 认证 (/ω＼)</p>
<p>不过插件的功能虽多，但是小氯主要是用其中的压缩和自定义附件位置，因此整体的功能也有些冗余了。而且，其会和我常用的 Attachflow 插件冲突。至于压缩问题，Image Converter 插件在 1.3.7 版本加入了 AVIF 压缩功能，不过有一个问题：<strong>它异常耗内存</strong>，经常转换着转换着就内存不足崩掉了（虽然说 FFmpeg AVIF 这玩意本来就吃资源）。虽然可以回退到 WebP，但是总归不是最优的解决方案。</p>
<p>那看来只有发挥主观能动性了。那么纵观 Obsidian 的插件，能让小氯在这个意义上发挥主观能动性的插件似乎只有一个：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/Taitava/obsidian-shellcommands" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>Taitava/obsidian-shellcommands</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        Execute system commands via hotkeys or command palette in Obsidian (https://obsidian.md). Some automated events are also supported, and execution via URI links.
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #2b7489">
            </span>
            <span>TypeScript</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">392</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>GNU General Public License v3.0</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-01-01</span>
        </div>
    </div>
</div>
<p>Obsidian Shell Commands，我愿称之为 Ob 可玩性的 Top3 之一（另外两个小氯认为是 Local REST API 和 Quickadd）。这个插件的功能就是让你在 Obsidian 中调用系统的 Shell 执行命令，支持自定义变量、预输入和自动触发等。说到这里，大家应该也能想象到这个插件的可玩性有多强了。</p>
<p>而且，小氯本身也要用 Shell Commands，既然我们能少装一个插件，那么「如非必要，勿增实体」，自然是极好的。</p>
<p>首先，由于小氯的图片使用的是相对路径，因此需要先获取图片相对于当前笔记的路径。笔记路径有 <code>{{file_path}}</code> 变量，图片由于是我们自己规定的，因此也不难获得。问题在于路径的计算。macOS 没有现成的命令行工具计算相对路径，于是小氯写了个 Python 脚本：</p>
<pre><code class="language-python">#!/usr/bin/env python3

import os
import sys
import argparse


def get_relpath(base_dir, tar_file):
    try:
        relative_path = os.path.relpath(tar_file, base_dir)
        return relative_path
    except ValueError:
        return None


def main():
    parser = argparse.ArgumentParser(description=&quot;计算 target 相对于 base 的相对路径&quot;)
    parser.add_argument(&quot;base&quot;, help=&quot;起始目录）&quot;)
    parser.add_argument(&quot;target&quot;, help=&quot;目标文件&quot;)
    args = parser.parse_args()

    base_dir = os.path.abspath(args.base)
    tar_file = os.path.abspath(args.target)

    if not os.path.isabs(base_dir) or not os.path.isabs(tar_file):
        print(&quot;Err: Please input absolute path.&quot;, file=sys.stderr)
        sys.exit(1)

    relative_path = get_relpath(base_dir, tar_file)

    if relative_path is not None:
        print(relative_path)
    else:
        print(&quot;Err: Please input correct path.&quot;, file=sys.stderr)
        sys.exit(1)


if __name__ == &quot;__main__&quot;:
    main()

</code></pre>
<p>然后赋予执行权限，移动到 <code>~/.local/bin</code> 了事。</p>
<p>下面我们需要读取剪贴板的图片，这里由于是 macOS，我们使用最原生的 AppleScript 即可。</p>
<pre><code class="language-applescript">on run args
    set outputFile to POSIX file (first item of args)
    try
        write (the clipboard as «class PNGf») to outputFile
        return POSIX path of outputFile
    on error
        return &quot;ERROR: 剪贴板中没有图片&quot;
    end try
end run
</code></pre>
<p>然后把图片存储到临时文件 <code>TMPFILE=&quot;$(mktemp &quot;/tmp/pasteboard-XXXXXX.jpg&quot;)&quot;</code> 中。当然不要忘了加一个 trap 自动清理。</p>
<p>然后我们需要获取新图片的名字。为了满足小氯的需求，我们加一个 Preaction，让我们可以自己输入文件名。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/20250220-compress-preaction.avif" alt="compress-preaction" 
        class="mx-auto rounded-lg block" loading="lazy" width="520"  />
    
</figure></p>
<p>然后我们就要开始压缩了。小氯第一个想到的自然是古神 FFmpeg，不过大家也知道，FFmpeg 尊者是出了名地脾气古怪，只要你稍微不慎，就会让他老人家掀桌不干。小氯反反复复调了好几次，遇到的问题包括但是不限于：</p>
<ul>
<li>压缩极慢。</li>
<li>都把输出重定向到 <code>/dev/null</code> 了，还是莫名其妙地冒日志。</li>
<li>好不容易能压缩了，结果透明度数据没了，告诉我 libaom-av1 不支持 YUVA 编码。</li>
</ul>
<p>……好好好。</p>
<p>那我不用 FFmpeg 还不行吗？！</p>
<pre><code class="language-bash">rustup update
cargo install cavif
</code></pre>
<p>这玩意也不是不能用，而且比 FFmpeg 快多了。</p>
<p>压缩之后，我们就可以把图片移动到对应的附件文件夹，并且向剪贴板写入我们的相对路径链接了。小氯也尝试过把数据写入剪贴板，但是 macOS 似乎不直接支持写入 AVIF。</p>
<p>完整版的脚本放在<a href="https://gist.viento.cc/chlorine/e644da399d2d48c29bc9177622233ef6">这里</a>了，大家按需取用。</p>
<h3 id="发布处理">发布处理</h3>
<p>由于小氯的 Hermeneutics 支持 Wikilink 和 Alert，所以我们只需要上传图片并替换即可。这里我们还是写脚本解决问题。</p>
<p>这个脚本比较简单，使用 ripgrep 查找图片，再通过文件的路径构建出图片路径，然后一个循环把图片送上去即可。小氯用了 Cloudflare R2 测试成功后就放心地把脚本归档了。直到小氯写[[理想乡构筑手记（2）：Hello，Céfiro|上一篇文章]]，希望调用脚本上传图片时，才发现：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>你根本没在又拍云！你在哪呢？</p>
</blockquote>
<p>图片并没有被上传到又拍云。于是，小氯开始了兵荒马乱的排查过程，最终在单独测试 <code>rclone copyto</code> 时发现了一大堆奇奇怪怪的报错，不是超时就是缺少 Key 或者各种万泉部诗人的奇怪报错。这可能是因为牢拍的存储空间不完全符合 AWS S3 的标准，所以说 rclone 没办法很好地兼容。</p>
<p>好好好。支持，但是不完全支持。</p>
<p>万般无奈之下小氯开始寻找替代方案，在把又拍云的文档翻了个底朝天之后，小氯终于找到了这个东西：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/upyun/upx" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>upyun/upx</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        UPYUN Storage Command Tool
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #00ADD8">
            </span>
            <span>Go</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">198</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-02-11</span>
        </div>
    </div>
</div>
<p>这个东西不能用 Homebrew 安装（或许小氯可以自己维护一个？），同时小氯的系统里已经有一个叫 <code>upx</code> 的家伙了（一个压缩可执行文件的工具，可以把 C++ 编译出的 <code>./hello-world</code> 大小压缩一半<del>并且使得其报错</del>）。所以，我们采取一下自定义安装策略。</p>
<p>首先把东西下载下来：</p>
<pre><code class="language-bash">wget https://collection.b0.upaiyun.com/softwares/upx/upx_0.4.8_darwin_arm64.tar.gz
</code></pre>
<p>然后解压缩（或者直接用命令行解压缩也行，看您方便），再移动到 PATH 里面：</p>
<pre><code class="language-bash">sudo mv /path/to/upx /usr/local/bin/upyun
</code></pre>
<p>然后验证一下就可以了。</p>
<p>这个命令行工具不支持使用文件验证，所以我们把凭据写到环境变量里面就好。</p>
<pre><code class="language-bash">alias upyun=&quot;/usr/local/bin/upyun&quot;
upyun login {{_UPYUN_SERVICE_NAME}} {{_UPYUN_OPERATOR}} {{_UPYUN_SECRET}}
</code></pre>
<p>然后上传完成退出就好了。</p>
<p>这个方法非常别扭，但是没办法，这是目前小氯找到的唯一一个能跑起来的方法了。</p>
<p>同样的，老友们可以<a href="https://gist.viento.cc/chlorine/4f9d0a497ca647e5ab35154fb2408693">自取脚本</a>。</p>
<p>Shell Commands 真的是太强大了，小氯写了若干个脚本，几乎完全替代了 Image Converter、Git 等插件。如果再配合一下 Local REST API 和 Obsidian URI，大概可以把目前小氯的大部分插件都替代掉了。</p>
<h2 id="后记">后记</h2>
<p>又清掉了一篇草稿，好耶 ～(∠・ω&lt; )⌒☆​</p>

      ]]></content:encoded></item><item><title>理想乡构筑手记（2）：Hello，Céfiro</title><link>https://chlor.me/hello-cefiro/</link><pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-cefiro/</guid><category>邮件</category><category>博客</category><description>本文介绍了作者对个人域名邮箱、临时邮箱和事务性邮件的需求及最终选择方案。在个人域名邮箱方面，作者详细对比了国内外多种服务，最终选择了iCloud+ Mail，主要看重其与Apple生态的集成、相对较低的价格以及基本够用的功能和隐私性。对于临时邮箱，作者选择了Cloudflare Email Route，利用其便捷性和可扩展性，将邮件转发至现有邮箱。事务性邮件方面，作者选择了Resend，因其提供每日100封的免费额度和易用的API。文章也提到了配置iCloud+ Mail的一些细节和注意事项，以及对邮件隐私性的深入思考，强调了技术隐私的重要性。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-cefiro-cover.webp" alt="理想乡构筑手记（2）：Hello，Céfiro" />
        </figure>
        <p>诸位老友，下午好。这里是再次回到牢清的 Chlorine（悲）。</p>
<p>这几天（<del>明明是十几天</del>）小氯的 <code>_drafts</code> 文件夹里面已经躺了无数的草稿了，然而这个笨蛋一直在鸽（悲）。</p>
<p>那么今天讲讲园子邮件系统翻新的事吧。这是一篇水文，嗯。</p>
<p>前置介绍：园子的信息系统叫作「Viento」，西班牙语的「风」。而 Viento 的邮件系统——Viento Mail，有其专门的名字——Céfiro（字面意思为「西风」）。Céfiro 拥有园子内的任何邮递服务的唯一经营权。<del>好吧好吧你开心就好</del>。</p>
<h2 id="小氯的需求">小氯的需求</h2>
<p>小氯大概需要这么几样东西：</p>
<ul>
<li><strong>个人域名邮箱</strong>：作为平时的主力邮箱。</li>
<li><strong>临时邮箱</strong>：用来注册一些随用随抛的服务，<del>或者是拿来薅新手免费额度</del>。</li>
<li><strong>事务性邮件</strong>：用于园子的评论通知和 Newsletter 等（<del>暂时还没有</del>）。</li>
</ul>
<h3 id="个人域名邮箱">个人域名邮箱</h3>
<ul>
<li><del>邮件服务一定要能发邮件——将军</del></li>
<li>可以接受的国内速度</li>
<li>足够的隐私性</li>
<li>IMAP / SMTP 支持</li>
<li>自定义域名</li>
<li>不太高的价格</li>
</ul>
<h3 id="事务性邮件">事务性邮件</h3>
<ul>
<li>有足够的免费额度</li>
<li>易用的 API</li>
<li>良好的发件送达率</li>
</ul>
<p>看起来这个和第一个可以合并，例如使用 <code>infochan@本站域名</code> 发送事务性邮件。但是小氯不太喜欢这样，因为使用一个「个人」性质的邮箱去发送大量（迫真）的事务性邮件其实并不是什么好事，会增加被判定为 Spam 的风险。再说，Info 酱也不是小氯的附属品，分配一个这么私人化的地址有点不太好（<del>Info 酱：我没意见喵</del>）。</p>
<h2 id="个人域名邮箱的选择">个人域名邮箱的选择</h2>
<p>这是个漫长的过程。小氯纠结了好久，最终才下定了决心。国内外的域名邮箱多如牛毛，在这里报菜名疑似确实有点水长度了。所以小氯还是重点介绍一下自己<strong>考虑过</strong>的吧，余下的一笔带过即可。</p>
<p>此外，需要提前说明一点：<strong>隐私性和匿名性是不同的</strong>。隐私性有点像是医院的病历，这些信息和你强关联，但是医院承诺这些数据不会被无关人等或者恶意攻击者查看（但愿如此）；而匿名性就像假面舞会，任何人都可以参加和观察，但是他们不知道「那是你」。虽然说 Mailbox 使用各种方式（例如最小注册信息）也可以实现很高的匿名性，但是下面我们的讨论主要集中于「高隐私性」的象限。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/20250214-privacy-and-anonymity-coordinate.svg" alt="邮箱服务的隐私性-匿名性坐标系" 
        class="mx-auto rounded-lg block" loading="lazy" width="430"  />
    
</figure></p>
<h3 id="国内的免费邮箱">国内的免费邮箱</h3>
<p>目前已知的大概有这么几个：</p>
<ul>
<li>阿里邮箱（依然可注册，但是入口很难找）</li>
<li>腾讯邮箱（可注册，需开通 WeCom）</li>
<li>网易邮箱（应该是免费的）</li>
<li>飞书邮箱（可注册）</li>
</ul>
<p>如果要从其中对比一下的话，阿里邮箱和飞书邮箱应该算是体验比较好的。不过除非您对国内速度有着极端苛刻的要求并且不太在乎某些方面的问题，否则小氯不太推荐您碰这些东西。</p>
<h3 id="国内的付费邮箱">国内的付费邮箱</h3>
<p>嗯哼？</p>
<h3 id="国外的免费邮箱">国外的免费邮箱</h3>
<p>很遗憾，几乎没有。唯二可以算进这个类别的大概是 Lark（飞书的国际版）和 Zoho。Zoho 免费版不支持自定义域名，Lark 算是还不错的，但是据说有一些奇奇怪怪的限制，小氯没有过多研究。</p>
<h3 id="国外的付费邮箱">国外的付费邮箱</h3>
<h4 id="google-workspace---microsoft-365">Google Workspace &amp;  Microsoft 365</h4>
<p>两个大厂的产品。优点是老牌、认可度高且成熟，而且附带其他的高级功能，例如办公套件；缺点是相对较贵（Google Workspace 7 USD / mo，Microsoft 365 商业基础版 46 CNY / mo）。此外，这两个服务的隐私性有一定争议。虽然说牢谷和牢软的 Enshitification 大法应该还没修炼到第三层，但是鉴于 Gmail 和 Outlook 的情况，还是认真一点为好，例如把地区选到 GDPR 辖区（如果您能接受这个延迟）。</p>
<h4 id="icloud-mail">iCloud+ Mail</h4>
<p>牢果的 iCloud+ 的一个小的附加服务。</p>
<p>iCloud+ Mail 的第一优点自然是与 Apple Eco 的深度集成，对小氯这种 Apple Eco 使用者来说很友好。此外，还有一个更重要的点是：<strong>它便宜</strong>。iCloud+ 美区的 50 GB 套餐只需要 0.99 USD / mo，堪称是所有域名邮箱中最便宜的。当然，由于奥斯曼帝国的传统艺能，土区的 iCloud+ 定价比美区、国区都便宜一些。不过就我们 50 GB 的套餐来说，只便宜了 1 ~ 2 CNY，对于小氯这个还需要用 iCloud 和 Apple ID 的家伙来说，实在是不值得大费周章。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>当然，iCloud 的缺点也很明显：首先，与 Apple 生态强绑定，在其他系统的设备使用只能依靠网页端或者第三方邮件客户端，不如 Mail app 那么顺滑；其次，只有基本的邮件收发功能，没有高级的企业功能；以及，只支持五个自定义域名，每个域的地址只能设置三个。这么看，iCloud+ 大概定位上就是一个单纯的「个人或家庭用的域名邮箱」，而不是企业邮箱。当然，这不是什么大事：由于小氯只给自己用，开一个 Catch-All 即可。</p>
<p>至于隐私性嘛……只能说比 Gmail 和 Outlook 强吧。虽然说牢果主要卖硬件，不像牢谷那样完全靠吃数据过活，而且还有官方承诺「不扫描用户邮件<strong>用于广告目的</strong>」（我们姑且相信这是真的），但是，美国公司，你懂的。不过，虽说把数据交给大公司本身就不是个好主意，但有句老话说得好，「All big techs are awful, but some techs are more awful than others」（<del>奥威尔：版权费交一下谢谢</del>）。</p>
<h4 id="fastmail">Fastmail</h4>
<p>著名的邮件服务，风评很好。存储空间慷慨，对于个人使用非常实惠（Individual 套餐有 60 GB）。价格方面中等偏高：Individual 套餐 6 USD / mo（年付 5 USD / mo）。不过如果是家庭装拼车 + 年付的话（假设这东西可以拼车），可以压到不到 2 USD，倒也算能接受。</p>
<p>唯一的缺点大概是价格，对于一个赛里斯的学生来说，一个月 30 多听着还是高了点，而且也没有教育优惠。</p>
<p>至于隐私性，小氯认为还是可以的，应该比牢果还强一些，对于我们这个级别的使用很不错了。但也并不特别值得放心。很简单：<strong>澳大利亚属于五眼联盟</strong>。FVEY 对待个人隐私是啥德行，我也不用多说了。</p>
<h4 id="zoho-mail-lite">Zoho Mail Lite</h4>
<p>Zoho Corporation Pvt. Ltd. 是牢印的一家公司（<del>干净又卫生呐</del>），在……嗯，基于云平台的企业级应用软件解决方案方面比较有名。其整套产品包括办公套件、CRM、企业邮箱、财务 / 人力 / 项目管理、客户支持、商业智能分析、低代码平台和营销自动化等。</p>
<p>Mail Lite 是 Zoho 的轻量级付费计划，1 USD / mo，性价比很高。不过据说有一些漏信的情况，咱也没试过，不能给出准确的评价。隐私方面的话，不能指望它有多好，但是肯定比 Gmail 强就是了。</p>
<h4 id="protonmail--tutanota">ProtonMail / Tutanota</h4>
<p>E2EE 邮箱两兄弟，由于有端到端加密，隐私性极好。价格中等偏高。缺点是使用自有的 E2EE（某种意义上说这也算是个优点），因此不能使用一般的 IMAP / SMTP 客户端。</p>
<h4 id="runbox--mailbox--migadu--startmail-">RunBox / Mailbox / Migadu / Startmail &hellip;</h4>
<p>欧洲的活宝们，由于 GDPR 的制约，隐私性可能会比较好。小氯有点脸盲症，所以挑几个列个表格好了。</p>
<table>
  <thead>
      <tr>
          <th>服务商</th>
          <th>最低计划</th>
          <th>国家</th>
          <th>价格</th>
          <th>存储空间</th>
          <th>域名 / 别名数目</th>
          <th>收发件限制</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Mailbox</td>
          <td>Standard</td>
          <td>🇩🇪 德国</td>
          <td>3 EUR / mo</td>
          <td>10 GB</td>
          <td>25 aliases @mailbox.org, 50 aliases @customdomains</td>
          <td>不明</td>
      </tr>
      <tr>
          <td>Runbox</td>
          <td>Mini</td>
          <td>🇳🇴 挪威</td>
          <td>84.95 USD / 3a</td>
          <td>10 GB</td>
          <td>5 email domain names, 100 aliases @runbox domains, Unlimited aliases on your domains</td>
          <td>不明</td>
      </tr>
      <tr>
          <td>Migadu</td>
          <td>Micro</td>
          <td>🇨🇭 瑞士</td>
          <td>19 USD / a</td>
          <td>5 GB</td>
          <td><a href="https://migadu.com/pricing/#what-is-the-domains-limit-on-the-micro-plan">Almost Unlimited</a></td>
          <td>200 in / d, 20 out / d</td>
      </tr>
      <tr>
          <td>Startmail</td>
          <td>Personal</td>
          <td>🇳🇱 荷兰</td>
          <td>4.99 USD / mo</td>
          <td>20 GB</td>
          <td>one custom domain, Unlimited email aliases</td>
          <td>不明</td>
      </tr>
  </tbody>
</table>
<p>很明显，小氯要多提一句 Migadu 这个显眼包。这个收发件限制看着实在是太离谱了，虽说你有无限的域名和别名，但是小氯也不用那么多啊（虽然说，从运营者的角度说，限制收发件数目而不是别名数目确实能更好地控制成本）。此外，虽然这家服务商位于瑞士，<strong>但是他们的数据中心在法国，而且数据不加密</strong>。用<a href="https://migadu.com/procon/#in-switzerland-but-servers-are-not">他们自己的话说</a>：「We find EU privacy laws much more elaborate and restrictive than the Swiss ones. Switzerland used to be famous for banking secrecy, but that has nothing to do with digital data.」这话的对错我们姑且不评判，不过这么说确实……很有个性，不是吗？</p>
<h3 id="自建邮箱">自建邮箱</h3>
<p>也就是自己找一台服务器或者 VPS 或者别的什么东西，自己搭一个邮件服务。优点是紫柚，缺点是除此之外。你不仅需要一个很干净的 IP，还需要部署一个合适的邮件服务器，配置各种乱七八糟的东西（IMAP / SMTP，SPF，DKIM，DMARC……），然后长期维护。虽然对于各位老友来说，这不算是高不可攀的技术门槛，但是整天自我运维也属实够累人的。</p>
<h3 id="奇技淫巧">奇技淫巧</h3>
<p>下面这些方案都挺偏门的，大家谨慎尝试。</p>
<h4 id="cloudflare--resend">Cloudflare + Resend</h4>
<p>作为互联网大善人，Cloudflare 经常被用来搭各种奇怪的服务，临时邮箱算是其中一个，例如：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/dreamhunter2333/cloudflare_temp_email" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>dreamhunter2333/cloudflare_temp_email</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        CloudFlare free temp domain email 免费收发 临时域名邮箱 支持附件 IMAP SMTP TelegramBot
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #41b883">
            </span>
            <span>Vue</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">3238</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-02-19</span>
        </div>
    </div>
</div>
<p>这个服务可以搭配 Resend 这样的发件 API 以及 Proxy Server，作为一个真正的邮件服务。不得不说，开源社区的创造力是无限的。不过具体可用性如何，小氯就不清楚了。</p>
<h4 id="disroot--捐赠">Disroot + 捐赠</h4>
<p><a href="https://disroot.org">Disroot</a> 是一个荷兰的非营利组织，以对抗科技巨头的垄断和数据收集为己任。他们提供了一系列的免费公共服务，电子邮件是其中之一。</p>
<p>根据 <a href="https://disroot.org/en/services/email">Disroot 官方的说法</a>，他们为每一位捐赠金额达到或者超过 12 杯咖啡的捐赠者提供<strong>终身</strong>的自定义邮件域名服务。小氯不喝咖啡，因此不太清楚 12 杯咖啡是多少。不过如果打算长期使用的话，应该还是比订阅制服务合算的。</p>
<p>存储空间方面呢，Disroot 为每个注册账户的人都免费提供 1 GB 的空间，轻度使用倒是够，但是确实少了点。可以付年费扩容，不过价格也不算低。</p>
<h2 id="icloud-配置">iCloud+ 配置</h2>
<p>小氯最后选择的方案是 iCloud+ Mail（<del>从长度也可以看出来</del>），毕竟 iCloud+ 对小氯也是有用的，那为什么还要额外花一笔钱呢。</p>
<p>至于隐私性的问题？的确，小氯前面说了，iCloud+ 的隐私性也并不太好，容我解释一二。</p>
<p>由于电子邮件这种通讯方式本身的限制，其隐私性很难提高到一个接近完美的级别。例如，PGP / GPG，足够安全了吗？似乎是的。但是在量子计算机面前，RSA 和 ECC 也很难说立于不败之地。更严重的是，GPG 是没办法很好地加密邮件的元数据的，例如收发件人的地址和邮件的主题。这一点可以给社工学攻击留下巨大的漏洞。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>除了技术问题，道德和政治问题也是值得考虑的问题。当我们说「我们信任某一家服务商」时，我们都或多或少地对这家服务商以及其宣誓效忠的法律寄予了一些道德上的信心。例如，我们一般认为 EEA 内的邮件服务比较可靠，是因为著名的 GDPR，但这也需要我们认为，除非是元首带着鸡农回来了，否则欧洲各国无论如何都会坚持保护用户的隐私，而不是将其用作武器和资源。此外，各种各样的军事和情报组织也值得警惕：例如，德国、荷兰等国是「十四眼联盟」（<del>千手百眼巨人</del>）的成员国，所以其官方监管的担忧要比北欧五国严重一些（<strong>注意我说的不是「危险更高」</strong>）；而北欧五国内，瑞典和丹麦的情况可能比较复杂（例如瑞典 FRA 曾经被指控与 NSA 合作），挪威、芬兰和冰岛的风险则相对低一点。但是<strong>上面提到的所有国家都是北约国家</strong>。瑞士一向自称（和被认为）是永久中立国，但是近些年的一些事情，也让人对所谓的「永久中立」难以寄予厚望。所以，小氯信任技术隐私的程度是远远高于道德隐私的。如小氯之前说过的：「<strong>在进行任何技术实践时，都应以最坏的恶意度测人心</strong>。」</p>
<p>所以，既然知道我们只能做这么多，那么为什么不选一个平衡隐私性、便利性和性价比的选择呢？而且，一般来说，除非您被顶级的社工学黑客或者某个国家的情报机构盯上了，否则只要您防着些社工学攻击，同时会耍一点 GPG，我们现在的邮件服务隐私程度就已经足够安全啦。如果您真的需要极高的加密级别，那小氯推荐您还是别用电子邮件了，加密即时通讯它不好嘛。</p>
<h3 id="配置">配置</h3>
<p>关于 iCloud+ Mail 的配置，可以参考<a href="https://blog.muna.uk/archives/iCloud-plus-mail.html">芙樱竹老友的博文</a>。iCloud+ 需要持续订阅，由于英区的 PayPal 绑不到美区的 iCloud，同时 BOC 的 Mastercard 也被拒付了（<del>嘤嘤嘤</del>），小氯采取的方法是往 Apple 账户里提前充好一笔钱，也就是买礼品卡，这个还是蛮容易的，Alipay 和 Apple 官网都可以操作。</p>
<h3 id="其他问题">其他问题</h3>
<p>目前用了一个多月了，似乎也没有遇到什么问题，感觉还是不错的。</p>
<p>小氯在调查 iCloud Mail 的名声时，发现了极多的负面评论。不过它们的年代都比较久远了，大概是 iCloud Mail 刚出的时候。那个时候的 iCloud Mail 确实还有很大的进步空间。现在 iCloud Mail 的情况似乎已经改善不少。</p>
<p>之前还听过一种说法，iCloud+ Mail 不能用自定义域名地址发信。这应该也是比较老的说法，现在的 iCloud+ 已经支持了。只需要在登录第三方客户端时，使用你<strong>原本的 iCloud Mail 地址登录</strong>即可，而 Mail App 则有原生适配（如果您发现小氯发给您的邮件的地址不是 <code>hi@本站域名</code> 请一定一定要告诉小氯一声！ (＞ｍ＜)）。</p>
<h2 id="临时邮箱">临时邮箱</h2>
<p>我们这里把临时邮箱理解为「Receive-only」的。临时邮箱的实现思路大致有两种：</p>
<ul>
<li>（拟）全功能：通过某种技术手段（例如 Cloudflare 全栈或者一个轻量级 IMAP 服务器），实现直接在服务内收取、存储和读取邮件。代表如各种基于 Cloudflare 的临时邮箱服务（可以看<a href="https://github.com/zhuima/awesome-cloudflare">这里</a>）。</li>
<li>转发：服务本身并不存储邮件，而是作为代理将邮件转发到一个现成的邮箱地址。代表如 Forward Mail 和 Cloudflare Email Route。</li>
</ul>
<p>小氯用的是 Cloudflare Email Route。简单来说，Cloudflare Email Route 就是通过将你的邮件相关 DNS 记录指向 Cloudflare 的服务器，让 Cloudflare 接管你的收件行为，例如发送至特定地址、发送到 Worker 或者直接抛掉。</p>
<p>这种方式最大的好处是简单，一分钟之内就能搞定。而且，这种方式可以给予你最大的潜在自由度。例如，小氯现在想把邮件内容解析一下发到 Bark？没问题，写一个 Email Worker 就行。接入一下大模型智能提取验证码？也可以，在 Email Worker 加入一个 API 调用就行。只要你懂一点 Cloudflare Workers 开发，你可以把这个服务玩出花来。</p>
<p>缺点嘛，大概就是：你需要先有一个值得你信任的邮箱地址。此外，你还得信任 Cloudflare。不过对于 Cloudflare 小氯还是比较信任的，总比牢谷牢软它们强多了吧。</p>
<p>邮件路由的配置极其简单。拿好你的域名，在侧边栏选择「电子邮件」-「电子邮件路由」，单击「开始使用」，跳过入门指南。然后按照「设置」的提示，添加相关的 DNS 即可。然后可以设置一个 Catch-All 规则，把所有地址的邮件转发到一个地址。</p>
<p>这个方法也可以用来创建无数个「不那么临时」的域名邮箱，用来注册各种服务。小氯就是这么干的。</p>
<p>如果您也想这样做，小氯这里有一点对防御黑客和社工学攻击可能有用的建议：</p>
<ul>
<li>最好不要选择与主域名一致的域名，而是单独注册一个，最好能没有什么个人色彩，而是和公共邮件服务很像（如 <code>awesome-mailbox.net</code> 之类的）。</li>
<li>最好选择随机化前缀，配合密码管理器使用。例如，<code>giuln2iuy783y7@yourdomain.tld</code> 比 <code>chatgpt@yourdomain.tld</code> 好得多。</li>
</ul>
<h2 id="事务性邮件-1">事务性邮件</h2>
<p>事务性邮件提供商也很多，例如 SendGrid，Mailgun，AWS SES 等。小氯用的是 <a href="https://resend.com">Resend</a> 。Resend 提供每天 100 封的免费额度，大体来说还算够用（<del>够用：指用量不到 5 %</del>）。</p>
<p>Resend 的配置没有太多好说的，注册账户，配置 DNS 记录再创建 API Key 即可。对于 Twikoo 来说，其使用的 Pushoo 没有对 Resend 的原生支持，因此需要手动配置各项信息。</p>
<ul>
<li><code>SENDER_EMAIL</code>： <code>username@your.domain</code></li>
<li><code>SMTP_SERVICE</code>：留空</li>
<li><code>SMTP_HOST</code>：<code>smtp.resend.com</code></li>
<li><code>SMTP_PORT</code>：465</li>
<li><code>SMTP_SECURE</code>：<code>true</code></li>
<li><code>SMTP_USER</code>：resend</li>
<li><code>SMTP_PASS</code>：Your API Key</li>
</ul>
<p>目前用着还是不错的。关于送达率，小氯测试了以下邮箱：</p>
<ul>
<li>✅ Gmail：完全正常。</li>
<li>✅ QQ 邮箱：完全正常。</li>
<li>⚠️ Outlook：会进垃圾箱（不过我也能料到，毕竟 Outlook 连牢软自家的邮件都敢扔垃圾箱）。</li>
<li>❌ 126：暂时性拒收，无报错信息。这个应该不是我的问题，是 126 邮箱服务器本身的问题。</li>
</ul>
<p>如果发现 Céfiro 的邮件进了垃圾邮件，还请您手动捞一下 qaq</p>
<h2 id="后记">后记</h2>
<p>似乎……也没什么可说的了？那就这样吧。<del>你这个水文章的杂鱼杂鱼杂鱼</del>！</p>
<h2 id="honor-code">Honor Code</h2>
<ul>
<li><a href="https://atpx.com/blog/my-email-domain-selection/">我的域名邮箱选择 - atpX</a></li>
<li><a href="https://blog.muna.uk/archives/iCloud-plus-mail.html">使用 iCloud+ 自定义你的电子邮件域名 - 芙樱竹的博客</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>截至小氯写作本文，iCloud+ TR 50 GB 的价格是 24.99 TL（即 TRY，新土耳其里拉），按照小氯写下本文字时的国际货币汇率，大致相当于 5.04 CNY。而国区的价格为 6 CNY，美区的价格为 0.99 USD（大致相当于 7.22 CNY）。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>这方面做得最好的应该是 Tuta。有 E2EE，能加密部分元数据，以及采用了后量子加密算法（<a href="https://tuta.com/blog/post-quantum-cryptography">至少他们自己是这么说的</a>）。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Hello，Forgejo</title><link>https://chlor.me/hello-forgejo/</link><pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-forgejo/</guid><category>Forgejo</category><category>开源</category><category>哲学</category><description>本文讲述了自托管 Git 服务 Forgejo，以及作者由此引发的对开源社区治理的思考。Forgejo 是 Gitea 成立商业公司后，Codeberg 创立的坚守自由理念的分叉。作者首先梳理了从 Gogs 到 Gitea 再到 Forgejo 的演化过程，然后通过亲身部署，指出 Forgejo 与 Gitea 现阶段功能差异不大，但更契合理想主义者的精神诉求。文章后半部展开深度思辨，将开源运动与国际共运类比，剖析「分叉自由」背后的治理困境：去中心化理想与制度化需求的矛盾，理念纯洁性与现实可行性的冲突，以及技术乌托邦愿景在人类社会组织规律前的局限性。作者以乐观、充满希望的笔触收尾，坚信开源社区将不断进步，理想的「技术天国」也会越来越近。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-forgejo-cover.webp" alt="Hello，Forgejo" />
        </figure>
        <p>各位老友，下午好。这里是 Chlorine。</p>
<p>说好考完试要爆更，结果既没爆也没更，除了一篇成何体统的开发日志之外什么都没憋出来，连年终总结都没写（悲）。</p>
<p>所以，水一篇小小的文章吧，讲讲最近拿到的一个新玩具，一个对小氯来说用处不大不小的 self-hosted service。</p>
<p><a href="https://forgejo.org">Forgejo</a>。</p>
<h2 id="从-gitea-说起">从 Gitea 说起</h2>
<p>大家应该都知道 <a href="https://gitea.com">Gitea</a>，Git with a cup of tea。小氯很喜欢这个名字，有趣且闲适的 Git 服务。当然，因为喜欢名字就去部署一个服务听着像个憨憨，所幸 Gitea 还是很争气的，给了我们更加充足的理由去用它：资源占用少——随便找一台树莓派就足够运行了，爱来自 Golang；功能齐全——GitHub 和 GitLab 有的它基本都有，不管是基本的仓库，还是 issue、PR、Wiki、Project 抑或是 CI/CD。截至小氯写这篇文章，Gitea 已经有了超过 40 万次安装（数据来源：Gitea 官网），堪称最受个人和小型团队欢迎的开源自托管 Git 服务之一。</p>
<p>当然，根据园子第一定律，既然小氯在写这篇文章了，就肯定是 Gitea 的某些地方让小氯不满意了。能是哪里？总不可能是小氯觉得应该用<del>高贵的</del> Rust 把 Gitea 重写一遍吧？</p>
<p>这就要讲一讲 Gitea 的历史了。</p>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>以下的内容为小氯从各方收集的资料总结而成，可能存在疏漏或者不准确，欢迎批评指正。同时，以下内容不代表对任何开发者或项目的任何看法。</p>
    </div>
</div>
<h3 id="从-gogs-到-gitea">从 Gogs 到 Gitea</h3>
<p>要说 Gitea，就不得不说说它的前身——Gogs，Go Git Service。Gogs 算是半个互联网古董了——诞生于 2014 年。它的创始人是著名的中国开发者——Unknwon，或者可以称为「无闻先生」。</p>
<p>2014 年……大概是什么时候呢？小氯还在上小学，家里唯一能称得上「计算机」的物件是一台如今已经打不开了的东芝笔记本电脑，内存估计都没有一个 G。而当时的小氯对计算机知识的了解呢，就和山顶洞人对量子力学的了解一样博大精深。据史料记载，当时的 GitHub 已经是 Forge 平台（代码托管平台）的巨头了，但是其不开源，私有仓库要收费，也没法自托管。GitLab 倒是有开源社区版，可以自托管，但是很重，不适合喜欢「Keep things light and fun」的个人和小型团队。</p>
<p>所以……程序员说，要有光，于是有了 Gogs。</p>
<p>Gogs 的口号是「painless self-hosted Git service」，目标是打造一个轻量化的、易用的、功能丰富的开源自托管 Git 服务。而它也确实做到了，在短短的几年内吸引了大批的忠实拥趸。</p>
<p>不过，当时间来到 2016 年，事情开始出现了一些变化。作为个人主导的项目，Gogs 的开发节奏受无闻先生的个人风格的影响相当大。而无闻先生的开发风格呢……比较求稳，讲究慢工出细活，所以对社区的 issue 和 PR 的响应也就没那么快。这个事情让很多热心的社区成员很着急。同时，可能是对自己的水平太有自信（虽然说他也确实有底气自信），无闻先生对社区的贡献和参与比较谨慎，更倾向于独自掌控 Gogs 的开发路线。这也引发了对 Gogs 项目皿煮问题的担忧。</p>
<p>所以……Gogs 的重要贡献者之一，Lunny Xiao，带领一群社区的开发者分叉了 Gogs，于是，世界上有了 Gitea。</p>
<p>Gitea 继承了 Gogs「painless self-hosted Git service」的口号，并且积极接受社区的贡献和意见，进行活跃的开发活动，非常地皿煮。什么多语言，CI/CD，只要社区喜欢，全都安排上。于是 Gitea 的热度很快超过了 Gogs，成为了自托管 Git 服务中最受欢迎的明星之一。</p>
<h3 id="codeberg-的担忧">Codeberg 的担忧</h3>
<p>时间在「饮茶（Gitea）先啦」的欢笑声中如流水般逝去。一转眼，时间来到了 2022 年。</p>
<p>这一年的 Gitea 社区发生了一件大事：<strong>Lunny Xiao、techknowlogick 等维护者成立了 Gitea Limited 公司</strong>，并且把 Gitea 的商标、域名等资产转移到了公司的名下。</p>
<p>平心而论，虽说不和社区充分协商就成立公司接管资产有点不皿煮，但这倒也无可厚非，至少不算是什么大错。甚至如果处理得当，还可以促进 Gitea 的维护和开发，例如，可以雇佣全职的维护者，或者是通过商业服务获得资金支持。</p>
<p>不过，我们也能想象到，社区对这件事会有多大的反应，尤其是坚定的 FOSSist 们。我们先不谈意识形态的问题，成立公司，就意味着 Gitea 的发展有被商业利益影响的风险（注意我说的是风险），同时 Gitea Ltd. 也可能利用自己的商标的权利去限制社区对 Gitea 的使用。退一步说，即使说 Gitea Ltd. 的创始人们都是初心不改的谦谦君子，谁又能保证后继者们也能做到呢？上一个口口声声说「不作恶」的公司现在是什么样，也用不着小氯多说了吧。</p>
<p>在社区众多的反对声音中，有一个组织扮演了至关重要的角色——</p>
<p><strong>Codeberg e. V.</strong>，<a href="https://codeberg.org">Codeberg</a> 的运营者。</p>
<p>Codeberg e. V.，为了简单我们就叫它 Codeberg 好了，是个大名鼎鼎的非营利组织，总部位于德国柏林。它运营着基于 Gitea 的代码托管服务——Codeberg。这个平台别的优点没有，就是紫柚皿煮开放共享，大家一起开开心心地用爱发电，因此在开源社区名声极好。</p>
<p>听说了 Gitea Ltd. 的事，Codeberg 可不高兴了。毕竟身为 Gitea 的重要使用者和贡献者，一大早起来发现自家的地基被人起了，能高兴才怪。于是 Codeberg 开始和 Gitea Ltd. 友好交流（口头），包括提议将 Gitea 的控制权交给非营利组织等。不幸的是，最后双方并没有达成一致。</p>
<p>众所周知，惹日耳曼人的后果是很可怕的。于是，Codeberg 有了一个邪恶的主意——闪击 Gitea（开个玩笑）。</p>
<h3 id="从-gitea-到-forgejo">从 Gitea 到 Forgejo</h3>
<p>2022 年 12 月 15 日，为了延续自托管代码平台自由、社区治理的传统，Codeberg 公布了 Forgejo 项目。</p>
<p>Codeberg 的原话是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Luckily Codeberg is in a unique position to reconnect the Gitea community in one place, independent and out of control of Gitea Ltd. And so we did.</p>
</blockquote>
<p>有时候不得不感叹，历史不会重复，却永远押着同样的韵脚。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>彼时彼刻，恰如此时此刻。</p>
</blockquote>
<p>后面的故事我们就不详细说了，Forgejo 当然延续了下来，并且开始积极地开发新功能、修复旧问题。如今的 Forgejo 虽然还没办法取代 Gitea 的地位，但是也已经有了一批忠实的追随者和热闹的社区，也凭借自己「永远自由」的承诺，成为了 FOSS Forge 的扛旗者之一。</p>
<h2 id="关于-forgejo">关于 Forgejo</h2>
<p>故事讲完了，我们来说说 Forgejo 本身吧。</p>
<p>Forgejo 的名字应该是来自「forĝejo」，也就是世界语的名词「forge」。虽说世界语暂时来看不太世界，但是用在这里似乎还蛮有兼济天下的情怀的。</p>
<h2 id="安装-forgejo">安装 Forgejo</h2>
<h3 id="安装">安装</h3>
<p>当然还是使用 <code>docker-compose</code> 一把梭。理论上来说这里应该选择自由的 Podman，但是奈何小氯实在是太习惯于 docker-compose 了，红豆泥私密马赛。</p>
<pre><code class="language-yaml">services:
  server:
    image: codeberg.org/forgejo/forgejo:10
    container_name: forgejo
    environment:
      - USER_UID=1000
      - USER_GID=1000
    restart: unless-stopped
    volumes:
      - ./forgejo:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - '3000:3000' # 也可以只映射到 127.0.0.1 或者别的地址，看你的习惯
      - '2222:22' # 端口改一个你喜欢的就好
</code></pre>
<p>下面使用 <code>docker-compose up -d</code> 即可。这个镜像在 Codeberg，国内的机器能连上，但是会有亿点点慢，还请耐心等待。</p>
<p>当然，用 <code>podman-compose up -d</code> 也完全跑得起来。不需要怀疑，小氯已经帮您试过啦 (*≧ω≦*)</p>
<h3 id="反代">反代</h3>
<p>略去。</p>
<h3 id="初始化">初始化</h3>
<p>访问 <code>https://git.yourdomain.tld</code>，会看到一个初始化的界面，按照其指示来配置即可。</p>
<p>不过友情提示一下：如果选择关闭注册，并在初始化界面创建管理员的话，容易卡住，可以先开放注册，注册管理员后编辑 <code>your-dir/forgejo/gitea/conf/app.ini</code>，把 <code>service</code> 节的 <code>DISABLE_REGISTRATION</code> 改为 <code>true</code> 即可。<del>所以为什么不用 TOML 呢？</del></p>
<p>此外，如果您托管的是一个私人实例，最好把联邦功能关掉，编辑上面的 <code>app.ini</code>，加入下面的配置即可——所以这好像也是默认选项来着：</p>
<pre><code class="language-ini">[federation]
ENABLED = false
SHARE_USER_STATISTICS=false
</code></pre>
<p>……等会？联邦？！</p>
<p>嗯呐，就是联邦，Federation。Forgejo 正在积极开发联邦的功能，让各个实例的用户们能够跨实例进行协作，虽然说这个功能还没实装，但是确实很吸引人。</p>
<p>真是个天才的想法呢，<del>小氯为什么没想到</del>？</p>
<h3 id="后续">后续</h3>
<p>后续？没后续了。Forgejo 的操作相当简明，大家开开心心地用即可。</p>
<p>不过小氯倒是遇见了个问题，就是在 GPG 密钥生成加强签名时出现了警告：</p>
<pre><code class="language-txt">gpg: WARNING: server 'gpg-agent' is older than us (2.2.44 &lt; 2.4.7)
gpg: Note: Outdated servers may lack important security fixes.
gpg: Note: Use the command &quot;gpgconf --kill all&quot; to restart them.
gpg: using &quot;XXXXX&quot; as default secret key for signing
gpg: problem with fast path key listing: IPC parameter error - ignored
</code></pre>
<p>这个问题有点莫名其妙的，小氯试过 <code>gpgconf --kill all</code> 和重装 GPG Agent，最后好像也没解决。不过至少是不耽误用了。</p>
<h2 id="我应该切换到-forgejo-吗">我应该切换到 Forgejo 吗？</h2>
<p><del>小氯每日入机中文</del></p>
<p>简而言之：</p>
<ul>
<li>如果您还没有自己的 Forge 平台，那我推荐 Forgejo。</li>
<li>如果您不是原教旨 FOSSer，并且用 Gitea 用得很习惯，那继续用着就好——二者的功能在现阶段的差异其实可以忽略不计，使用体验没有大的区别。甚至呢，Gitea 的社区和生态还要更成熟一点。</li>
<li>如果您用的是 GitLab……嗯哼？</li>
</ul>
<h2 id="后话以及碎碎念">后话，以及碎碎念</h2>
<p>本来呢，是想水一篇半教程半笔记性质的小盆栽的，结果不知不觉变成了开源历史 + 技术笔记 + 乱七八糟碎碎念混合体。<del>同时也鸽了好几天，你这只鸽子精啊喂</del>！</p>
<p>小氯知道 Gitea 的时间蛮久的了，大概从接触博客的远古时期就从<a href="https://blog.clf3.org/server-03/">孙哥那里</a>听过了 Gitea，一直认为这就是最好的自托管 Git 服务了（虽然这个评价也不算过誉），接触 Codeberg 之后更加重了这一印象（我真傻，真的。我单知道 Codeberg 的界面长得像 Gitea，却没看到页脚写了个 Forgejo API）。所以后来小氯试图自托管一个 Git 服务时，毫不犹豫地选择了 Gitea，于是有了 GitCl（中文名：小氯の鲜果茶）这个小小的，可爱的实例。</p>
<p>后来呢，嗯，由于用得太少，就被降本增效了（捂脸）。</p>
<p>直到最近小氯重新部署了 GitCl 从头开始，然后……我在<a href="https://social.anoxinon.de/@Codeberg/113928732561160352">这里</a>看到了 Codeberg 官方的一条帖文。</p>
<p>……所以什么是 Forgejo 呢？于是，就有了这篇文章。</p>
<p>一如上面所说的，Forgejo 的功能和 Gitea 非常接近。小氯切换到 Forgejo 的理由不过是因为，反正都要重新开始了，那为什么不试试新东西呢——以及，虽然小氯并不完全赞同 Forgejo 项目的观点，但是还是愿意支持一下理想主义的朋友们。</p>
<p>按理来说这篇文章应该在这里结束了，但是小氯忍不住想多说几句……</p>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>请谨慎阅读以下内容。</p>
    </div>
</div>
<h3 id="开源无限可分">「开源无限可分」？</h3>
<p>小氯在读开源运动的历史时，总会不自觉地将它与另一个事物联系在一起——<strong>国际共运</strong>。同样是「When the world was young」的激情燃烧的岁月，同样是对天下大同的理想世界的追求。如果写一句「FOSSers of all lands, MERGE!」的口号，估计也有不少的 FOSSer 会喜欢。不过，他们的问题甚至也是一样的，不得不让人感叹现实的奇妙。</p>
<p>有一个经典的笑话——「左翼无限可分」。不同的革命者们为了各种路线问题争吵不休，分裂为各种各样的派系，往往细枝末节的差异就可能导致彻底的分裂，互相指责对方是「修正主义者」；而开源社区呢，FSF 和 OSI 到现在也没吵出个一二三四，Copyleft 和 Permissive 许可证的圣战打得比十字军东征还带劲。项目的决策应该有 BDFL 还是完全的 DAO？要不要和大公司合作？Web3 是真正的开源吗？至于各种产品的开源路线之争，嗯……XEmacs 和 Emacs，Node 和 io，OpenOffice 和 LibreOffice，MySQL 和 MariaDB，要不要 systemd……MongoDB 的 SSPL，你觉得是大局观，他觉得是脑血栓……以及上面说的，Gitea 分叉了 Gogs，Forgejo 又分叉了 Gitea，下一步也不知道会不会再有个后继者把 Forgejo 分叉了（<del>三回啊三回</del>）……凡此种种，小氯已经不想细数了。</p>
<p>此外还有一句话——异端比异教更可恶，对「自己人」的指责和攻击，往往比「敌人」更激烈。国际共运的例子这里不举了，熟悉历史的朋友自有决断；开源运动嘛，看看开源社区把所谓「伪开源」或者是「不纯粹的开源」骂成什么样子了吧。不过这样吵来吵去，好像也没有获得与投入的时间和精力相匹配的结果，有时甚至出现了绝对亏损（负收益），吵也吵累了，名声也丢了，社区裂得像分布式数据库，至于代码？哦，代码还在上个 commit 里躺着，动都没动。不管怎么样，我们得庆幸开源社区没有自己的慈父和 NKVD，要不然估计 V 神或者 Linus 都要被当成「反开源分子」享受赛博冰镐了。或许这也算个幸运的事：争吵无果，但至少还允许争吵。</p>
<p>……<strong>所以，为什么呢</strong>？</p>
<h3 id="世上没有乌托邦">世上没有乌托邦</h3>
<p>开源运动的社区宣言的本质，就是以技术这种人类的通用语言为媒介，建立一座跨越文化边界的巴别塔，进而通过共同的思想观念统合成员们的开发行动，在人间建立起「地上天国」的技术乌托邦。然而，这种愿景能否在实践中至少不打太多折扣地落地，恐怕是一件值得探讨的事情。</p>
<p>GPL 和斯托曼强调伦理和社会责任，OSI 和 MIT License 则侧重实用和开发价值；有人喜欢 Python 的实用，有人偏爱 Lisp 的纯粹；有人认为 Unix 哲学是不可侵犯的边界，有人却表示「只要能跑起来就行」……这些理念虽然差异巨大，但要说完全不可通约，倒也是过于悲观。可惜，涉及人类的地方，总归逃不过马斯洛需求理论的制约。很多时候，尤其是涉及到「方法论」或者「开发路线」这种能和伦理挂上边的东西时，争论就往往不再是单纯的信念之争，而是涉及自我身份认同和群体归属的建构需求。人类总喜欢把一件符合自己偏好的东西图腾化，如「GPL 是自由软件和自由精神的圣杯」，那么所有可能违逆图腾的事物，都是对自我主体性的威胁。直观点说，这种行为就是图腾化某一事物或者价值后的「上纲上线」。</p>
<p>而在现实实践中，开源运动也面临着理念与实践的永恒裂隙。「用爱发电」是件值得尊敬的事，但是如果你强制要求所有的开源开发者都要用爱发电，那多少有些道德绑架。从自己的辛勤劳动中获得或多或少的物质报酬无可非议，一个开源社群本身往往也需要资金维持其运转。然而，如何平衡理想主义的志愿者们心中「纯粹」的开源与更加「实际」的项目运转，如何处理开源社区和商业公司的关系，则又是个三个鸡蛋跳舞的难题。Apache 基金会与科技巨头的微妙关系，MongoDB 被迫修改许可证的巨大争议，抑或是 Amazon 打包开源项目用于盈利，以及「自主研发」的 CEC-IDE……究竟是「不食嗟来之食」地坚持反商业化的原教旨主义，抑或是冒着「堕落」的风险尝试某种形式的商业化；面对商业公司的吸血，究竟是宁折不弯，还是起身还击……像是一道目标函数无下界的非凸优化问题，你永远没办法让所有人满意甚至「不不满意」，但是可以轻松做到让所有人都不满意。而更糟糕的恐怕是，开源社区不是什么「超越政治的纯粹技术空间」。俄乌冲突的 NPM 包投毒事件，Linus 对 Linux 内核的俄罗斯维护者「重拳出击」的操作，再理想再浪漫的人也无法视而不见。</p>
<h3 id="去中心化与无政府">去中心化与无政府</h3>
<p>维特根斯坦早已揭示：「私有语言不存在。」任何协作都需要共同规则，虽然因为种种原因，分歧不但存在而且巨大，但是我们能否维系一个共同，甚至可以接受一定模糊的规则？</p>
<p>很遗憾，这点很难。这里我们考虑的并不是如何求同存异，而是谁来定这个规则。</p>
<p>小氯前面说过，开源运动某种意义上很像国际共运。很明显，国际共运中的重要一员——无政府主义，也和开源社区很合得来。「去中心化」这个词，估计在区块链这类大众眼中的 Web3 技术兴起前就被开源社区开开心心地用上了。分散权力、社区决策，听起来确实很美好（而且在实践中很多时候也确实令人振奋）。但是和无政府主义的困境一样，如果我们稍加计算就能发现，完全的去中心化社会是不可能在任何一个稍大的规模长久维系的——它的熵实在太高了。体现在实践中，就是去中心化自治组织的治理成本指数级增长，争议解决机制的缺失导致「代码共产主义」在实践中退化为议而不决的松散联盟。所以，一定程度的中心化不可避免，无论是为了更高效的协作、更明确的规章还是更好的可持续性与传承。成功的开源实践，大都会走向制度化，Linux 基金会如此，Mozilla 亦如此。而在项目初期起到决定性作用的主要开发者们，也常常被加冕为项目的 BDFL，他们的话可以在实质上主导项目的走向。然而，这种制度本身就是对开源式民主理想的巨大讽刺，如同拿破仑加冕为「革命的皇帝」一般。而从实践的角度，BDFL 也难以完全成为诺顿皇帝式的仁慈、放权的领袖，Linus 的「暴君式管理」就是一个例证。一旦权威缺失或失误，社区将立即陷入权力真空。而将权力的中心移交给一个组织，也并没有好到哪去，如同历史上布尔什维克主义的先锋党一般。我们大可以拿上面的 Gogs 三代人举个例子：Gitea 将权力从 Unknwon 手中交到了社区，核心开发者们又将这份权力移交给了 Gitea Ltd.，Codeberg 愤而另起炉灶，于是有了 Forgejo。那么我们还可以问，Codeberg 会不会成为下一个绝对话事人？毕竟，非营利组织确实容易给人以不错的印象，但是这并不就是促进社区共同进步或者至少是「不作恶」的绝对保障。</p>
<p>另一个「去中心化的诅咒」是 Fork 机制。Fork 被视作开源民主和自由的终极体现，但是分叉权也导致生态碎片化。当 Node 分裂出 io 时，短期内确实激发活力，但长期来看是宝贵的社区注意力资源的消耗，也就是我上面说的，精力都用在内斗上了。</p>
<h3 id="后记">后记</h3>
<p>……大放厥词了这么久，按照所谓的「批判性思维」的要求，我们似乎也应该说一点讨喜的话了。事实上我们也确实值得这样说。</p>
<p>自计算机科学的青铜时代，从 ENIAC 的真空管到量子比特的辉光间，软件的甲骨文和硬件的青铜器的相互交织就将自由、开放和共享刻进了计算机科学的灵魂。而客观上来说，无论是 DeepSeek-R1 在人工智能界掀起的惊涛骇浪，或者是新一届的 FOSDEM 大会，抑或是灿烂阳光下的新大陆开发者们，都在告诉我们：开源社区的脚步永远不会停下，即便分歧、争论抑或难题。而且，历史无法重构，但代码可以 fork。或许这就是开源比革命更幸运的地方：在这里，没有哪一种失败是终结，每一次「不可调和的分歧」，都可能孕育下一个版本更新，或者是「再次出发」的宣言。或许是握手言和、合并回主分支，或许是就此别过、成为两个不同的产品。没人能彻底移除项目的 <code>.git</code>，若是我们再难携手，那便卷起我的 repo，大路朝天，各走一边。或许在我们的眼中，这些 fork 记录是分歧与裂痕，但实则是技术演化的年轮。</p>
<p>开源运动的终极浪漫，或许本就不在于消除分歧，而在于将每次争论都转化为新的 commit hash。此时此刻，从东京到洛杉矶，从上海到开普敦，从雷克雅未克到布宜诺斯艾利斯，总有人在终端中写下：</p>
<pre><code class="language-bash">git push origin new-horizon --force-with-lease
</code></pre>
<p>这或许就是数字文明最动人的地方：即便世界洪水滔天，每个 repo 都是自己的世界中不沉的诺亚方舟。</p>
<p>总而言之，我们还是留下一个光明的尾巴吧。依然心有火炬的人们还会歌唱「英特纳雄耐尔，就一定要实现」，小氯也相信，即使我们永远也达到不了我们理想的彼岸，但是我们至少可以用自己的一生，让我们离我们梦中的技术天国越来越近。</p>
<p>「<strong>Que la info fluya como el viento</strong>.」</p>

      ]]></content:encoded></item><item><title>理想乡构筑手记（1）：Hello，Hermeneutics</title><link>https://chlor.me/hello-hermeneutics/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-hermeneutics/</guid><category>博客</category><category>Hermeneutics</category><category>Cursor</category><description>本文介绍了作者在期末考试后，利用 AI 编辑器 Cursor，以野心开发模式快速构建其博客新主题「Hermeneutics」的经历。新主题采用 UnoCSS 框架，样式灵感主要来源于 Innei 的 Mix Space Shiro。文章详细描述了如何向 AI 提出需求、快速迭代，并最终完成一个可用的主题。尽管遇到了一些挑战，例如代码风格混乱和部分功能需要手动实现，但作者仍然认为这种结合 AI 的开发模式对于个人项目来说高效且具启发性。最后，作者解释主题命名源于一首同名歌曲，并留下了一个值得读者思考的问题。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-hermeneutics-cover.webp" alt="理想乡构筑手记（1）：Hello，Hermeneutics" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>如各位所见，小氯也是成功从荆棘遍野天堑绝崖的期末寄活下来了。尽管是考得一团糟，但是你就说活没活下来吧（<code>骄傲脸.avif</code>）。</p>
<p>那么既然考完了，报仇雪恨般的摆烂自然是必不可少的。当然，小氯的摆烂不是打游戏或者刷一天的视频，而是折腾自己喜欢的东西，例如小氯心爱的园子，或者是（后续）学一学 Rust、Python，或者是机器学习和统计学。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>你这哪叫什么摆烂？</p>
</blockquote>
<p>你说得对。小氯不知道，节奏不快的自我提升什么时候都成了摆烂了。</p>
<p>好的，回来。既然有了充足的时间，那么园子的一周年庆典就要提上日程了。小氯打算开一个新系列，仔细说一说小氯装修园子的过程，以及一些有的没的的感想。由于没有找到什么好的名字，就随便起了一个「理想乡构筑手记」。构筑和手记都明显，而这里的「理想乡」，来自于园子英文名的直译。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Chlorine&rsquo;s Eutopia</p>
</blockquote>
<p>本期是「 <a href="/series/%E7%90%86%E6%83%B3%E4%B9%A1%E6%9E%84%E7%AD%91%E6%89%8B%E8%AE%B0">理想乡构筑手记</a> 」的第一篇，主题是园子的新主题——「Hermeneutics」（中文直译：解释学 / 诠释学）。</p>
<p>这篇文章还可以有一个更加学术化的名字：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>基于 Cursor 的野心开发模式——以 Hugo 主题为例</p>
</blockquote>
<p>不过就其详细程度而言，其远远担不起这个名字。</p>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>下文所述的开发策略具有很强的场景和个人局限性，可能不适用于所有的场景，请自行取舍。</p>
    </div>
</div>
<h2 id="前言">前言</h2>
<p>如各位老友所见，小氯非常喜欢 <a href="https://ui.shadcn.com">Shadcn UI</a> 的风格。至于到底喜欢什么部分，难说，可能是其流畅的动画、美观的圆角、微妙的阴影和大胆的黑白撞色吧。然而，小氯并没能成功将其应用于自己的任何一个主要项目，只在几个单页 HTML 中（在 AI 的帮助下）实现过一些类似的风格。</p>
<p>小氯之前的博客主题是基于 <a href="https://github.com/kkbt0/Hugo-Landscape">Landscape</a> 魔改的 Efímero（浮光）。确实是很美观且有特色的主题，而且在小氯持之以恒的魔改下，基本上复刻了 Fuwari 大部分的功能（除了 Banner 高度的变化）。但是小氯对这个主题也只能魔改，把主题整个的样式布局拆了重来，对小氯来说还是太难了，而令人又爱又恨的 Swup 也是不忘每时每刻为小氯上血压，至今小氯也没能完美地修复 KaTeX 的加载问题。</p>
<p>而前几日（应该是前很多日了），<a href="https://shiyu.dev">时雨</a>老友自己动手做了一个新的博客 <a href="https://test.shiyu.dev/">https://test.shiyu.dev/</a>，效果相当不错。于是，小氯动了换个主题的心思，打算做一个 Shadcn 风格的主题，奈何没这个能力知道吗（范大将军音），而且在牢清的期末寄搞这个无异于紫砂，于是小氯就把这件事搁下了。</p>
<p>这一转眼，寄也寄完了，那么这些工作也该提上日程了。当然，这么大（迫真）的项目，普通的 AI 辅助是胜任不了的，小氯打算试一试最近很火的 <a href="https://www.cursor.com">Cursor</a>。</p>
<p>小氯最早是在 <a href="https://pseudoyu.com">Pseudoyu</a> 老师的博客了解到的 Cursor。Yu 老师对 Cursor 的评价相当高，称其「体验感和可用性已经和我想象的形态越来越近了」。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>在后续几个渠道了解到的评价中，都对 Cursor 赞不绝口。</p>
<p>于是小氯花了一点时间去搜集了一下 Cursor 的相关信息，大致就是一个超高校级的 AI Editor，可以结合整个项目、在线文档等满足你的代码需求，甚至直接上手帮你改代码。虽然说不开源，但是功能也是真的很强。</p>
<p>Cursor 虽然没有教育账户，但是有一个试用期，应该是足够我完成这个项目了（事实证明并非如此，不知道为什么，我的免费额度用得极快，这一个项目干碎了我六七个免费账户，没办法，为了完成项目只好先亏欠一下 Cursor 了）。</p>
<h2 id="tech-stack">Tech Stack</h2>
<p>Hugo 的主题自然是不能请 React 等乱七八糟的前端神仙的，<del>就算能小氯也不会</del>。于是，小氯打算只用一个不算是框架的 UnoCSS。至于 Swup，哪凉快哪待着去，再处理那些 JavaScript 加载问题我要疯了。</p>
<h2 id="主题风格">主题风格</h2>
<p>如前文所述，小氯原本是想做一个 Shadcn 风格的主题的，不过做着做着就跑偏了。现在的主题可谓是 Anything But Shadcn（雾）。大体上也没什么风格可言了，高情商的说法可能是简洁、优雅和响应式，低情商的说法我不敢想。</p>
<p>不过，对于经常逛博客圈子的老友来说，这个风格应该不难看出其溯源：<strong>拾壹老师（<a href="https://innei.in">Innei</a>）的 Mix Space Shiro</strong>，准确来说应该是「白い」。尤其是首屏，不能说是很相似吧，只能说是一模一样。</p>
<p>作为一位前端开发的大神，拾壹老师的个人网站堪称我见过最美观的，甚至可以说没有之一。虽然说小氯还做不到像拾壹老师做得那么好，但是小氯自己已经比较满意了。</p>
<p>这里再说一下版权和许可的问题：Shiro 以 AGPLv3 开源，「白い」是闭源的。小氯做的主要是参考样式，最多是把网页截图之后扔给 AI 做参考图，控制台都没开几次，代码更是<strong>完全没看</strong>。所以，小氯认为这份代码应该不受 AGPLv3 传染性的制约。而且小氯的主题本身也是以 MIT 协议开源的，应该不会有什么法律风险。</p>
<p>那么下面，就简单说说开发的问题吧。小氯不会讲具体的开发流程，因为小氯也忘记了 (/ω＼)</p>
<h2 id="野心开发">野心开发</h2>
<p>这个词是小氯现想出来的，不过也确实有这个词。Aggressive Development，也可以翻译为激进开发、侵略性开发。简单来说就是用各种手段，以极快的速度搓一个 Production-Ready 的 MVP 产品。对于抢占蓝海市场份额或者是初创公司的 IPO 这样的场景来说，这个策略很有用。</p>
<p>小氯只是开发一个自用的主题，自然谈不上抢占市场份额，事实上，小氯只是「急功近利」而已——希望以最快的速度完成一个可以实装到园子的主题。而且，就小氯的经验来说，AI 写的代码如果没有关键性 Bug，大部分都是可用但是风格和性能不甚佳的。Cursor 的 AI 再聪明，应该也逃不出这个规律，那用来做这种 MVP 可是再合适不过了。</p>
<p>具体来说，小氯只做了这样几件事：提要求，检查是否可用，如果可用，下一个 feature，否则改。例如在写 <code>index.html</code>（现在的 <code>home.html</code>）时，小氯直接把拾壹老师的首页截了个图扔给 AI，告诉它「我希望这样的首页效果」；而在写最新文章时，小氯则是用比较复杂的自然语言描述了一下我希望的效果，事实证明 Cursor 对其理解得还行。</p>
<p>此外，也有一些部分是 AI 搞不定的，例如 Twikoo 的美化。可能是因为 Twikoo 本身不算是一个大众的东西，也并没有完整的 CSS 文档。</p>
<p>小氯采取的策略依然是拾人牙慧。博友圈中，有谁用的是 Twikoo，而且样式比较美观呢？第一个想到的肯定是<a href="https://zhheo.com">洪哥</a>。很可惜，洪哥的 Heo 主题是闭源的，于是我盯上了<a href="https://blog.anheyu.com">安知鱼老师</a>的主题。AnZhiYu 主题是开源的，于是小氯获得了一个 <code>Twikoo.styl</code>。</p>
<p>当然这个东西是不能直接拿来用的，不仅是因为其是 Stylus，就算把 Stylus 转回 CSS，好多变量小氯也没有。就算是把变量都抄下来，也不符合小氯主题的风格（<del>你事怎么这么多？</del>）。于是小氯也只好动手自己写。</p>
<p>结果就是花了大概大半个晚上，小氯拿着浏览器的控制台和开发者工具一点点地调，终于做出了一个看着还行的效果。然而现在 Twikoo 的样式还有问题，例如在回复中展开表情面板会被卡片遮挡，这个以后还要修。</p>
<p>插一句话，Twikoo 中按钮的颜色，其实就是小氯虚拟形象头发颜色的柔化版 (/ω＼)</p>
<p>做个不太详细的总结的话，野心开发对于这种急功近利的场景还是可以的，建议大致就是以下几条：</p>
<ul>
<li>尽可能详细地描述你的要求，但是不要使用「非通用性的语言」。例如，你说「iOS-style」，AI 是懂的；但是你说「类似 Innei 的设计风格」，AI 就很难听懂了，因为这并不是一种被业界广泛认可并且形成固定模式的风格，自然不能被 AI 很好地预先学习。</li>
<li>先完成最主干的部分，例如整体的布局、大块组件，把动画、细节优化和配色调整这种事情放到以后做。</li>
<li>不要想着能看懂所有代码再继续，那不现实。AI 开发的代码规模增长速度远超你的预期。你只需要关注关键部分，保证不被落得太远即可。</li>
</ul>
<p>当然，野心开发也是有很大的缺点的，最主要的就是「太着急了」，造成代码风格的混乱以及整体的难以理解（人类跟不上它的速度）。此外，AI 直接生成的代码虽然说可以跑，但是大部分时候也就是可以跑而已。代码风格的不统一和缺功能不说，很多地方还有一些离谱的 bug（或者是 feat），比方说在页面内点击目录链接居然还会触发加载动画。这些都需要小氯一点点自己改。当然，小氯把这个工作主要放到了 Alpha 之后，方式主要是 <code>⌘ + K</code> 唤出 AI 进行细粒度编辑，以及自己手动审查和修改。后者能费点时间，但是效果好一些。</p>
<h2 id="命名">命名</h2>
<p>最后，说点有趣的东西，就是「Hermeneutics」这个奇怪的名字是怎么来的。</p>
<p>下面的解释引自 Wikipedia：<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>解释学（英语：hermeneutics），又称诠释学、阐释学，是关于文本解释的理论。在中世纪欧洲，主要是对于《圣经》的解释。18世纪施莱尔马赫把解释学扩展到解释文本意义和文化意义的一般规则的理论。</p>
<p>广义的解释为意义之理解(understanding)或诠释(interpretation)的理论或哲学。由于意义经常有许多歧义，须透过理解诠释方能把握全部涵意，诠释学即是探究如何形成理解及如何实践理解之科学理论。</p>
</blockquote>
<p>这么看来，「Hermeneutics」似乎是一个极简的、高度文字性的主题，然而事实并非如此：Hermeneutics 做得相当精致（至少我自己是这么认为的），同时也谈不上文字主导。</p>
<p>OK，事情是这样的：小氯在期末季的时候偶然听到了一首歌：《<a href="https://www.bilibili.com/video/BV18S4y1v7gV">解释学 Hermeneutics</a>》:</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>If it comes first, they call that true love</p>
<p>If it comes second, they call that infatuation</p>
<p>They call that memory when it is over</p>
<p>But I call them all delusion, all delusion, all delusion</p>
<p>Beautiful delusion</p>
</blockquote>
<p>小氯很喜欢这首歌，于是打算将其作为主题的名字（甚至把这段歌词直接放到了主题的 readme 中）。如果这个主题还是当初希望的 Shadcn 风格，这个名字应该是相当合适的，不过现在，就外观而言，可能就没那么贴切了。</p>
<p>不过，各位，想想小氯的主题大部分的代码都是由 AI 生成的。</p>
<p><strong>所以，这是否也是一件值得「解释」的事呢</strong>？</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Pseudoyu. 周报 #69 - AI Coding 体验与学习的源动力[EB/OL]. (2024-08-19)[2025-01-21]. <a href="https://www.pseudoyu.com/zh/2024/08/19/weekly_review_20240819/">https://www.pseudoyu.com/zh/2024/08/19/weekly_review_20240819/</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Wikipedia. 解释学[EB/OL]. [2025-01-21]. <a href="https://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8B%E5%AD%B8">https://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8B%E5%AD%B8</a>.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>孩子们，我回来了！（2）</title><link>https://chlor.me/hooray-vacation-2/</link><pubDate>Tue, 14 Jan 2025 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hooray-vacation-2/</guid><category>公告</category><description>这么短的文章还要摘要吗……109 酱表示不能理解！</description><content:encoded><![CDATA[
        <p>是的，没错，经过了近二十天，7 门考试，4 篇论文，2 道实验题和 4 道编程题，包括 DSA、计系概、中微、大物和会原等硬课的残酷压迫后，小氯，活过来了！</p>
<p><del>（坏掉的小氯酱.avif）</del></p>
<p>等待我报仇雪恨般的更新吧！</p>

      ]]></content:encoded></item><item><title>一周年快乐</title><link>https://chlor.me/first-anniversary/</link><pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/first-anniversary/</guid><category>公告</category><description>这么短的文章还要摘要吗……109 酱表示不能理解！</description><content:encoded><![CDATA[
        <p>是的，这只是一个公告。小氯甚至几乎已经要忘记这档事了，是在去答辩的路上突然想起来的。</p>
<p>小氯本来有很多话要说，但是……如今不管是时间还是精力，似乎都如鲠在喉。张了张嘴，却只能发出艰涩粗粝的风沙，吐不出半粒的星辰。</p>
<p>不过不论如何，还是发这么一篇很水的公告吧。真正的一周年庆典，会在园子的重建计划完成后发出，预计不会超过过年。</p>
<p>一周年快乐 :)</p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（14）：泡沫箱里的宣纸</title><link>https://chlor.me/weekly-14/</link><pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-14/</guid><category>博客</category><category>出游</category><category>Fediverse</category><category>哲学</category><description>本文是作者周报的第十四期，涵盖了生活琐事、技术探索、思想转变等多个方面。作者以北京初雪开篇，由此引发出对过去时光的怀念。文章详细记录了购买新域名`viento.cc` 的过程，并解释了其含义和未来用途。作者还探讨了开源个人财务管理软件的可能性，指出由于银行API的限制，实现完全自主化管理存在困难。文章随后记录了作者在天津参加雅思考试的经历以及与朋友的聚会。在技术探索方面，作者推荐了一些基于Tauri框架的应用，并尝试使用Deno Deploy部署项目。此外，作者还分享了新购置VPS的经验，并探讨了自托管社交媒体平台的可能性，对GoToSocial、Mitra和Bluesky等平台进行了比较分析。由于对现有邮件客户端的不满，作者计划自行开发一个新的邮件客户端，并开始学习Rust语言。文章也简要提到了域名备案问题，并反思了自身情绪变化和压力下的“迟钝”状态。最后，作者反思了自身“谨言慎行”的写作风格，认为合理的争议是进步的催化剂，自己未来将尝试在保持温和基调的前提下，在博客中融入更多具有思辨性的内容。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-14-cover.webp" alt="Ephemeralis-Weekly（14）：泡沫箱里的宣纸" />
        </figure>
        <p>各位老友们好，我是 Chlorine。新的一期周报，双手奉上。</p>
<p>现在浮生散记都快变成半月刊了……没办法，苦命的牢针学生是这样的。<del>不过放心，小氯还没似呢，一时半会不会断更。</del></p>
<p>本节的标题非常晦涩且与内容关系不大，算是一个意识流的词汇吧。大家也没必要去深究其含义了。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第十四期，日期范围为公历 2024 年 11 月 25 日至 12 月 28 日。祝食用愉快。</p>
<h2 id="雨雪">雨雪</h2>
<p>这个标题的「雨」可以读上声（yǔ），也可以读去声（yù）。后者的解释是动词，下。这个奇怪的用法大概是在某首古代的情诗里面学来的，那首诗的具体内容已经记不得了，只记得一句「山无棱，天地合，乃敢与君绝」。所以后来当我看到一篇文章，题目叫作《<a href="https://zhuanlan.zhihu.com/p/103151003">当山峰没有棱角</a>》，那种福至心灵的顿悟感，相当美妙。</p>
<p>抱歉，扯远了。</p>
<p>从上周末开始，就收到了许多消息，表示北京要降温，有寒潮，甚至会下雪。来自北境的小氯自然是不害怕冷的，所以就没太在意。</p>
<p>不过，小氯还是小看了温带大陆性季风气候寒潮的夸张体感。直观的感觉，当然是天大寒，砚冰坚，手指不可屈伸。小氯翻箱倒柜地找出了羽绒服，但是居然还是觉得冷——羽绒服是当初发的，轻盈、简便而充实，而且极其压风。甚至在加上最厚的手套后，小氯的手还是出现了冻伤。</p>
<p>在周二上完会原，从法图出来时，小氯感觉眼睛里落进了什么东西。刚想抬手擦一下，结果却鬼使神差地抬头看到，路灯映照下的视野中，多了些迅疾的箭矢一般的造物。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241130213408.avif" alt="抱歉，我贫瘠的字句找不出更好的描述方式了" title="抱歉，我贫瘠的字句找不出更好的描述方式了" 
        class="mx-auto rounded-lg block" loading="lazy" width="326"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        抱歉，我贫瘠的字句找不出更好的描述方式了
    </figcaption>
    
</figure></p>
<p>是的，下雪了。这可真是讽刺，因为就在下课前摸鱼时，小氯还在写着「实际上，到现在也没下雪」。</p>
<p>如上文所说，小氯来自北境，虽然气候相比真正的北部边疆温暖不少，但对于雪，也是从小耳鬓厮磨一般的造物。所以看到雪时，也难说有什么惊喜的感觉，最多是会自言自语一句「不如家里的雪好看啊」。</p>
<p>……此外，上面说的那篇文章，曾经是我最喜欢的文章之一。这篇文章还在，但是在我再次阅读并对其存档时，我总是感觉：<strong>这篇文章是不是修改过？我隐约记得，里面有的字句不是这样的</strong>。当然，当然，也有可能只是我的幻觉。毕竟，小氯的记性一向不大好。</p>
<p>回到这篇文章。倒不是说写得有多好（虽然说确实很好），只是我始终怀念着初读文章的那种心境。那种心境恐怕是回不来了，连带着小氯曾经所有的须知少时凌云志，一起死在了 2023 年的夏天。</p>
<p>呸呸呸，说什么呢。在小氯的家乡，提这个字是不吉利的，每次说这种话题都需要呸一口，意思是甩掉霉运。</p>
<h2 id="新域名n">新域名（N）</h2>
<p><del>小氯酱现在买域名比买奶茶都勤</del></p>
<p>其实这件事实在是有点偶然……先说说买了什么吧。这次是我很感兴趣的 <code>.cc</code> 域名，具体来说，<code>viento.cc</code>。</p>
<p>事情的起因和园子的大修计划有关。小氯之前说过，打算为园子建立一套完整的服务系统（<del>尽管实际上也没几个服务</del>）。这个系统之前被命名为 HereX，小氯为此买了个新的域名，就是 <code>herex.icu</code>。</p>
<p>不过今天小氯突然想到，这个名字……是不是和 X（Twitter）的关系比较可疑？</p>
<p>我整个人瞬间不好了。</p>
<p>其实小氯最初的想法是 <code>hereis.cc</code>，前缀自不必说，就是 Here is，<code>.cc</code> 是科科斯群岛的 ccTLD，不过由于其注册开放、价格不高且简写的含义丰富，经常被拿来整活。下面是（对于园子来说）几个可能的解读：</p>
<ul>
<li>Chlorine Chan（小氯酱）</li>
<li><em>Cercis chinensis</em>（中国紫荆，即清华的校花）</li>
<li>C Compiler（C 编译器）</li>
<li>Creative Commons（知识共享许可协议）</li>
<li>Community Centre（社区中心）</li>
</ul>
<p>确实很好对吧（自我陶醉 ing）。</p>
<p>回到主线。然后小氯就开始寻找各种比较心仪的其他域名，毕竟这个可是和主域名一样重要的。</p>
<p>然后小氯想到了一个选择：<code>viento.cc</code>（<del>足以见得小氯这家伙买域名大部分时候都是脑袋一热</del>）。</p>
<p>Viento 是西班牙语，意思就是 Wind，其读音大致介于 Biento 到 Biendo 之间，如果对发音要求不是太严格的话，直接读作「Biendo」即可。</p>
<p>这个词实际上出自小氯常用的个签：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Como el viento.</p>
</blockquote>
<p>这句话允许自由解读。</p>
<p>以及……风和日光，都是自然的一部分，不是吗？（笑）</p>
<p>于是小氯拿下了这个域名，服务商是 Porkbun。之前听说 Porkbun 的事情大部分都止于其比较便宜的 <code>.moe</code> 域名，这次也算是又多了一个域名注册商了。</p>
<p>以及，我有点好奇这家公司和中国人（或者华人）有没有关系。猪肉包子，怎么听怎么都像非常有东亚特色的名字——自信点，就是中国特色。</p>
<p>目前为止，小氯对这个域名已经比较满意了。唯一的难题大概就是子服务的名字不太好起，需要花点精力。</p>
<p>如果没有意外情况（<del>比如小氯脑子一热又买了个域名</del>），园子的管理系统将使用这个域名，如果您接受到这个域名相关的信息，那么其应与园子的主域名具有同样的信任度，除非我有明确公告不再使用这个域名提供服务。</p>
<h2 id="会有开源的个人财务系统吗">会有开源的个人财务系统吗？</h2>
<p>如<a href="/weekly-13/">上篇周报</a>所言，最近小氯开始对各种各样的银行卡感兴趣。虽然说有很多个银行账户并不会提高我的社会信用（甚至可能适得其反），但是许多银行卡真的很有艺术价值。</p>
<p>——那为什么不直接去买各种周边呢？我觉得，这个问题就像是问喜爱集邮的人为什么不直接去买画张。好的邮票或者是银行卡，是实用价值和美学价值的高度统一。我偏爱这种统一，如痴迷于定理的物理学家偏爱形式之美和应用价值的统一。而且，和邮票一样，至少在此处的生活中，银行卡几乎已经是上一个时代的东西了。小氯这人很奇怪，有时会偏好那些会给自己的生活带来麻烦的旧事物。</p>
<p>抱歉，又跑题了。在思考要不要再办几张银行卡的时候，我自然而然地想到了：假如真的有这么多银行卡，我应该怎么管理呢？</p>
<p>最简单的想法应该就是使用统一化电子钱包，例如国内的 WeChat Pay，Alipay 或者国外的 Google Pay，Apple Pay，PayPal 等。的确也存在一些专门管理银行卡的软件，比如一些信用卡管家，银联的 App，甚至是一些大行的 app 也能用。</p>
<p>当然，各位来这里，显然不是为了看这些的，小氯也不想多写这些。小氯希望能找一个开源的解决方案，来实现完全自主化的个人财务管理。</p>
<p>个人财务管理是一个比较广的概念，比银行账户管理复杂得多。当然，对于目前的情况来说，小氯当然不需要使用会计等式——Assets = Liabilities + SE，也不需要 T 型账户，更不需要做 Annual Adjustment、写 Balance Sheet 或者 Income Statement，最多也就是查一下账看看是否会有什么漏记的部分。小氯没有股票、期权、基金，没有欠债，没有加密货币。而且，由于小氯严格避免任何形式的信贷和透支，信用卡完全可以被看作普通借记账户管理。</p>
<p>很遗憾，即使是这个简化版的需求，小氯也找不到任何可用的软件。原因非常简单：数据从哪里来？</p>
<p>乍一看这不是问题，从银行的 API 获取就好了。<strong>可问题是银行没有或者很少有这样的 API（注意我说的不是没有 API）</strong>，即使是有也通常只对企业级用户开放。这也好理解，毕竟金融业的信息安全要求比犯罪还高。不管是从保护用户的角度看还是从利好银行自身业务的角度看，公开开放这样的 API 都很危险。</p>
<p>所以我们也只好退一步，看看是否有一个自动化或者至少是半自动化的「记账方法」。没办法实时获取，那我记 Journal 总行了吧。</p>
<p>这个事情有很多人在做，少数派有好几篇借助短信通知等方法实现半自动化的教程，在环境更加开放的安卓，甚至有小星记账这样的软件可以实现（至少是 WeChat Pay 和 Alipay 的）几乎完全自动化的记账，只需要点一下确认就好。理论上来说，我们可以通过手机银行等方式实现相当程度的自动化（前提是短信的通知格式统一），然后读取数据到后端，形成完善的数据库和前端展示。但是这需要做很多复杂的适配工作，很容易让人失去折腾的力气。</p>
<h2 id="天津之行">天津之行</h2>
<p>去天津当然不是旅游，而是考雅思。据说天津的雅思比北京好出分一点，于是就报了天津的南开考点。</p>
<p>然后在我登录雅思网站想看一下时间时我突然发现……口试被排在了周四。</p>
<p>问题是：<strong>周四早上我有常微分方程的课</strong>。虽然常微是 PF 课，我从来不听，但是该出勤还是要去的。而常微下课就是 9:35，根本来不及赶到天津。一番权衡之后，我决定常微请一节课假，周三就直接过去等着。考虑到周六还有考试，我决定干脆不回来了，待到周六。前一天还在和 <a href="https://blog.hpcesia.com">HPCesia</a> 老友开玩笑说「好想出去玩」，结果第二天就直接坐上了火车——这何尝不是一种言出法随呢（笑）。</p>
<p>事实上北京到天津极其方便，甚至比小氯从家乡的县城到市里都方便——从北京南站到天津，也就是半个小时的车程。不过，这些车大部分都是从北京南站出发的。于是，小氯在预备出行的前一天晚上，光速买好了一张北京南站的票，并订好了酒店。</p>
<p>小氯曾经去过北京站、北京西站和朝阳站，但从来没去过南站。所幸南站的路线极其简单，只需要带上在中微课上领到的一杯瑞幸，捞一辆共享单车，一路<del>前往北大物院解放燕园</del>前往北大东门地铁站，坐着四号线一路穿过去就好。</p>
<p>小氯在天津并没有做什么事情，大部分时间都窝在酒店写代码，吃饭就靠外卖（这里没有食堂，所以说出去吃还不如点外卖方便），只偶尔出去一次。</p>
<p>总体而言，天津没有给我什么很强的印象，就是一座普通的城市，当然这也有可能是因为我呆的时间太短，浅尝辄止。不过，天津的住宿真的好便宜啊，一两百就能找到非常非常舒服的酒店。在北京这个价格只能找到一些非常经济（<del>低情商：令人不忍直视</del>）的房间。</p>
<p>雅思考试的细节就不透露了。老实说，我从来没有准备好雅思，甚至几乎没有准备雅思。雅思和四六级这种简单的考试可不一样，四六级吃高中的老本就能拿高分，雅思不行。最后就是听力和阅读发挥稳定，口语和写作一团糟，这也在意料之中，毕竟多劳多得。印象最深的应该是南开的饭还蛮好吃的（尽管我南开的朋友持强烈反对意见），而且支持 Alipay，比较 guest-friendly。</p>
<p>周六考完笔试后，小氯约上了几位在天津读书的老友，一起聚了一下。老友们的热情真的远超小氯的想象，希望将来到北京时也能尽一份「地主之谊」吧。</p>
<p>小氯拍了一点照片，但是由于技术实在差劲，也没什么拿的出手的作品。唯一还行的，可能就是本文的封面。摄于天津津湾广场。</p>
<h2 id="选课">选课</h2>
<p>12 月 6 日就是牢清每学期一度的高等信息经济学与应用博弈论实践课程，人话就是选课。</p>
<p>大二大三是牢针课业压力的癫疯期，无论上下。这学期有 DSA、计系概、中微、会原这些核癌可氢的课程，下学期同样是仙之人兮列如麻，例如概统、大物、中宏、公金、数电 / 数设。这几大硬课伺候我一个人，福气还小得了吗（悲）。</p>
<h2 id="几个有趣的-tauri-应用">几个有趣的 Tauri 应用</h2>
<p>一般来说小氯不太喜欢写「应用推荐合集」这种东西，就连 App Defaults 以及当初说着要写的「小氯の工具箱」都懒得写了。因为这种文章本质上没有创造任何新的价值（注意我说的不是「没有价值」）。这里纯粹是小氯这几天逛了逛 Tauri 的社区（<del>你作业写完了吗？</del>），发现了不少好玩的项目。简单罗列下其中一部分，博君一笑就好。</p>
<p>题外话，小氯对 Tauri 相当有好感。这份好感的最初来源可能是一个神秘的信息安全学习软件，在其前任、一个非常著名的信息安全学习软件删库 / Archive 之后接过了开发的大旗，继续为广大信息安全爱好者们提供服务。而这个软件就是使用 Tauri 开发的。回到 Tauri 本身，在小氯粗浅的理解中，Tauri ≈ Rust 后端 + Web 前端。Rust，<del>高贵的</del>现代化语言，加分；Web 前端，可以用各种前端框架整花活，而且不需要像 Electron 那样嵌入一个巨大的 chromium，加分；兼容广泛，跨平台，甚至可以包括移动端，加分。buff 叠满了属于是。如果让小氯选择一门希望立刻学会的软件开发技术，那 Tauri 必然是第一位（虽然严格来说这不是「一门」技术）。</p>
<h3 id="kunkun">Kunkun</h3>
<p>说实话，在看到这个名字的时候，我的内心是十分警觉的，毕竟这个名字很容易让人联想到一位故人。</p>
<p>然后当我进入他们的<a href="https://kunkun.sh">官方网站</a>时：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241201173904.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="605"  />
    
</figure></p>
<p>你说你不是小黑子我是一点都不相信的。</p>
<p>言归正传。这是个 App Launcher，支持插件，相当于是跨平台、开源的 Alfred / Raycast Alternative 吧。不过现在功能还很有限，看来练习时长还不太够，需要继续自我提升。</p>
<h3 id="neohtop">Neohtop</h3>
<p><code>top</code> 咱都知道，<code>htop</code> 也知道。那么 Neohtop 大概就是 htop 的 GUI 版本。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241201175803.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="596"  />
    
</figure></p>
<p>看着颇有点……那个东西叫什么来着，对了，Catppuccin 的味道。</p>
<p>只可惜键盘导航支持还是不如 Raycast 的 Kill process，要不然就直接用这个代替了。</p>
<h3 id="ecopaste">EcoPaste</h3>
<p>老实说，Tauri 大家族是真不缺剪贴板软件，EcoPaste 是其中之一。但是很遗憾，在 macOS 上的体验并不如 Raycast 的剪贴板插件。而且最重要的一点：<strong>在调出后不会自动成为最前置窗口</strong>，这点是剪贴板的刚需。</p>
<h3 id="lettura">Lettura</h3>
<p>一个 Feed Reader，采用的是小氯非常喜欢的 Shadcn UI。不过下面这张图体现得不是很明显，如果好奇 Shadcn UI 是什么样子，大体可以去看一下 Vercel。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241202084302.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="678"  />
    
</figure></p>
<p>感觉作为 RSS 阅读器而言还是蛮合格的，虽然说不如 Follow 那么丝滑，但是人家资源占用小啊。当然，RSSHub 之类的我没测试，反正我也用得少。</p>
<p>其实说实话，尽管 Follow 在博友圈中的声望相当高，其水平也确实担得起这声望，但是<strong>小氯并不喜欢 Follow 的社交元素</strong>。严格来说，对于这类软件，小氯不喜欢任何形式的社交元素。原因无他，就如我在<a href="/weekly-11/">第十一期周报</a>里面说的：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>小氯只希望安安静静地读点东西，没有任何人能闯进我的书房。</p>
</blockquote>
<p>Tauriverse 还有很多有趣的应用，如果感兴趣，去 <a href="https://github.com/tauri-apps/awesome-tauri">Awesome Tauri</a> 自己翻去吧。</p>
<h2 id="hellodeno">Hello，Deno</h2>
<p>不是很正宗的 Hello 系列新成员。不过这里的 Deno 不是那个新的 JS 运行时，而是指 Deno Deploy。</p>
<p>我第一次听说这个平台是从著名的<a href="https://chinese-font.netlify.app">中文网字计划</a>。中文网字计划就使用 Deno 结合 ImageKit 做字体分发。最近，小氯在研究一个著名项目时，突然想到：既然这个项目能用 Cloudflare Workers 部署，那能用 Deno 吗？</p>
<p>于是在我（<del>准确来说是 AI</del>）的努力下，一个新的衍生项目诞生了：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/chlorine3545/gh-proxy-deno" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>chlorine3545/gh-proxy-deno</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        一个 GitHub Release 和 Archive 等的加速项目，可部署于 Deno 上。
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #2b7489">
            </span>
            <span>TypeScript</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">2</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2024-12-23</span>
        </div>
    </div>
</div>
<p>目前来说用起来还不错，同时收获了人生中最快的一个 star。</p>
<p>Deno 是个蛮好玩的 JS 工具，用 Rust 编写（<del>高贵的 Rust</del>），默认最小权限，URL 化包管理，TS 原生支持。鉴于 Bun 的 bug 实在是太多了（<del>Bugn</del>），感觉也可以用 Deno 学 TS。不过目前为止生态系统还不够丰富，像 Vercel 和 Netlify 这些平台都还不完全支持。</p>
<h2 id="new-vps2">New VPS（2）</h2>
<p><del>马上要进化为勃艮第机农了（喜）</del></p>
<p>闲着没事捞了一台 Vmiss 的 HK VPS，1C 1G 10G，500M / 1T。用了一个优惠码，把价格打到了大概 90 CNY，续费同价，还算可以。直观感觉就是延迟比我的 RackNerd LA 低多了，至少 SSH 的时候基本上秒连，打命令也没延迟。</p>
<p>当然，这么小一台 VPS 也跑不了什么大家伙，但是由于带宽和流量还行，适合做一些对这方面要求比较高的服务。<del>别误会，我说的是 CDN。</del></p>
<h2 id="新的社交媒体平台">新的社交媒体平台？</h2>
<p>最近闲来无事，打开 Ice Cube 想刷刷 Fedi，结果惊奇地发现数据获取不了了。前往 Owu Social 的源站发现也出现了 502，看来是服务器宕机了（在第二天恢复）。</p>
<p>这件事让我有了一点危机感，把数据放在别人手中——即使是 Owu Social 这样让人信任的团队，也是件有点危险的事情，虽然我并不觉得我自己维护的实例会比 Owu Social 的实例更稳定（人家 Owu Social-G 好歹是整个 Fediverse 中第二大的 GoToSocial 实例）。正好，<a href="/weekly-13/">上一期周报</a>也说希望自托管一个实例用来做 Fedi feed，于是我开始物色一个合适的 implement。</p>
<h3 id="gotosocial">GoToSocial</h3>
<p>这个不用我多说了。不过我实际测试下来，其内存占用并没有说的那么小，甚至和我的 SearXNG 差不多大，这和其轻量级实例的名声也不匹配啊（也可能是我的打开方式不对）。而且，GoToSocial 的默认界面实在是令人一言难尽，如果要改的话，需要重写 <code>web</code> 文件夹（我简单看了下，大体和 Hugo 的 HTML 差不多，都是 Go Template 语法），实在是太麻烦了。</p>
<h3 id="mitra">Mitra</h3>
<p><a href="https://codeberg.org/silverpill/mitra">Mitra</a> 也是庞大的 ActivityPub 协议的一份子，只不过是非常小众的一份子。小众到什么程度？如果你在 <a href="https://fedidb.org">FediDB</a> 中搜索「Mitra」，你会发现，在整个联邦宇宙中，Mitra 的用户只有 423 个（截至 2024 年 11 月 26 日），这个数字仅为 Mastodon 的 0.0052%。而且，我在中文和英文的搜索引擎下都找不到<strong>任何一篇</strong>关于如何部署的教程，准确来说，我甚至都找不到任何一篇文章！</p>
<p>对我来说，Mitra 有几个非常吸引人的点：</p>
<ul>
<li>使用 Rust 构建（<del>高贵的 Rust</del>）。</li>
<li>界面超级好看，至少非常符合我的审美。</li>
<li>账户迁移功能，再也不用担心数据和一个实例绑定了。</li>
<li>支持订阅（虽然说要用门罗币付钱，但是也没说订阅一定要付钱对吧？）。</li>
</ul>
<p>不过，Mitra 还有几个比较麻烦的点。没有现成的 docker-compose 文件自然是一个，其需要使用 PostgreSQL（在源码构建过程中，作者是这么说的，不知道在 Docker img 中是否也是如此），甚至还需要一堆别的服务，行，用就用吧，我忍。而且，从 issue 来看，作者应该是个非常坚定的 FOSSist，拒绝把 Mitra 和任何非自由的服务整合在一起，那不管是 Cloudflare R2 还是 AWS S3 都用不了，那媒体文件全存在本地，硬盘恐怕受不了。</p>
<p>作者的原话：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Integrations with non-free services are not allowed, but if fully open-source implementations of S3 object storage exist, then we can support them.</p>
</blockquote>
<p>……所以，S3 现在不应该说只是一个协议（事实标准）吗？能兼容 MinIO，就不能兼容 Cloudflare R2 或者 AWS S3（这里的能指的是事实上的可行性）？难道我们连协议也要「纯正的自由」吗？至少现在，小氯没办法理解这一点。</p>
<h3 id="bluesky">Bluesky</h3>
<p>这个家伙就不是 ActivityPub 联盟的一部分了，而是一个完全单独的平台。</p>
<p>Bluesky 的具体信息可以看一下 Wikipedia，简单来说，就是一个使用自己的 AT&amp;T 协议的社交平台。最近一段时间（其实我也不知道能不能叫最近）因为某些事情，Bluesky 的社区规模急剧增长。</p>
<p>Bluesky 支持很多有趣的特性，例如域名作为用户名，无缝的节点迁移等。不过 Bluesky 有一个很离奇的点：<strong>它的用户数据是去中心化的，但是用户交互是中心化的</strong>。简单来说，就是用户可以自托管数据，但是平时的 client 交互都在 <a href="https://bsky.app">Bsky App</a> 完成。在分享用户的 profile 时，也是在 Bsky 的域名下完成。虽然说社区现在有一些第三方的 Web 或者本机客户端，但似乎都不算太完善。这可不是什么好事。</p>
<p>我不太知道它能不能算 Fedi 的一部分，从定义上来说，Fediverse 是「decentralized group of social media platforms in which each independent platform can interact freely with any other platform that is part of the group」（来源：《大英百科全书》）。那么只要能用同一个协议自由通信的一组非中心化的社交服务器都算是 Fedi。那这么看，电子邮件也算是一种广义的 Fedi，Matrix 当然更是，那么 Bluesky 自然也是。不过现在我们说起 Fedi 的时候，大部分就是指 ActivityPub 了。</p>
<h2 id="邮件客户端的难题">邮件客户端的难题</h2>
<p>邮件客户端是个老生常谈的话题，小氯也一直在努力寻找适合自己要求的客户端。小氯其实要的特性也不太多，就是一个 Unified Box（现在基本上是标配），GPG 和过得去的 UI。不过小氯喜欢开源的东西，这个难度唰一下就上来了。</p>
<p>很遗憾，小氯找了很久很久，得出的答案是：<strong>没有</strong>。</p>
<p>Thunderbird 是最经典的选择，但是性能上和资源占用还是上个时代技术栈的老样子，对 Outlook 的支持非常糟糕（这也可能是牢软的问题），用户界面也让人不忍直视（如果安装一个好看点的主题，然后忽略设置界面的话，还是过得去的）；Betterbird 在这方面和其原型半斤八两，兼容性甚至更差；Claws Mail 的界面和功能更是如此，简直就是极客致敬上世纪计算机技术的情书；Mailspring 拥有可能是最好看的用户界面（尤其是 LIM 主题），但是不支持 GPG 加密（这个事情被诟病了有六七年了），同时还需要账户（<del>此处手动 @ Follow</del>）；Evolution 和 KDEMail 只支持 Linux，而且我并不认为它们能比 Apple Mail 做得更好。剩下基本就没什么开源的邮件客户端了，要么就是停更很久不敢用一点的。</p>
<p>这是桌面端。安卓有 K-9 和 Fairmail，至于 iOS，笑死，别说符合要求的开源客户端了，开源的客户端都没有，字面意义的没有（这里不包括 Delta Chat 和没有发布可用包的研究阶段项目）。</p>
<p>理论上来说，使用现代化的技术栈，例如 Rust + Tauri 开发一个邮件客户端是完全可行的（虽然肯定不简单）——一个很简单的经验事实：凡是能用 Electron 开发的东西，基本都能用 Tauri 开发。很可惜，至少就小氯目前所视的范围内，没有任何人在做这件事，虽然这是个极具吸引力和实用价值的项目。</p>
<p><strong>行，既然没有，那我自己写。</strong></p>
<p>小氯并不是在开玩笑，这个计划从技术上是完全可行的，所需要的只是孜孜不倦的学习和持之以恒的开发。尽管小氯现在连 Rust 的 Hello World 都写不明白，HTML 的标签都记不清楚有几个（爆改 Hugo 时只学会了一点零碎的前端），但是这并不意味着小氯将来就写不出来（<del>小氯酱の谜之自信</del>）。更何况，社区已经有了许多称手的工具，比如 Rust 的 <code>lettre</code> 和 <code>mailparse</code> 库，前端的各种五彩缤纷的框架等等，还有 Shadcn UI（我真的好喜欢这种设计风格！）和 UnoCSS 等老朋友。当然，如前面所说，这会是个漫长的过程，罗马城的第一块砖石还没垒起呢。</p>
<p>目前小氯主要是在闲暇时间学学 Rust。现在感觉 Rust 的语法也没那么别扭了，甚至有点赏心悦目。尤其是 cargo，比 C++ 的编译器智能太多了（<del>GCC 娘 &amp; Clang 娘：勿 cue</del>）。</p>
<h2 id="备案">备案？</h2>
<p>最近小氯接到了阿里云的电话，大概意思就是小氯的备案域名 <code>yoghurtlee.com</code> 没有在认证过的域名注册商名下，需要尽快转回来。看来这方面的政策又收紧了。之前只需要在备案期间转移到认证域名注册商即可，备案完事就可以随便转了（要么就是我弄错了，政策一直都是这样，只是我不知道）。</p>
<p>这也让小氯对新的域名 <code>chloryn.com</code> 要不要备案的问题产生了犹豫。理论上来说，园子现在除了备案号之外没有使用任何备案域名的特权（这里说的是主域名，不包括拿来做图床的），例如 CDN 和百度收录等，似乎也没必要备案。小氯备案的最初目的也就是搞一个官方认证，希望国内的老友们能够长期稳定地访问园子。而小氯现在的文章横竖也挑不出什么敏感言论，似乎也没有任何被制裁的理由。<del>就算被制裁了，大不了也就是切回备案过的域名。</del></p>
<h2 id="稳定与迟钝">稳定与迟钝</h2>
<p>小氯一向自诩为一个情绪稳定的人（姑且说是人吧？），但是在经过了这段时间连续不断的 DDL 与考试的残酷压迫后，我对这个判断产生了怀疑，因为我产生了非常严重的负面情绪（注意我用的是「我产生了负面情绪」而不是「我很如何如何」）。</p>
<p>说得具体点吧。在面对无穷无尽的压力时，我能感受到我的压力很大，不仅是身体上的疲劳，甚至心理上也明确地体现出我「客观」的负面情绪非常严重（把「客观」和「情绪」两个词放在一起真的很奇怪），但是我「感觉」上的，或者说是我的「主观情绪」并没有什么大的变化，就好像这个负面情绪根本不是我自己的，只是我能观察得到的一个客体。这么说听起来很费解，打个比方吧：就像是高中生物学，神经系统那部分讲的传入神经受损，你的伤口在流血，你也知道你确实受伤了，但是你感觉不到痛。</p>
<p>这种情况我不知道应该叫它什么，或许「迟钝」就已经是最准确的词汇了。心理学有一个叫「解离」（dissociation）的词，用 <a href="https://zh.wikipedia.org/zh-cn/%E8%A7%A3%E9%9B%A2_(%E5%BF%83%E7%90%86%E5%AD%B8)">Wikipedia</a> 的话来说，大概意思是在记忆、自我意识或认知的功能上的崩解。如果按照这个词汇的标准卡的话，小氯可能有点失现实感和失自我感，但是似乎也没到那个程度，毕竟小氯现在还能正常地完成各种社会活动。</p>
<p>这样好吗？难说。这样当然可以在巨大的压力下依然保持至少是基本的 functionality，但如果天长日久都是这样，恐怕会有大问题——这个判断没有任何依据，只是我用上面的比方进行的推断，如果伤口一直流血，人即使不痛，也会失血过多死亡的。</p>
<p>当然，人不可能一直失血，除非伤口已经严重到一定程度，因为人有凝血机制。那么精神的凝血是什么呢？</p>
<h2 id="一点中心思想不明确的碎碎念">一点中心思想不明确的碎碎念</h2>
<p>小氯最近在听一首歌，名叫《Chinggis Khaan》（<del>元神，启动！</del>）。正好小氯最近在看西里尔字母（注：西里尔是蒙文的拼法之一），于是就试着<del>拿着字典和 AI</del>翻译了一下其中的一段。不过说实话，这个版本的歌词很奇怪，比如 арал（aral）是「岛屿」的意思，但是草原上显然不会有岛屿，因此只好理解为是一个不太恰当的比喻义。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Хөх тэнгэрээс заясан</p>
<p>沐浴长生天之祝愿</p>
<p>Хөдөө аралд мэндэлсэн</p>
<p>生于这旷野的草原</p>
<p>Хөх монголоо нэгтээ</p>
<p>令苍色蒙古席卷四方</p>
<p>Хөвчин дэлхийд дуурисгаад</p>
<p>他的威名响彻这世间</p>
<p>Эрэлхэг монгол Чингэс</p>
<p>蒙古的勇士，成吉思汗</p>
<p>Эзэнбогд Чингэсээ</p>
<p>崇高的汗王，成吉思汗</p>
</blockquote>
<p>小氯很久之前，看过一本叫《狼图腾》的小说。当时家里足够长的书不多——当然字典除外，这个算一本。小氯并不喜欢其中的一些部分，但是这本书确实让年幼的小氯了解了一点蒙古文化，至少我能很自然地拼出「腾格里」（意为「长生天」）这个词。</p>
<p>成吉思汗无疑是历史上非常值得讨论的领导人之一。他是出色的军事家和强大的征服者，但是其率领的蒙古军队在征服中的行径也颇具争议。而关于元朝（蒙古帝国）在中国历史上的地位和对于世界历史走向的影响，也是一个非常值得探讨乃至是潜心研究的领域。</p>
<p>但是，小氯在写之前，犹豫了。民族问题和政治、宗教、阶级、性别等一样，都是最敏感和有争议的话题之一，即使是几百年前的事情。小氯在博客内容方面一向是「明哲保身」的策略，小心翼翼地避免涉及一切可能引起争议的话题。用小氯一位老友的话来说，小氯似乎总是在「轻声细语地讲哲学」，把所有的话题弱化再弱化，直到其看起来甚至不如家长里短的闲聊严肃。</p>
<p>但是这一次，小氯不想再这么「谨言慎行」了。不是说我要谈成吉思汗的问题，而是说我要谈这个问题背后的问题。</p>
<p>虽然小氯的情绪一向稳定（或者用上面的结论，迟钝？），无论在线上线下几乎总是保持（至少是尽力保持）一个温和、安静、乐于讨论问题的形象，但这不意味着小氯的所有思想都是温和和安静的。事实上，小氯的许多观点都极其的辛辣和尖锐，尤其是在评价一些问题时，从不避讳给出一针见血到近乎令人不适的评价。只是我不希望发表过于尖锐的观点，破坏园子其乐融融的气氛，也不希望因为不适当地讨论一些问题惹祸上身，因此也尽可能地避免这些敏感且有争议的问题。只是，矫枉过正，现在几乎连任何稍微有争议的问题都不讲了，这里的「争议」是狭义的。</p>
<p><strong>但是，如果我们只说没有争议的话题，博客又剩下什么呢？或者更夸张点，互联网又剩下什么呢？甚至，思想又剩下什么呢？</strong></p>
<p>巴普洛夫有一句名言：争论是思想的最好触媒。纵观古今，无论是在古代雅典宏伟的神庙与热闹的街道，还是在稷下学宫七十六上大夫千余雅士济济一堂的高台，无论是点主义与 d 主义激烈交锋的分析学萌芽时期，还是在凯恩斯与哈耶克唇枪舌剑的近代经济学辩场，无论是在十月的炮响后尚且覆盖着残雪的罗斯大地，还是在风云变幻的世界中改革开放春天的前夜，真理总是在思想的碰撞和交锋中杀出重围。争议本身是无错的，真理是越辩越明的，那么我们有什么理由去回避那些合理的争议，把自己关在不知冬夏春秋的小楼里自成一统？</p>
<p>有争议不应该完全等同于敏感，在任何时候都是这样。无论是各种意识形态区别的学术性介绍，还是对周围一些问题的合理针砭，抑或是被认真塑造的替代历史路线，只要保持对现实、历史和政治足够的理性和尊重，不是妄议时政、煽动仇恨、破坏和谐、制造分裂一类的过激言论，都不是也不应该被视为不恰当的话题。</p>
<p>小氯想说的话就这么多。这不意味着小氯要向什么热点话题重拳出击，也不意味着小氯要在自己没有能力也不应该讨论的领域大放厥词。只是说，我们在紫荆公寓的公共空间中闲坐品茶时，可以聊的话题又多了一些。我们温和、友好、理性的基调不会改变，只是在思想的旷野与山峦中，我们手中不仅要有盛放的花，还要有明亮的剑。</p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（13）：生活的起伏</title><link>https://chlor.me/weekly-13/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-13/</guid><category>博客</category><category>周报</category><category>VPS</category><category>域名</category><category>日常</category><description>本文是作者周报的第十三期。文章开篇，作者承认自己情绪存在波动，具体可以从不同的部分看出变化。作者提到为个人博客购买了新域名 `chloryn.com`，并详细阐述了选择这个域名的理由和过程。接着，作者讨论了“自设”的概念，并诙谐地表达自己无力创作视觉自设的无奈。在生活方面，作者描述了申请中行Mastercard信用卡的经历，还分享了一封遭遇勒索邮件的经历，并指出这类邮件只是毫无根据的恐吓，不应理会。技术方面，作者首次尝试刷机，将一台旧的小米 CC 9 手机刷成 LineageOS。此外，作者提到购买了新的 VPS，用于网站服务的部署。最后，作者以自己在宿舍中重拾睡前喝热牛奶的习惯为结尾，以平和的口吻描述了这种简单日常为其带来的宁静与满足感。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-13-cover.webp" alt="Ephemeralis-Weekly（13）：生活的起伏" />
        </figure>
        <p>各位老友们好，我是 Chlorine。很抱歉因为个人的情绪波动和生活状态问题落下了一期周报。</p>
<p>这半个月小氯遇到了许多事情（<del>但是长度还是比较短</del>），经历了从颓废到宁静和充实再到极度焦虑再到略为缓解的多次起伏。个中原因小氯不希望多说，但是各位老友应该能从我文字风格的变化窥见一二。《热牛奶》那一章是我精神最安宁的时候写下的，而最近更新的 now 页面则是我最焦虑的时候写的。本期的标题也体现了这一状态（以及本期应该是第一期副标题不是四个字的周报？虽说对强迫症的老友不太友好吧，但是也跳出了一层文字的限制）。</p>
<p>以及，本周没有什么哲学，请放心观看 (/ω＼)</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第十三期，日期范围为公历 2024 年 11 月 11 日至 11 月 24 日。祝食用愉快。</p>
<h2 id="新域名应该是几来着">新域名……应该是几来着？</h2>
<p><del>现在买个域名已经不值得让小氯单独写篇文章了</del></p>
<p>这次是对<a href="/weekly-12/">上一期周报的纠结</a>的解答，苦思冥想了很久才想到一个比较好的、和 Chlorine 相关的域名：<code>chloryn.com</code>。</p>
<p>这个词读音很像 Chlorine，但是看起来并不是个很常见的英语词汇，如果非要说的话，带一点斯拉夫风格。所以还是让小氯解释下这个前缀是怎么来的吧。</p>
<p>其实小氯本来想用一个 Clori（小氯的西语名字，Cloro 的变体，Clorito 和 Clorita 的合并简写）的变体，但是实际上，小氯极少使用这个名字，平时所用的英语名字要么是 Chlorine，要么是拼音版本的名字（将来正式的英文名）。而且 Clori 看起来也并不容易让人想到 Chlorine。而加单词的变体，例如 <code>hichlorine</code> 或者 <code>chlorineworld</code> 之类的，又实在是太长了。</p>
<p>那么我们的选择就比较明显了，就是对 Chlorine 进行一些不改变（太多）读音和基本字形的变体。一些常见的选择包括：</p>
<ul>
<li>chlorin：读音几乎不变，但是你猜我为什么不用……</li>
<li>chlorino / chlorina：一个男性化 / 女性化的名字，很有西语的风范。</li>
<li>chloris：古希腊神话里的花神（<del>纳西妲？</del>），和 Chlorine 的词根一致，具有强烈的女性化色彩。</li>
</ul>
<p>很遗憾，这样的前缀用核外电子都能想到很抢手，那么很显然，常见的选择已经无法满足小氯的需求了（<del>你今天废话怎么这么多？</del>）。</p>
<p>于是，小氯发挥了传统艺能——问 AI。在 AI 给的一大堆选择中，小氯注意到了一个词：chloriny。</p>
<p>众所周知，i 和 y 的读音在很多时候都是相似的，那么如果用 y 替换掉中间的 i 呢？然后去掉不发音的 e，就有了一个更简单的域名前缀——chloryn。</p>
<p><code>-ryn</code> 这个后缀并不是个常见的选择，因此不需要担心会不会出现品牌冲突和占用，而且也比较短和容易发音。最重要的是：它可用。所以，剁手吧。</p>
<p>依然是在 Spaceship 买的，不过由于用了一个 promo code <code>COMPROS</code>，直接把价格打到了不到 3 USD，确实太夸张了。继续挂到大善人 Cloudflare 上。</p>
<p>小氯还是挺喜欢这个域名的，后续可能也会考虑备案（涉及到转到一次套路云，外国公司应该没有域名所有权证书可以用）。应该在不太远的未来，园子就会换域名了。</p>
<p><del>冷知识：小氯这周还买了个 <code>herex.icu</code></del></p>
<p>顺便再吐槽一句，现在域名续费是越来越贵了，套路云的 <code>.com</code> 域名都要 90 了……该把那些不用的域名放掉了 qaq</p>
<h2 id="画个自设">画个自设？</h2>
<p>我们事先声明下，下文的「自设」都是指「自我设定」。因为据我的查找，广义上任何原创的设定都可以叫自设。</p>
<p>对于二次元文化圈来说，自设应该是一个近于必需品级别的存在（这是我根据周围的小样本概括得出的概念，不一定泛用）。虽说小氯并不是二次元文化爱好者（认为二次元风格的图片具有视觉吸引力的人群应该是远广于我们所说的「二次元」的），但自设也是个很好玩的事情，和我平时设计小说角色和世界架构一样好玩。</p>
<p>很可惜，自设一般是视觉形象，而如各位老友所见，小氯在任何形式的绘画方面都毫无天赋，不论是纸绘，板绘甚至是和传统绘画都没什么关系的 AI 绘画。</p>
<p>而且，小氯也不希望过多地局限各位老友对小氯虚拟形象的印象。引用我在<a href="/weekly-10/">回答 Dayu 的博客问卷时</a>的话：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>你可以把小氯当成现实中的清华大学学生，也可以当成一只很萌的元素娘，也可以当成一个被捏成这样的人工智能，或者干脆就当成一个会讲故事的原子也行——随意。</p>
</blockquote>
<p>「——那你侧边栏放的那个是什么？」</p>
<p>好问题。虽然小氯侧边栏的头像（也是当前小氯在许多平台使用的头像）确实很容易被认为是小氯的自设，尤其是其还和现实中的小氯有很多细节上的相似（例如 MacBook，果茶，抓着杯子时一般有一只手只用三根手指卡住），但是这确实不是。这张图的来历大致是小氯突发奇想捏了一些 prompt 然后丢给了豆包 AI，然后就炼出来了这个。最多只能说是一个很初步的视觉草稿吧（注：小氯最近换头像了，这段话的原型图片是<a href="https://img.viento.cc/chlorine-juice-safer.avif">这张</a>。</p>
<p>甚至现在连文字版的自设都没写好——没错，小氯对于自己的事情也总是那么倦怠<del>这和你活泼非金属的身份不符啊</del>。这也造成拜托一位画师来代绘的难度极高（<del>而且小氯写的那些幼稚的东西给画师看真的不会社死嘛</del>）。</p>
<h2 id="mastercard-信用卡">Mastercard 信用卡</h2>
<p>小氯很早就想办一张境外的银行卡了，毕竟现在很多操作都需要付 USD，有一些羊毛（比如 Amazon Cloud 的免费服务器）也需要绑卡才能薅到。更不用提小氯将来还有出境旅行的计划。</p>
<p>小氯关注了不少可能能薅到的虚拟银行卡，很可惜，它们都有一定的开卡费（虽然说也不多），而且毕竟也不算是什么正规渠道，容易出问题。于是小氯就盯上了国内银行的外币卡或者双（多）币卡。</p>
<p>小氯也收集了很多这方面的信息，最终锁定了两张卡，一张是工行的星座卡（0 额度信用卡），一张是中行的 Mastercard 卡（借记卡）。小氯不在乎是 Visa 还是 Mastercard，不过由于小氯已经有一张中行的卡了（牢清发的），所以就想着搞一张工行的卡。</p>
<p>很不幸，小氯线上申请了两次，都被拒绝了，原因未知。<del>或许是宇宙第一大行不喜欢小氯吧。</del></p>
<p>于是小氯开始打听中行 Mastercard 的办理方法，得知只需要找最近的、能办理跨境金融的网点，有卡板就可以办理。</p>
<p>那最近的、能办理跨境金融的网点在哪里呢？</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241122192311.avif" alt="写这段的时候小氯在外面，这个网点就在 C 楼" title="写这段的时候小氯在外面，这个网点就在 C 楼" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        写这段的时候小氯在外面，这个网点就在 C 楼
    </figcaption>
    
</figure></p>
<p>没想到吧（笑）。</p>
<p>由于电话没打通，于是小氯趁着上大物之前的空隙直接去了网点。</p>
<p>然后……小氯得知，网点办不了借记卡，但是可以办 Mastercard 的信用卡（当然是 0 额度）。</p>
<p>也好。花起来和借记卡一样，顺便也能积累下信用。唯一的遗憾大概就是卡面很普通，不如 Mastercard 借记卡的卡面那么好看（没错，我指的是那个非人哉的联名卡 (/ω＼)）。</p>
<p>办的过程几乎没什么可讲的，全程没遇到任何麻烦。唯一值得讲的就是小氯在填家庭住址时，大堂经理满脸惊奇地说，听不出你有任何口音（小氯家乡的方言确实以口音明显知名）。然后就等着卡邮过来再去激活就好了。</p>
<p>当然，既然是信用卡，就会涉及年费的问题。这张卡的年费是 200r，但是首年免年费，每年消费五次可以免次年的年费，那基本就相当于没有了。每年我往校园卡里面充几次饭钱，每次一 CNY 就好了（牢清的校园卡真的可以一次充一元钱）。</p>
<p>这张卡是 Mastercard 和银联的双重卡，在大陆和海外都可以使用。CNY 和 USD 账户是分开的，消费需要通过购买外汇进行充值。还好牢清发的中行卡是一类卡，购买外汇是没问题的。只是小氯有点好奇，这样的卡能用来绑定 Amazon 和 Oracle 这样的服务吗？</p>
<p>以及最近开始对各种各样的银行卡感兴趣了。也不仅仅是觉得一些卡面比较精致吧，感觉随着了解到的事情越来越多，某些生活方式却变得越来越旧式了。</p>
<h2 id="一封勒索邮件">一封勒索邮件</h2>
<p>下面的事件可能会让人感到不适，但是确实是真实地发生在小氯身上的。</p>
<p>事情的起因是，小氯闲着没事翻自己的 Tutamail 的时候，突然看到了垃圾邮件里面有一封奇怪的邮件。好奇心驱使着我点开看了下，结果是开幕雷击：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Good day.</p>
<p>Your system has been hacked with a Trojan virus.</p>
</blockquote>
<p>带着满脸的问号，小氯大致看完了整封邮件。由于相关法律法规限制，小氯不能完整地展示邮件内容。简单来说，发邮件的人声称已经完全控制了我的个人电脑，并且拿到了一些关于我的不适宜公开说明的内容，然后要求我使用加密货币向他转一笔钱，否则就把这些内容公之于众。</p>
<p>说实话小氯看完之后的表情大概是：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>这显然是一封毫无意义的勒索邮件，因为他拿不出任何证据支持他的说法，最重要的是小氯从来没做过他说的事情。由于小氯注册 Tutamail 的时机比较合适，因此拿到了一个不错的前缀，很可能是我的邮箱被猜到了。</p>
<p>遇到这种事情，正确的处理方法是什么都不做。无论是任何的动作都会证实这是一个活跃的电子邮件地址，从而招致更多的麻烦。而且，对于这群只会躲在 VPN、匿名通信和区块链后面的懦夫来说，你也没办法对他们怎么样。</p>
<p>这件事情没有给小氯带来任何的现实损失，除了浪费了我五分钟时间看他们胡编乱造的邮件。不过从情感上，这很令人不愉快，有点像苍蝇落在你身上的感觉。</p>
<p>这可能也证实了小氯从前说的一个观点，最小化但必要的监管对于去中心化的互联网必不可少。至少对于这群勒索者，他们需要一点监管的铁拳。</p>
<h2 id="hellolineageos">Hello，LineageOS</h2>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>来来来！全体目光向我看齐！看我看我！我宣布个事！我会刷机了！</p>
</blockquote>
<p>没错，就在今天，小氯完成了人生中第一次刷机 ヾ(≧∇≦*)ゝ</p>
<p>TL; DR：把一台很旧的小米 CC 9 刷了 LineageOS，体验良好，但是没有测试国产软件。</p>
<h3 id="前言">前言</h3>
<p>如各位老友所见，小氯一向对国产的 modified-Android 颇有微词，甚至还曾经在周报里非常失态地激烈指责过 ColorOS（请见<a href="/weekly-12/">上一期周报</a>）。情绪本身是会自我发酵的，尤其是负面情绪。所以在对 ColorOS 的不满积累到一定程度后，小氯决定向 OPPO 国开战（慈禧音），方法就是刷一个原生安卓，证明我没有你也能活得很好（<del>真是个幼稚鬼</del>）。</p>
<p>当然，指望用 OPPO 刷机，还不如指望慈父同志养猫（<del>你别说还真可以用 mod 给他送一只</del>）。比较好的是，小氯的家里有一些废旧手机，只需要让我亲爱的娘亲邮寄一台即可。</p>
<p>手机很快到了。是一台 Mi CC 9，6+128 的旧配置，MIUI 12。很幸运，德高望重的 LineageOS 对于这个型号有很好的支持。</p>
<h3 id="换-sim-卡">换 SIM 卡</h3>
<p>开开心心地打开开发者选项，然后 enable USB debug……怎么启动不了？哦，需要 SIM 卡。</p>
<p>小氯当然有 SIM 卡，只需要换一张进去就可以。然而……小氯不会换 SIM 卡（捂脸）。</p>
<p>所幸这件事倒也不难，找个视频学学就好。小氯没找到卡针，于是用了绣花针（<del>不要问小氯为什么会有绣花针</del>）和顶针。好笑的是，小氯的第一张卡是放不进这台旧手机里的，但是第二张卡可以，确实有点奇怪。</p>
<h3 id="解锁-bl">解锁 BL</h3>
<p>刷机的第一步当然是解锁 Bootloader。MIUI 的 BL 解锁相当容易，而且由于这台手机太老了，也不涉及等待的问题，因此在手机绑定账号之后使用小米助手即可。</p>
<p>小米官方的刷机助手不能在 macOS 使用，所幸社区制作了一个替代品。下载之后选择允许运行，然后一点就可以了。</p>
<p>注意 BL 解锁后手机会直接重置，因此需要重新打开开发者选项、USB 调试这些。</p>
<h3 id="刷入-recovery-和-rom">刷入 Recovery 和 ROM</h3>
<p>按照官方的指导，我们可以先刷入 Recovery，然后通过 Recovery 刷入 ROM。这个步骤教程里面讲得很清楚，可惜小氯踩了一些坑：</p>
<ul>
<li>刷入了损坏的 Recovery，原因是中国科大的镜像把我的浏览器拦截掉了。解决方法是 <code>wget</code>，又稳又快。</li>
<li>刷入 Recovery 之后直接重启手机导致白刷了。正确方法是看到 LineageOS 的 Rec 界面后把手机放在一边等待后续操作。</li>
</ul>
<p>具体操作可以去看 LineageOS 的操作指南，讲得已经很清楚了，小氯没必要在此赘述。</p>
<h3 id="完结撒花">完结撒花</h3>
<p>然后启动手机，就可以享受丝滑的 LineageOS 体验了。不得不说，LineageOS 是真的好用，不仅资源占用低（至少不卡了），而且也足够自由。</p>
<p>感觉刷机也不算太难，感觉已经可以考虑入一台 OnePlus 11 刷下当作备用机乃至主力机了。只是不知道对一些国产软件的压制如何。之前听过用「炼妖壶」来制造隔离环境，但是这样还能做到照片分享之类的吗？</p>
<h2 id="new-vps">New VPS</h2>
<p><a href="/weekly-12/">之前曾经说</a>我买了人生中第一台 VPS，是 Cloudcone 的，然后光速把它销了。然而小氯这周又买了一台 VPS（</p>
<p>这次同样是小有名气的品牌，RackNerd。BF 特惠机型，配置大概是：</p>
<ul>
<li>2 vCPU Cores</li>
<li>40 GB PURE SSD RAID-10 Storage</li>
<li>2.5 GB RAM</li>
<li>3000GB Monthly Premium Bandwidth</li>
<li>1Gbps Public Network Port</li>
</ul>
<p>这次的配置终于够用了，别说是 Docker，1Panel 都绰绰有余了。价格大概是 19 USD / a，还算实惠。</p>
<p>本来因为最近网络环境的一些波动，小氯打算拿来做一些网络安全方面的学习和研究，但是想想还是算了吧，太浪费了。目前大概是准备把 HereX（园子的服务系统）的一些东西部署到上面。</p>
<p>目前为止大概有四台服务器了，可以部署一个监控面板。只不过，部署在我的主虚拟机的面板没办法连通到其他机器，不知道是否和它是纯 IPv6 的有关。牢清给设备提供大量的 IPv4 地址，可惜我不会搭服务器。</p>
<h2 id="新的订阅服务">新的订阅服务？</h2>
<p>订阅服务是园子翻新计划的重要部分，小氯打算构建一个最小化且足够好的订阅系统，使得希望订阅的老友们能选择自己最喜欢的途径。<del>尽管愿意听小氯碎碎念的老友应该也不多。</del></p>
<p>订阅服务大体上也就分三种：</p>
<ul>
<li>RSS / JSON Feed</li>
<li>Email Newsletter</li>
<li>Instant Notification</li>
</ul>
<p>园子现在的 RSS 已经比较完善了，JSON Feed 的建立应该也不难，因此我们就不说了。</p>
<h3 id="newsletter">Newsletter</h3>
<p>Newsletter，脱胎于过去的杂志或者报纸的订阅（邮箱——电子邮箱，不是吗？），这本身就给人一种很旧式的感觉。就像是在圣诞节后的长假中，落着大雪的冬日上午，壁炉中烧着柴火，噼啪作响。站起身来，裹上自己的外套去大门口的邮箱里取新一期的杂志或者报纸。想着回来后可以喝到热巧克力，便先冲好一杯放在壁炉旁。冬日的阳光透过薄薄的云层，洒在积雪上，泛着柔和的光芒。眼镜上凝结出细密的水珠，新买的雪地靴踩在花园小径尚未完全清扫干净的积雪上，发出咯吱咯吱的响声。将尚带着油墨香的印刷品放进自己的怀里，裹紧了自己的外衣。空气冷冽而清新，温暖的哈气悄无声息地消散开来。</p>
<p>……抱歉，遐想得有点多。Newsletter 本来是一种定期发送的邮件订阅，但是由于现在的许多作者偏好于每次更新都通知一下，而且，除非是只更新周报，否则在每周统一更新一次的技术难度恐怕比较高。</p>
<p>小氯原本的订阅使用的是 Quail，现在打算使用一个邮件订阅的 API，进行自动化的发送。目前看来最可靠的应该是 AWS，但是小氯没有使用 EC2，因此需要支付费用。虽然也没几个钱，但小氯还是希望找一个更合算的 alternative。</p>
<h3 id="instant-noti">Instant Noti</h3>
<p>由于可达性和自由性等问题，小氯不会考虑 Twitter 和 Telegram Channel。此外为了订阅者的隐私考虑，也不考虑群聊或者房间性通知，如 QQ 群和 Matrix Room 等。</p>
<h4 id="wechat-official-accounts-platform">WeChat Official Accounts Platform</h4>
<p>尽管小氯并不喜欢某绿色聊天软件，但是不得不承认，对于大部分用户，WOAP 都是一个非常方便的选择。WOAP 也没有规定文章不能发摘要。但是很不幸，WOAP 并没有方便的 API 可以进行调用。</p>
<h4 id="fedibot-feed">Fedibot Feed</h4>
<p>这个词不太常见，简单来说就是注册一个 Fediverse——准确来说，这里说的是 ActivityPub 的机器人账户，然后通过这个账户发送更新通知。</p>
<p>这是个相当有趣的方式，由于 Mastodon 等 ActivityPub 的实现一般都提供 API，也可以实现高程度自动化。问题是去哪里注册机器人账户。Fedi 确实有一些 bot-friendly 的实例，比如 <a href="https://botsin.space">https://botsin.space</a> 和 <a href="https://mastodon.bot">https://mastodon.bot</a>，然而访问不算通畅（我的自动化节点在国内）。而在一般的实例部署 bot，总归有点滥用的嫌疑。</p>
<p>那看来自己部署一个应该是最好的选择了，小氯新买的 VPS 就打算拿来做这个。Mastodon 太重，Misskey 太二次元，感觉 Sharkey、Akkoma 和 GoToSocial 不错。小氯最喜欢的还是 GoToSocial，奈何这货的默认界面实在是太难看了，如果要改的话，需要折腾整个 <code>web</code> 文件夹的布局和样式文件，工作量实在是挺可怕的。</p>
<h2 id="热牛奶">热牛奶</h2>
<p>小氯曾经有一个持续很多年的习惯：睡前喝一杯热牛奶。这个习惯是我的原生家庭培养的诸多习惯之一（其他的习惯包括早睡早起、早餐吃一个鸡蛋、长期坚持学英语、饭后散步等）。只是因为上大学后生活作息在一定程度上被打乱，所以这个习惯就丢下了。</p>
<p>如前文所说，小氯这段时间身体不太舒服，于是为了感觉好一点以及睡个好觉，小氯又想到了这个办法，于是在某外卖软件上下单了一小箱牛奶。</p>
<p>如各位老友所见，宿舍不允许使用炊具，这当然也包括电热棒。所幸，在零层大厅中有一台爱心微波炉。一般来说热牛奶适合在睡前半小时到一小时喝，那么对小氯来说就是晚上十点到十点半之间。今天的这时候，我正好写 Bomblab 的报告有些疲倦了，顺道可以下去活动一下。</p>
<p>衣服也不需要换了，身上的睡衣就好，毕竟楼内并不冷。小心翼翼地拿着盛满牛奶的杯子走进电梯——小氯只有一个杯子，或许应该再买一个用来喝牛奶的杯子的，毕竟每次要把水杯刷干净真的很麻烦——常喝牛奶的老友应该知道，如果盛放完牛奶的水杯不刷干净，过一段时间会发出非常难闻的味道。</p>
<p>胡思乱想着，电梯到大厅了。微波炉平时用的人不多，晚上更是如此。火力不太知道调什么，先调一个中火两分钟试一下。等待的时间偶然抬头，看到微波炉上面有一张海报——原来，这个「爱心」不仅是这台微波炉可以无偿地被全楼的同学使用，也是因为唐仲英爱心社（带清的一个公益社团）通过微波炉发起的希望工程募捐行动——一次 0.2r。很遗憾，小氯今天没带手机，等到明天补上好了。</p>
<p>奶热好了。很遗憾，这个火力和时长只能把奶变温，远远不能变热。那就调到高火，再加热一分钟试试。旁边的保安师傅看了我一眼，但是没有任何反应。小氯和楼里的三位保安师傅都蛮熟的，尤其是下午值班的那位。</p>
<p>微波炉又停了。这次的温度很好，足够热但是并不烫到难以入口。看来以后大概用高火加热一分到一分半就好。还是不要等到回寝室了，这样可能会凉。不知道偶尔路过的同学看到小氯一边走一边时不时低下头喝一口牛奶会不会觉得好玩。</p>
<p>回到宿舍，牛奶还剩一大半，正好一边喝，一边把这些字敲出来。剩下的报告等到明天上午再写吧，DDL 还有一周呢。</p>
<p>键盘噼里啪啦地响着。MacBook 的键盘手感一直很合我的胃口，不过如果键程再长一点就好了，这样应该不会有那么强的撞击感了。</p>
<p>奶喝完了，这些字也要敲完了。时间大概是晚上十一点，下面去洗一洗水杯，刷牙睡觉吧。</p>
<p>感觉心情非常平静，大概是牛奶的功劳吧——我记得高中学过，牛奶富含色氨酸，色氨酸可以转化为 5-羟色胺（也称血清素），这种神经递质可以使人感到镇定，从而有利于睡眠。小米安神也是同一个道理。不过，应该也不会这么快才对？</p>
<p>又或许是今天的经历使然吧。今天做了什么呢？打扫卫生，和组里的老师谈了下例会的事情，然后就是在写 Bomblab。这个作业拖了好久好久了，下周就是 DDL 了。周五那天胡乱拆了两个，本以为这周末拆两个就好，结果一晚上把剩下的四个都拆完了，顺便写了一部分的报告。</p>
<p>无论如何吧，这种平静的感觉，蛮好的。</p>
<p>晚安，各位老友。</p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（12）：浮沫之下</title><link>https://chlor.me/weekly-12/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-12/</guid><category>周报</category><category>Newsletter</category><category>日常</category><category>域名</category><category>随机性</category><description>本文是作者周报的第十二期，涵盖了从日常生活到技术探索到哲学思考的多方面内容。文章开始分享了《功利主义》的读书报告以及期中考试周的繁忙，展现了在学业压力下的时间管理和学习策略。接着，文章转向了对个人技术栈的更新和调整，讨论了更换 Newsletter 服务的需求，同时还分享了更换静态资源 CDN 的尝试以及字体分发策略的调整，此外还涉及邮件管理以及希望更换更贴合个人形象的域名。在消费行为上，分享了因冲动购买 VPS 而后悔的经历，引发了对理性消费和冷静期的讨论。此外，文章记述了校园内咖啡店即将停业的消息，表达了自己的感伤。此外，作者表达了对 ColorOS 的强烈批评和更换更加纯净的安卓系统的愿望。最后，作者从用 Python 占卜开始，深入讨论了从伪随机数到量子现象的随机性，引申出对世界决定论和随机性的哲思。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-12-cover.webp" alt="Ephemeralis-Weekly（12）：浮沫之下" />
        </figure>
        <p>各位老友们好，我是 Chlorine。新的一期周报，双手奉上。</p>
<p>本期的标题主要来自于对文中几个主题的引申，依然很抽象。同时本期内容时间跨度比较长（原因请见文中），内容冗长且杂乱（本来这期周报会更长的，但是被小氯砍掉了两个还没想好的话题），希望各位老友不要嫌弃 qaq</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第十二期，日期范围为西历 2024 年 10 月 28 日至 11 月 10 日。祝食用愉快。</p>
<h2 id="读功利主义1">读《功利主义》<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></h2>
<p>实际上这并不是小氯突然正经起来，要抽出时间读点哲学著作了，就算是，正在被一堆 DDL 和期中考试殴打的小氯也不会选择在这个时候深化人文素养。纯粹是因为 CTMR（批判性思维与道德推理）课程要求写《功利主义》的读书报告，而且周五就要收了而已。</p>
<p>…………（不敢哭出声）</p>
<p>总体来说这本书不厚，只能算是本小册子。同时除开奇怪的翻译腔之外，讲得也不算特别晦涩，包括最大幸福原理、正义和功利的关系等都讲得很清楚，对于希望入门式地了解功利主义的老友来说是个很好的选择。</p>
<h2 id="期中周">期中周</h2>
<p>众所周知，小氯虽然是只鸽子，但是在周报方面还是尽可能保证每周写几段不长的内容。但是上周小氯一反常态地鸽掉了周报，不是因为小氯太懒（<del>虽然也确实不勤快</del>），而是因为，牢清每学期一次的大清洗——期中寄即将开始。</p>
<p>对于小氯来说，期中寄基本上是期中周，DSA 的 PA2、LAB2，会原的大作业（中作业？），大物和中微的期中考试都在这周。计系概的 Bomblab 虽然也很可怕，不过 DDL 比较远，可以暂且放一放。</p>
<p>大概从周四（有可能是 10 月末，11 月初的样子吧，小氯已经记不清具体几号了）开始，小氯意识到再不开始写和复习，估计真要寄了，于是当天加周五摸鱼的时间拼死拼活地赶了一道 PA。这里需要解释一下，DSA 的一道 PA 包含若干道题，分为几个题组（大概是两三个），每个题组选做一道即可。每一道题都是非常霉耗的编程挑战，对于 OI 大佬们不值一提，但是对小氯来说简直就是噩梦。</p>
<p>然后周末继续干活。为了避免 PTSD（<del>实际上已经了</del>），小氯先做了会原的大作业。大作业是根据一份交易明细填充账目，然后做 Annual Adj，最后总结出 Consolidated Statement of Earnings 和 Consolidated Balance Sheets 之类乱七八糟的东西，实际就是一点应用。不得不说，这个东西比看起来简单且有意思多了，小氯小半天就解决了（这甚至是一份小组作业，但是单人写非常轻松）。</p>
<p>本来想着周末能搞完两样就 OK 了，但是想想下周霉耗的考试，小氯还是强撑着开始搞剩下的 PA。过程之曲折不多说了，总而言之就是小氯奇迹般地实现了在周末对题目进行的大扫荡，把 PA2 基本送上西天。其中有一题解题过程非常有趣：小氯写了一两个小时感觉没什么头绪，就去答疑坊摇人去了，结果和大佬交谈了两句，自己突然福至心灵，调整了一下两行代码的顺序，然后……就过了。在剩下的周日，小氯甚至还抽空写了半道 LAB2。</p>
<p>一周末搞掉这么多东西，确实可以说是战果累累。然而一刻也没有为 PA2 的完成而庆贺，马上赶到战场的是终危。接下来的几天小氯都在终危中挣扎，所幸考试不算特别难；然后是大物，同样很幸运地不算难。在大物考完的晚上，也就是今天晚上，本学期第一次高技术战争的线下课上，小氯整理了 LAB2 的报告，当 Report 上传完成的那瞬间，小氯的期中周就算是结束了。</p>
<p>总体而言……怎么说呢？要是说学习效率的高低，这周确实很高，毕竟我之前一周都做不了一道 DSA。但是无可否认的是：小氯酱真的很累了，<del>简直要坏掉了</del>。于是第二天早上大胆地关了闹钟，睡了个自然醒。</p>
<h2 id="newsletter">Newsletter？</h2>
<p>在之前的文章 <a href="/hello-quail/">Hello，Quail</a> 中，小氯宣布使用 Quail 作为园子的 Newsletter 选择。</p>
<p>不夸张地说，在小氯见过的同类产品中，Quail 是最好的一个，甚至可以说没有之一：对大陆地区友好（这点就可以打败更加老牌且强劲的 Substack 了），出色的编辑器，Obsidian 支持，等等。同时 Quail 的创始人<a href="https://blog.lyric.im/">歌词经理</a> 也是位很 Nice 的开发者，对于 Issue 的讨论非常友好和开放（可以看<a href="https://github.com/quail-ink/obsidian-quail/issues/12">这里</a>）。</p>
<p>不过……问题是，小氯主要把 Quail 当作 Newsletter 使用，因此除了 Newsletter，小氯不在乎其另外的功能。至于 AI Summary，由于 Quail 自带的摘要功能的质量实在是不太理想，因此小氯大部分时候采取直接复制全文到大模型聊天框的方式，所以这个功能也用不到了。对于这样一个平台，如果不能回馈给其对应的价值，只是在「关于」里面轻飘飘地提一句，那么在使用 Quail 的服务的时候，小氯是过意不去的（<del>Vercel、Netlify、CloudFlare：我们没意见</del>），这也算是种功利主义的道德原则吧。而且现在小氯在每次发布前，都需要做一番调整，例如生成元数据，手动发布，然后上传封面图（S3 流量这种东西还是能省点就省点吧）。这个工作量不大，但是心智压力不小。</p>
<p>于是小氯就在琢磨着，找一个新的 Newsletter 方案。</p>
<p>目前小氯其实比较喜欢 <a href="https://listmonk.app">Listmonk</a>，Go 语言完成的项目，现代而简约。但是 Listmonk 需要 PostgreSQL，小氯非常不希望在自己的服务器上安这个大家伙，而作者又明确说不支持 SQLite，因此就造成了这种尬住了的情况。</p>
<p>对于小氯这种超轻量级（一共四个订阅者 🤣）的使用来说，其实最简单的方案就是写个 Python 脚本，每次发布之前在本地跑一遍。不需要数据库，一个 <code>subscribers.json</code> 即可，甚至硬编码都行。即使小氯对 Python 不甚了解，但是只要给小氯一点点时间，就能写一个对小氯来说生产可用的脚本出来。</p>
<p>不过要是有时间的话，小氯还是希望自己写一个可用的项目出来，</p>
<h2 id="新的静态资源-cdn">新的静态资源 CDN</h2>
<p>最近<a href="https://www.liushen.fun">清扬老友</a>推荐了一个新的 jsDelivr 加速镜像：<a href="https://cdn.smartcis.cn">智云加速</a>。小氯是信任清扬老友的，因此也可以接受这个二阶信任链。所以小氯把自己的 <code>gcore.jsdelivr.net</code> 换成了这个加速站点，毕竟 jsDelivr Gcore 虽然在大陆能比较快地访问，但是这个比较也是相比 jsDelivr 主站点而言的。</p>
<p>不过这里小氯遇到了一个问题：小氯的站点字体（LXGW Bright 和 Fira Code）也是用 jsDelivr 加速的。jsDelivr 的使用条款没有禁止分发字体，OFL 1.1 许可证也允许使用 CDN 分发，<strong>但是对于镜像站不是这样</strong>。因为相比 JavaScript、CSS 等文件而言，字体是一种比较大的资源——尤其是中文字体，即使是分包之后也是如此，而在当下的环境下，做公益镜像本就举步维艰，再把镜像作为图床或者字体 CDN 显然是一种竭泽而渔的恶劣行为，而智云加速的主理人也明确禁止使用智云分发字体（这在技术上应该不算太困难，直接把特定后缀的文件禁止掉就完事，即使引用的是 <code>result.css</code>，<code>.woff2</code> 加载不出来也白搭）。</p>
<p>于是小氯没有把字体切到智云，Fira Code 还是使用的 Gcore，而 LXGW Bright 则换成了<a href="https://chinese-font.netlify.app">中文网字计划</a>的 Deno 线路。Deno 线路实际上是用 Deno 的运行环境转接的 ImageKit，所以这个自建也问题不大。</p>
<p>嗯，自建，好主意。自己有一条和公共线路质量相近的线路总归不是件坏事。于是小氯开始忙里偷闲地尝试一些可能的分发方式，目前为止尝试了以下方式：</p>
<ol>
<li>Gcore + Netlify：每个月 1 T 流量，绝对用不完，然而由于小氯不太了解 CDN，Gcore + Netlify 总是出错误，遂放弃。</li>
<li>Netlify 直连：每个月 100 G，似乎可以通过一些方式升级到每月 1 T。结合优选线路速度尚可。</li>
<li>Deno Dev + ImageKit：很顺利，速度和 Netlify 相近，但是最好套一层 CDN。至于套什么 CDN，各位可以自由发挥。</li>
<li>无畏云：<a href="https://dusays.com">杜老师</a>推荐的 CDN，免费额度很高，很适合（在有备案的情况下）对接对象存储来分发图片和字体。不过官网打不开了，不知道怎么回事。</li>
<li>多吉云：速度非常快（废话，国内 CDN），每个月 20 G 也算够用。由于小氯上传字体文件一般都是直接丢到仪表板上，因此没有 SDK 也无所谓。</li>
</ol>
<p>现在小氯还是选择了多吉云，不过目前线路还没有完全切过去。毕竟国内 CDN 这种东西实在是太 fragile 了，小氯有点害怕。</p>
<p>最后，容小氯抱怨一句：滥用真的太可怕了，当年的 jsDelivr 本来是为数不多的能够在大陆地区流畅运行的开发资源 CDN 之一，结果一大批人用 jsDelivr 当图床、视频床，甚至借助 <code>gh</code> 字段分发违法内容，结果就是 DNS 污染、备案吊销，导致现在 jsDelivr 在大陆基本处于不可用状态，结果只能出现这种「CDN 的 CDN」的离奇场景……为了自己的幸福，损害了大多数人的幸福，最后连自己的幸福都丢掉了，抱歉，这非常不功利主义。</p>
<p><strong>以及，向无私地提供公益服务的开发者和运营者们致敬，人类的幸福因你们的嘉言懿行而极大地增进。</strong></p>
<h2 id="小氯的-mailbox">小氯的 Mailbox</h2>
<p>最近小氯收到了一封邮件，这封邮件的一部分内容大概是长这样（这不是加密前的原文，只是希望给大家展示下到底是什么感觉）：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241110112637.avif" alt="780" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>这很明显是经过加密的。小氯一下子来了兴趣，毕竟这可是小氯收到的第一封加密邮件。于是小氯用自己的私钥进行了解密，并与发邮件的老友进行了友好的交流。期间还出了一点有趣的事情。</p>
<p>在回复邮件的时候，小氯想了一会儿怎么样才是最安全的。思来想去小氯使用了最淳朴的方法：写 Markdown，用 GPG 加密之后作为附件发过去。这样就不会受到邮件客户端的束缚了。</p>
<p>写完邮件，小氯开始思考，小氯到底需要什么样的一个 Mailbox 体系。</p>
<p>在电脑端，小氯希望能有一个足够好的客户端环境：足够的兼容性，现代化的界面和编辑体验，足够快的速度，以及支持 GPG 加密；至于在手机端，小氯的要求很低，能看就行。对于特别的邮箱（例如小氯的域名邮箱），小氯会希望能够收到即时通知。但是对于 IMAP 协议来说，即时通知并不算什么容易的事，除非把客户端一直挂在后台（这个我还没试过）；JMAP 能够比较好地支持即时通知，悲摧的是现在支持 JMAP 客户端的服务端和客户端并不多，其难度相当于在紫荆园找疙瘩汤。</p>
<p>说回正题。由于牢果的生态实在是太封闭了，因此小氯根本找不到几个开源的邮件客户端，像 Evolution、KMail 这些都只能在 Linux 的特定桌面环境下运行。目前 macOS 能找到的大概是：</p>
<ul>
<li>Thunderbird</li>
<li>Mailspring</li>
<li>Claws Mail</li>
</ul>
<p>Thunderbird（雷鸟）属于比较著名的选择，其支持大量的插件和主题，还有一些社区修改版，比如<del>好鸟</del>Betterbird。但是其界面和交互就给我一种……嗯，怎么说呢？有点古典的感觉。Claws Mail 更不用说，主打一个古典。这可能会吸引一些喜爱经典皮肤的极客，但作为一个现代 UI 风格的爱好者，小氯对此并没有什么审美上的触动。其中最好看的应该还是 Mailspring，界面比其余两个现代得不止一星半点。很可惜，没有 GPG 加密和签名功能。</p>
<p>至于手机端（iOS），笑似，除了 Delta Chat 就没有开源的邮件客户端了（此处排除了 ProtonMail 和 Tuta 这样的专有邮件客户端，此外 Delta Chat 严格来说也不是邮件客户端）。Thunderbird 几年前就说要出 iOS 端，到现在还是没动静，估计是没有下文了。</p>
<p>目前为止，还是在半推半就地用 Apple Mail。可能享受丝滑的开源邮件服务的唯一方式，就是换个生态系统了吧（笑）。</p>
<h2 id="换个域名">换个域名？</h2>
<p>眼看着园子马上要一周年了，小氯也开始梳理起了园子这一年的经历，以及也是用一颗热爱折腾的心在思考是否有什么 BREAKING CHANGE，可以趁此机会做了。</p>
<p>其中一个比较重要的点是：域名。前几天，<a href="https://i.duckxu.com">DuckXu</a> 老友在评论中提到：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>感觉这个新域名比 yoghurtlee 更能突出【小氯】这个形象，我现在在备忘录里看到 yoghurtlee. com 经常反应不过来是谁（</p>
</blockquote>
<p>小氯对此深以为然。那 <code>yoghurtlee.com</code> 这个有一点奇怪的域名是怎么来的呢？</p>
<p>Yoghurt 并不是字面意思的酸奶（虽然小氯确实很喜欢喝酸奶），而是涉及到现实中小氯的英文名字。这个英文名是我高中的英语老师送的，我对之十分欢喜，虽然说一般来说并不建议使用食物的名字作为英文名。在园子刚刚建立的时候，小氯就按照这个英文名买了域名。这个拼接实在是太冷门了，所以自然也不会有什么人抢注。</p>
<p>随着时间的推移，园子几经搬迁，小氯的 ID 也改成了现在的 Chlorine 和小氯，而原本的英文名字小氯也渐渐不再使用了，还是使用非常通行的汉语拼音。所以说，现在换个域名似乎是合适的选择。</p>
<p>但是小氯原本的域名在 SEO 和 Google 收录等方面已经积累了不少的权重，也绑定了开往和 Algolia Docsearch 等服务，更换起来有一点麻烦。</p>
<p>最重要的问题是：<strong>换成什么呢？</strong></p>
<p><a href="/new-domain-5/">前面说过</a>小氯买了个新的域名 <code>chlor.in</code>，但是由于 <code>.in</code> 域名存在的特殊问题，显然不能继续用 <code>chlor.in</code>，而且这个后缀也不能备案，虽然说小氯的博客也不怎么用得到备案（没有用国内 CDN，需要备案的服务都不在上面）。</p>
<p>对于直接使用 <code>Chlorine</code> 作为前缀，这虽然看起来很直观，但是实际做起来非常麻烦。虽然说用这个词当 ID 的应该不会太多，但是作为一个完整的英语单词，Chlorine 本来就存在溢价。大部分能注册的、后缀不太奇怪的域名都被抢注了。</p>
<p>一个退一步的选择是加一点词汇，比如 <code>hichlorine.com</code> 之类的。或者是使用一个简化版本的昵称，例如 Clori 或者是 Cloriti（可以参考<a href="/weekly-7/">这里</a>）。在挑了半天后，小氯拎出来了一大堆选择，简单列一列，<del>水一点长度</del>：</p>
<ul>
<li><code>chlorine.dev</code></li>
<li><code>chlorine.fun</code></li>
<li><code>chlorine.one</code></li>
<li><code>hichlorine.com</code></li>
<li><code>imchlorine.com</code></li>
<li><code>chlorinya.com</code></li>
<li><code>chlori.net</code>（Domain Hacker）</li>
<li><code>chlor.ink</code>（Domain Hacker）</li>
<li><code>clorii.com</code></li>
<li><code>cloriti.com</code></li>
<li><code>clori.cc</code></li>
<li><code>clori.dev</code></li>
<li><code>hiclori.com</code></li>
</ul>
<p>目前小氯还没想好这件事到底应该怎么办，各位老友能给一点建议吗？</p>
<h2 id="冲动消费与冷静期">冲动消费与冷静期</h2>
<p>很早就听说了 Cloudcone 在搞 PBF（Pre-BlackFriday）活动，把机器卖出了白菜价。上次小氯就想着冲一台，奈何没货了。周三看到<a href="https://yinji.org">青山大佬</a>（算是圈里面比较著名的 Cloudcone Affiliate）说 Cloudcone 补货了，正好小氯刚刚考完<del>终危</del>中微，相当兴奋，于是果断买了一台。<code>2C1G</code> 的配置，每月流量 3T 带宽 1G（<del>什么吕布骑猪</del>），一年差不多 14 USD，确实非常便宜。<del>顺带着小氯还买了另一个传家宝数字 <code>xyz</code> 域名</del>。</p>
<p>然而在高高兴兴地开完荒之后，小氯随手 <code>free -h</code> 了一下，然后看到了一个令我头皮发麻的数据：目前，机器的可用存储空间和内存都已经不足一半。</p>
<p>那小氯干了什么？也不过就是预选的时候选择了最熟悉的 Ubuntu Server，然后用 Docker 跑了个 Nginx Proxy Manager（我甚至都不敢装 1Panel）。哦对了，还有开了 2 个 G 的 swap。</p>
<p>用惯了 4 G 内存的机器，这个 1 G 的小家伙简直像来凑热闹的。</p>
<p>在经过反复调查后，小氯得出了一个令人沮丧的结论：这台机器几乎无法托管任何稍大一点的项目。毕竟，你不能指望人在瓦片上跳舞。虽然带宽和流量极大，适合用来做一些网络安全方面的学习和研究（<del>请自行理解这是什么意思</del>），但是小氯并不缺这样的工具。</p>
<p>所以，思来想去，小氯把这台很优惠的 VPS 销掉了，钱款还留在 Cloudcone 里面，毕竟将来大概率还是需要一些 VPS 的。</p>
<p>由此可见，冷静期确实是个很好的东西。不过，我们更应该反思的，恐怕是我们当初为什么会脑子一热。虽然我们不能要求自己时时刻刻理性，但是至少应该做到大部分时候理性。</p>
<h2 id="farewellmongs-coffee">Farewell，Mong&rsquo;s Coffee</h2>
<p>早起看到班里同学转发了<a href="https://mp.weixin.qq.com/s/DOOG-YndbkZZOoPWaK2HZw">一条推送</a>。小氯兴趣使然地点开看了下，是人文清华讲坛的推送，大致意思就是蒙咖（蒙楼咖啡）要停业了。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>不得不说，人文清华讲坛的文笔真的很好，让小氯一个从来没去过蒙咖的人都有点感伤。小氯前几天也写了一篇 <a href="/farewell-omnivore/">Farewell，Omnivore</a>，但是实在是和这篇文章的功力差远了。</p>
<p>在高中的时候，小氯曾经和朋友一起喝过一点咖啡。当然，什么好的咖啡是不可能的，只是那种最普通的雀巢，拿着教室饮水机的热水冲一冲，简单搅一搅，就是支撑人度过一下午的饮料。不过说实话，这种方式对小氯的作用似乎非常微小，喝了和不喝几乎一样。再加之后来小氯的身体越来越差，就把咖啡停掉了。</p>
<p>上了大学后，小氯依然是对咖啡兴趣不大，只是偶尔当作一点饮料去喝，更多的时候还是水，牛奶，茶或者果茶。瑞幸的话点过一杯生椰拿铁，但是小氯觉得极其难喝，因此从此对这些十元钱以上的咖啡敬而远之。没办法，小氯欣赏不了。</p>
<p>至于蒙楼……小氯也不太熟悉。虽然说小氯每周一都去西体（西体育馆，在蒙楼旁边）上课，但是几乎从未踏进甚至接近过蒙楼，除了跟着班级去合唱排练和其他的一些琐事时。蒙楼给我的印象宁静而高雅，若是接近一些，亦可闻丝竹管弦之盛。空气中永远弥漫着淡淡的馨香，只是小氯没有意识到，那是咖啡的香气。</p>
<p>现在呢，小氯只是在想……到底有多少东西，我们从未知晓，等到知晓的那一天，却已经永别了呢？</p>
<h2 id="this-is-completely-unacceptable-coloros">This is completely unacceptable, ColorOS</h2>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>下面的部分内容带有极其强烈的情绪化色彩，请谨慎阅读。</p>
    </div>
</div>
<p>小氯本来想写的是「Shame on you, ColorOS」，但是感觉还是太冒犯了。由于成长过程中的种种因素，小氯对于带有冒犯性的话非常敏感，现在在中文中能说出的最重的斥责大概也就是半开玩笑的「虫豸」。像 Linus Torvalds 那样直接来一句「Fxck you NVIDIA」，对小氯来说确实是难以启齿的。</p>
<p>好的，那么本段的炮击对象也很明显了，就是小氯的牢硼铀，OPPO 的 ColorOS。</p>
<p>小氯曾经是个 Windows + Android（OPPO）+ iPad 的混搭组合，目前使用的是 Apple Eco（iPhone，iPad，MacBook，AirPods）。不过按照小氯目前在开源世界里一去不回的架势，估计总有一天会换到 Linux + AOSP 的。而且，iOS 实在是过于封闭了，开源生态堪忧，甚至通知都要全部走 APNs，确实挺难绷的。</p>
<p>但是话说回来，Android-based 的系统也是各有千秋的。而国内各大厂商的锐意创新和精耕细作，造就了一批运行流畅、尊重隐私、自由度高的 modified-Android。就以小氯曾经用过、现在在作为备用机的 OPPO 使用的 ColorOS 为例吧，其优秀操作包括但是不限于不能卸载原装应用（甚至使用 adb 都不行），开启 Dev Mode 之后就疯狂弹通知乃至报出一些我都不知道是哪来的应用的退出错误（<del>你退出就退出吧，这辈子都别重新启动才好呢</del>），五彩斑斓的广告，关不掉的安装器（以及其扫描和强制检查）……给小氯的感觉就是，家里住了一个流氓，吃我的用我的，整天翻我的日记，对我的家事颐指气使，而且赶还赶不走。</p>
<p>……稍等，小氯去喝口水，平复下心情。</p>
<p>嗯，对，那边的那几个把头转过来，别走神，别以为没直接批评你们你们就可以高枕无忧了。HyperOS，MIUI，OriginOS，还有那些我忘记你们叫什么了的系统，你们都别想跑。都是一群虫豸，和你们在一起，怎么能搞好技术呢（鸿蒙我没用过，不评价）？</p>
<p>反正小氯最后的状态大概是这样的：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241109182434.avif" alt="789" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>这话没开玩笑。如果小氯将来从 iOS 脱身的话，就绝不会再碰任何一种国内的安卓系统（指作为主力系统使用）——严格来说，都不能说是 modified-Android，应该叫 botched-Android 或者 tampered-Android。要么是买一台现成的原生安卓手机，例如 Google Pixel，欧版的 OnePlus（有广受好评的 OxygenOS，而且得益于 GDPR，隐私方面会更好些）或者 Nothing Phone，要么就刷机。现在小氯已经开始收集一些很旧的手机，大部分是小米的，准备刷着玩练练手。</p>
<p>（当然，倒也不是说，国产安卓系统就是一无是处，其也是有一些优点的，例如本地化适配。但是对小氯来说，这些优点相比缺点带来的理性和情感损失实在是微不足道。</p>
<h2 id="用-python-占卜">用 Python 占卜？</h2>
<p>实际上，本节的标题有一点误导性。本节既不讲 Python，也不讲如何占卜。</p>
<p>如果我没记错，我在先前的博文中，不止一次提到过「我一位谙熟语言学的学长」或者是「我一位研究人文社科的学长」这一类的描述。这并不是无中生友，这些称呼说的都是同一个真实存在的人：一位比我高一届的高中文科学长，可能也是我的诸位微信好友中最懂哲学的一位。我，这位学长，<a href="https://clf3.org">孙哥</a>，我们都是关系很好——至少是不错的朋友。</p>
<p>我的这位学长没有一个通用的昵称，我平时一般也只称呼他为「学长」，那就让我们这么叫吧。</p>
<p>我的这位学长是位涉猎甚广、思路开阔的奇人，知识面从政治学到世界历史到理论社会学到古希腊语到歌剧学到罗马艺术到小学教育到概率论到线性代数到分析力学到烧烤的吃法再到崩坏星穹铁道，其各种新奇的想法更是层出不穷。</p>
<p>在他茂密的技能树中有一个不那么起眼的技能：占卜。他曾经兴致盎然地对我说，一次孙哥到他那里玩，他给孙哥算了一卦，后面证明非常灵。</p>
<p>我问：您用的是什么？蓍草吗？</p>
<p>他说：Python。</p>
<p>我哑然失笑。</p>
<p>Python 用来占卜，那显然就是随机数了。这样是否就意味着占卜神圣性的消解？毕竟，很难会有人觉得随机产生的数字有什么神圣性。</p>
<p>不过，我们还可以想另外一个更离奇的观点：<strong>计算机的随机数，是伪随机数</strong>。这会象征着什么？</p>
<p>让我们稍微深入地谈一谈这个问题。</p>
<p>Python 的随机数生成基于的是 <code>random</code> 模块（也可以用 <code>secrets</code>），其核心是 Mersenne Twister（梅森旋转算法）。MT 算法的原理比较复杂，简单来说就是使用一个固定大小的内部状态数组（对于最常用的 <code>MT19937</code> 来说，n 为 624，每个元素是 32 位整数——注意，这个说的是二进制位），然后经过一堆操作之后输出数字。由于最后的范围是一个梅森素数，所以得名梅森旋转算法。</p>
<p>但是，尽管 MT 算法可以产生在随机性上表现良好的数，但其并不是真正随机的。事实上 MT 算法甚至是线性的，连混沌系统的内禀随机性都不是。</p>
<p>所以说，我们有一个令人兴奋又不安的决定论假设：理论上来说，我们只要知道种子，就可以推导出后面所有的数字——这和传统中的以生辰八字推断人的命运可以说是别无二致。然而请注意，我说的是<strong>理论上</strong>，事实上这样做几乎不可能。大衍之数，窥见天机，是要受天罚的。</p>
<p>而且，伪随机数有一个特征：它们实际上都是极长但是有规律的。也就是说，在经历足够长的时间后，我们可以再次观察到相同的序列。</p>
<p>不知道大家想到了什么，但是我想到了《皇极经世》，尽管我根本没看过也不想看这本书。</p>
<p>那如果我们使用的是「真随机数」呢？例如基于大气运动？</p>
<p>这事确实可行。忘记什么时候听过一个趣事了：在 CloudFlare 的总部中有一面熔岩灯墙，员工们需要随机数的时候就拍一张照片（此处感谢 <a href="https://itedev.com">@minc</a> 老友的指正）。不得不说，这是个挺有意思的事情。</p>
<p>不过这里面还涉及另一个有趣的问题，就是我们日常所说的「随机现象」，其到底有多少是随机的，随机的程度如何。或者说，随机现象能分级吗？</p>
<p>我们从计算机的随机数开始。如上文所述，计算机随机数大概可以说是「线性伪随机」的，其随机程度最低，尽管在日常使用中可以作为很好的近似。</p>
<p>下一级的随机，可能是混沌系统。混沌系统是一种非线性系统，其运动状态由非线性的微分方程、差分方程或者迭代方程等描述。混沌系统具有高度的初值敏感性，初始状态的一点微小变化就可能引起后续观测的巨大差异（俗称「蝴蝶效应」），这使得混沌系统的行为在实践中是难以预测的，表现出类似随机的特性。但是<strong>混沌系统实际上还是确定的</strong>，其只是具有内禀随机性。因此，我们不妨将其称之为「非线性伪随机」。</p>
<p>接下来就是所谓的「真随机」了。真随机一般也是物理现象，例如大气噪声等。就目前我们的认识来说，「真随机」的尽头是量子现象。量子现象，比如说放射性衰变和光子的偏振滤波，被认为是本质上不可预测的，只能使用概率进行表示。</p>
<p>不过，如果我们「撇开量子的浮沫」，世界究竟是不是随机的还难说呢。几百年前就有拉普拉斯妖的假说（机械唯物主义），尽管目前我们根据测不准原理和最大熵原理<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>可以反驳掉这个说法；而《镜子》中描述的故事，就是在有了完善的奇点模型、宇宙决定论和足够的算力（超弦计算机）后，世界就成了完全确定的沙盒。尽管最后也没能完成对近期未来的递归预测，但是世界的运行轨迹都是确定无疑的。</p>
<p>好吧，讲着讲着就跑题了，上面那句「占卜神圣性的消解」早不知道丢到哪去了。而且，以上的叙述涉及一点物理知识，小氯对物理几乎一窍不通，因此如果出现错误，敬请批评指正。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>对不熟悉哲学的老友们提个醒，功利主义（Utilitarianism）中的「功利」和我们平时常说的功利是两个意思，不带有什么贬义。其实小氯觉得，翻译成「效用主义」可能更好点，毕竟经济学中的「效用」就是这个词。但是「功利主义」这个词汇有历史惯性，而且也有自己的优点，故遵循旧例。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>带清简称为「蒙楼」的建筑有好几个，此处统一指艺术楼。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>这里涉及另一项有趣的研究，也就是根据最大熵原理和光速等，得出拉普拉斯妖处理信息的能力实际上存在一个极限。可以看 Wikipedia 或者是<a href="https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.88.237901">这里</a>。&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Farewell，Omnivore</title><link>https://chlor.me/farewell-omnivore/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/farewell-omnivore/</guid><category>Omnivore</category><category>开源</category><description>本文讲述了作者对 Omnivore（一款稍后读应用）项目终止的感受和思考。文章首先介绍了作者与 Omnivore 的渊源，表达了对其功能和理念的赞赏。接着，作者详细描述了得知 Omnivore 团队加入 ElevenLabs、Omnivore 即将停止维护和服务关闭的反应时的悲哀，虽然 Omnivore 的代码依然开源，但服务器关闭和缺乏完善的自部署文档，意味着 Omnivore 实际上已走到生命尽头。最后，作者表示自己已经彻底离开 Omnivore，探讨了开源项目的风险并展望了可能的替代工具，表达了对开源社区的思考。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。本文为紧急加更。</p>
<p>园子一向只有 Hello 系列，从未有过 Farewell 系列，也不会有这个系列。因为小氯从不喜欢告别，虽然我们<a href="/weekly-1/">总要启程</a>，但如果不是迫不得已，谁会愿意分开呢。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>人生不相见，动如参与商。</p>
<p>今夕复何夕，共此灯烛光。</p>
</blockquote>


<div class="my-6 rounded-lg border-l-4 p-4 border-green-500 bg-green-50/50 dark:bg-green-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-green-700 dark:text-green-300">
        <div class="w-5 h-5 i-carbon-idea">
        </div>
        <span>Tip</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>小氯尊重 Omnivore Team 的一切决定，也感谢他们在维护这样一个优秀产品方面的贡献。愿他们的新事业一切顺利。</p>
    </div>
</div>
<h2 id="前言">前言</h2>
<p>虽然这样显得极其啰唆且有水字数的嫌疑，但是小氯还是想说说自己和 Omnivore 的故事。不煽情，只是讲故事。</p>
<p>Omnivore 的本意是「杂食者」，对于一个稍后读软件而言，这是个很好的名字。Omnivore 的 slogan 是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Read-it-later for serious readers.</p>
</blockquote>
<p>我最初是从公众号「维客笔记」了解到这一应用的。当时小氯酱刚刚接触 Obsidian 和 PKM 不久，酷爱折腾各种<del>花里胡哨的</del>工作流，而 Omnivore 免费、开源、跨平台、大陆可用、支持浏览器插件、支持和 Obsidian 联动的特性无疑是一连串的王炸。小氯火速注册了 Omnivore，并开始将其作为主力的 Read-It-Later 工具。虽说这一年小氯本身也没存几篇文章，也并没有使用过几次 Omnivore Syncing to Obsidian 的功能，在实用层面对 Omnivore 没什么依赖，但是潜意识中，小氯早就把 Omnivore 当成了自己「理想工作流」的一部分，甚至是一个理想的信息聚合系统的「原型机」。</p>
<p>小氯把自己最喜欢的几篇文章存到了 Omnivore 中，闲来无事就读一遍，也曾经在数个场合强力推荐过这个工具，甚至在<a href="/weekly-11/">上周的周报</a>中也是如此。虽然说 Omnivore 存在一些令人有点不安的问题，例如一些 stale 乃至 rotten 的 issue、PR，莫名其妙的 AI 功能，以及迟迟没有完成且官方并不给出直接回应的自部署文档等，但是小氯都没太当回事，只觉得是开发团队有更重要的事情要做。</p>
<h2 id="晴天霹雳">晴天霹雳</h2>
<p>这个标题很惊悚，或许夸张了点。</p>
<p>今天早上小氯翻收件箱的时候，偶然走到了 126 的垃圾邮件列表，发现了一封被 126 归于垃圾邮件的邮件，看样子来自于 Omnivore，标题似乎是什么 Omnivore is joining XXX。当时小氯有点奇怪，因为 Omnivore 一般是不会发营销邮件的。小氯甚至以为这是不是 Omnivore 加入什么联盟了，于是就没怎么管。</p>
<p>下午摸鱼的时候小氯又想起了这封邮件，于是去翻了翻。邮件是纯英文的，但是小氯仗着自己阅读能力尚可，直接不开翻译硬读。</p>
<p>然而小氯读完之后，对自己的英语能力产生了深深的怀疑，怀疑自己是不是理解错误了。</p>
<p>为了保险，小氯把邮件喂给了 AI，得到了一份翻译，与小氯的理解别无二致。</p>
<p>当时小氯的反应大概是和 GitHub Issue 上的第一条的标题一样：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Seriously?</p>
</blockquote>
<p>然后小氯去了 Omnivore 的官方博客，看到了他们<a href="https://blog.omnivore.app/p/omnivore-is-joining-elevenlabs">刚发布不久的文章</a>，最终确认这是真的。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>小氯小氯，你在这内心独白了半天，到底发生什么了？</p>
</blockquote>
<p>简单来说，就是：</p>
<ul>
<li>Omnivore 的全体开发成员已经加入 ElevenLabs（一家 AI 初创公司），Omnivore 的开发和维护即将停止。</li>
<li>Omnivore 的官方服务器 <code>omnivore.app</code>（可能也是唯一的稳定服务器，因为 Omnivore 的自托管极其繁琐且没有完整的文档）将于 2024 年 11 月 15 日关停。</li>
</ul>
<p>或者再说得直白（尽管不算很准确）点：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Omnivore Team 把自己的产品卖了。</p>
</blockquote>
<p>issue 里面，大家的反应不一。有人嘲讽，有人指责，更多的是遗憾和祝福，抑或是非常实用地开始讨论和推荐替代品。</p>
<p>小氯是什么感觉？小氯算不上气愤，虽然说开发者这样似乎有些对社区不负责，同时这样的处理方式也并不是最好的。如果一定要说的话，小氯有点悲哀，</p>
<p>不是大哭大笑的悲哀，而是沉默的、无力的悲哀。如同看着陪伴了自己许久的猫咪在眼前被人生生扼死，或者是看着自己费尽心血建起的家在大火中发出噼啪的哀鸣。</p>
<p><strong>一个三年之久、一万两千多个 star 的开源项目，说没就没了。</strong> 虽然源代码还在，既没有 Public Archive，也没有删库，或许日后也会有热心的社区用户接手这个项目继续维护、提供完善的自部署文档，甚至慷慨解囊，部署一个替代 <code>omnivore.app</code> 的主服务器，但是，<strong>Omnivore 已经走到了生命的尽头</strong>，这一点，毫无疑问。</p>
<p>上次亲眼看见这样的事情，还是 Trilium 的维护模式。但是 Trilium 的开发者只是表示，自己不再有精力对 Trilium 进行积极的开发了，希望逐渐将项目让渡给一位新的主理人。而且 TriliumNext 也迅速补上了这个空缺，所以 Trilium 的维护模式虽然也在社区造成了不小的动荡，但是总体而言，有惊无险。</p>
<p><strong>但是 Omnivore 不一样</strong>。它的开发者成为了新锐 AI 公司的雇员，它的主服务器被彻底地关闭，虽然我们可以导出数据，但是账户删除的失败甚至开始让人怀疑它是不是在出售用户的数据（尽管没有任何事实性证据，且从情感上小氯完全不能相信这一点）。而自部署的缺位，已经将绝大部分的用户隔离于继续使用稳定版本之外。</p>
<p><strong>Omnivore has gone. It will never come back.</strong></p>
<h2 id="后记">后记</h2>
<p>谁也不知道 Omnivore 接下来会怎么样，或许只是不再更新，或许是 Public Archive，或许直接删库。但是小氯觉得，第一种可能性更大些。即使是因为开源开发者的那点傲骨，Omnivore Team 也不会在邮件中向用户撒谎的（邮件中承诺 Omnivore 依然会保持开源）。为了以防万一，小氯紧急 Fork 了一份 Omnivore 的库。或许将来的某个时候，小氯会着手继续维护这个项目——尽管这几乎不可能。自己的技术能力几斤几两，小氯酱心里有数。</p>
<p>目前小氯已经请求了一次数据导出，并且删除了 Omnivore 账户（至今没有成功），Obsidian Omnivore 插件和手机端的 App 也已经被移除。除非有人能够接受 Omnivore 的开发并且给出一个完善的自托管方式（或者是提供一个免费的托管服务，尽管小氯喜欢前者），否则，小氯和 Omnivore 的缘分就到这里了。</p>
<p>或许小氯应该庆幸，Omnivore 在小氯的工作流中还不是一个完全不可或缺的角色，实际上小氯将 Omnivore 整合到 Obsidian 的行为也并不常用。这可能也是在<a href="/obsidian-and-open-source/">之前那篇文章</a>中提到的那个巨大的线程中，一位网友的一个观点：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>对于无法用最确切的手段保证持续开发的开源项目要保持最低限度的信任，因为你不知道它们什么时候就会停止开发，而你大部分时候都无能为力。</p>
</blockquote>
<p>那么小氯日后会用什么呢？或许是 Shiori，或许是 Wallabag，或许是 Hoarder，或许是 Linkwarden，或许是 Readeck，或许是 Obsidian Web Clipper，或许是别的什么优秀的开源项目。然而，这已经不是小氯当前要考虑的问题了。</p>
<p>我们当然可以就着各个话题写更多，再写写对开源的思考——但是，小氯已经有点累了。而且现在，小氯也没办法把自己纷乱的思绪组织成完整的文章。所以，Be easy on me, okay?</p>
<hr>
<p>在口语课之后回来立即赶完了这篇文章，甚至在课上的 free share 中，小氯也在讲这件事。</p>
<p>说实话，小氯上面写的东西或许有点矫情的意思。如各位老友所见，小氯是一只情感有些迟钝的<del>元素娘</del>原子，因此实际的感觉可能远没有文章中暗示的那么强烈。</p>
<p>就这样吧，衷心希望这个标头不要有第二篇。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>十觞亦不醉，感子故意长。</p>
<p>明日隔山岳，世事两茫茫。</p>
</blockquote>
<p><strong>Farewell to Omnivore。愿世间一直有你，愿世间不再有你。</strong></p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（11）：案几之上</title><link>https://chlor.me/weekly-11/</link><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-11/</guid><category>周报</category><category>日常</category><category>人文社科</category><category>Follow</category><category>Omnivore</category><description>本文是作者周报的第十一期。文章开始描述了完成中微作业的过程，展现了忙碌的学生生活，接着介绍了新购买的域名 `chlor.in`，并探讨了对 GPG 和 IPFS 作为 Hugo 图床的兴趣。随后，作者表示对 1024 程序员节无感，并分享了一些有趣的代码片段。通过讨论 `/dev/zero`，作者分享了对“空”的哲学思考，而软件“一言”的使用则让作者思考了脱离语境欣赏句子的局限性，展现了作者扎实的人文素养。在网络安全方面，作者进行了密码升级和账户、软件等的清理，希望能够逐步“与互联网脱轨”，减少对闭源软件和外部服务的依赖。此外，作者结合 Omnivore 和 Follow 等工具探讨了理想的信息聚合系统，表达了对统一、高效的信息管理方式的需求。文章以一个假设性的问题结束：如果生命只剩三天，作者的第一反应是回家陪伴家人，体现了家人和亲情在作者生命中的重要地位。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-11-cover.webp" alt="Ephemeralis-Weekly（11）：案几之上" />
        </figure>
        <p>各位老友们好，我是 Chlorine。新的一期周报，双手奉上。小氯这周比较忙，今天写了一天的 DSA，晚上疯狂码字，总算是在睡前把周报发出来了 qaq。</p>
<p>本期的标题依旧和内容有联系但是不明显，欢迎各位老友自行解读 OωO</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第十一期，日期范围为西历 2024 年 10 月 21 日至 10 月 27 日。祝食用愉快。</p>
<h2 id="中微发疯预警">中微（发疯预警）</h2>
<p>这周是我们<del>牢贡</del>经管的关键课程——<del>高级英语听力训练</del> <del>微积分 A 英语授课版</del> <del>终寄危棺惊悸穴</del> 中级微观经济学（简称中微）的 Problem Set 2 的 DDL。</p>
<p>老实说，中微课程小氯大部分在划水（<del>你什么课程不划水？</del>），再加之危寄坟知识早就还给老师了，而中微的课程作业也是充分体现了经管学院希望同学们深入现实生活、培养经济思维、承担社会责任、接受生活毒打的教育愿景（bushi），因此小氯做起来可谓是肝肠寸断。</p>
<p>上周日下午和晚上小氯是闲暇的。小氯本想摆烂，反正 DDL 还剩六天。不过小氯酱嘴上说着不要（学习），身体却很诚实呢（看了一下午中微的 PPT，并且在晚上写了一道半的题目）（大雾）。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>一晚上就写了一道半？你看这个小氯就是逊啦~</p>
</blockquote>
<p>你说得对，但是中微的一道题有十个问，而且是全英文书写的作业（标准微笑）。</p>
<p>然后第二天起来，趁着去上<del>寄膝盖</del>计系概之前，写了一道；然后在下午上课时勇敢地扔下了电脑而带着 iPad，于是又写了不少，晚上再补一补剩下的部分，终于是把作业交上去了，没有成为 DDL 战神。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>中级微观经济学，你看你领的内几个贵物，还有你，人不人鬼不鬼滴，就你还要抓我嗷？在学堂路，别让我看到你，看到你效用函数必须给你拽掉，必须打你脸！我告诉你啊，中微。到学堂路了，指定没有你好果汁吃啊，你记住了啊。
——《计金往事》（大二上）</p>
</blockquote>
<p>于是小氯星期二就光明正大地开摆了，写完了积攒很久的<a href="/obsidian-and-open-source/">超级长文</a>。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我们之所以今天能够共同摆烂，都是因为最初做出最困难的决断，带领我们走向胜利的，小氯同学的明断。来，我们祝小氯同学健康，干杯吧！来，我来致辞：祝小氯同学，健康常胜！</p>
</blockquote>
<h2 id="新域名">新域名</h2>
<p>这周买了个眼馋好久的新域名，<code>chlor.in</code>。具体可以看<a href="/new-domain-5/">这里</a>。</p>
<h2 id="gpg">GPG</h2>
<p>最近小氯对 GPG 比较感兴趣，然而由于知识的匮乏，现在还是一脸懵的状态。主要在看<a href="https://www.ruanyifeng.com/blog/2013/07/gpg.html">阮一峰老师的教程</a>，虽然这篇教程已经是十多年前的古董了，但是用来入门还算可以。毕竟虽然 GPG 一直在进步，但是基本原理没有改变太多。</p>
<p>此外，小氯也把自己域名邮箱的 GPG 公钥公布了出来，就在<a href="/about">关于</a>页面。如果各位老友希望给小氯发一封邮件说些悄悄话，可以使用这个公钥进行加密 (⑅˃◡˂⑅)</p>
<h2 id="ipfs-和-hugo">IPFS 和 Hugo？</h2>
<p>之前小氯水过一篇很长的文章：<a href="/markdown-pic-management/">Markdown图片管理实践</a>，讲了一大堆可用的图床之类的。</p>
<p>最近小氯接触到了 IPFS（InterPlanetary File System），于是心生一寄：你对象存储是个文件系统，我 IPFS 也是个图片系统，而且支持直链，那 IPFS 能不能当图床？</p>
<p>听起来非常美好，无限容量，无限流量（全球那么多节点，相当于全球 CDN），无须登录注册，抗审查。唯一的缺点可能就是不能删除，但是小氯觉得博客图床的话，需要删除的情况应该也不会多。</p>
<p>于是小氯去了解了一下。然后发现这的确是一个可行的方法，也已经有许多人在做了，比方说 <a href="https://ipfsscan.io">IPFSScan</a> 就提供免费的 API 和 IPFS 网关（简单来说就是一种可以让用户通过一般的 <code>https://</code> 访问 IPFS 文件的东西，因为一般的浏览器不支持 <code>ipfs://</code> 协议）。</p>
<p>当然，IPFS 也不是一个 silver bullet。除了上面说的不能删除以外，IPFS 有一个 GC 机制，如果一个文件长时间没人访问，会被删除（别紧张，重新上传就行了，链接不变——这是 IPFS 的机制），如果访问的人少，速度会很慢（当然如果访问的人多的话就会变得很快）。所以小氯暂时还没有全面切换的想法，缤纷云和 CloudFlare R2 目前还不错的。</p>
<p>不过把 Hugo 全站 IPFS 化，像全站对象存储化那样，似乎还是有点困难，或者需要借助一些其他的（可能付费的）服务。不过 4EverLand 应该可以帮上一点忙。</p>
<h2 id="1024-程序员节">1024 程序员节</h2>
<p>如各位老友所见，小氯的记性并不算好，同时对于节日和特殊的日子非常不敏感。可能再过两年，就能达到连自己的生日和过年都记不住的境界了（笑哭）。</p>
<p>所以 1024 节，对于小氯来说就像没有一样。似乎牢贵也没举办什么活动，至于叉院、软院（现在应该叫笃实书院了 🤣）小氯就不太清楚了。</p>
<p>不过既然有这么个说法，小氯也不能没有一点表示。正好今天一下午都在<del>预习</del>复习计系概，写点简单的汇编吧。</p>
<pre><code class="language-asm">foo:
    testq %rsi, %rsi
    jz .L1
    pushq %rdi
    pushq %rsi
    shrq $1, %rsi
    call foo
    imulq %rax, %rax
    popq %rsi
    popq %rdi
    andq $1, %rsi
    cmpq $0, %rsi
    je .L2
    imulq %rdi, %rax
.L2:
    ret
.L1:
    movq $1, %rax
    ret
</code></pre>
<p>很初级的一个算法，小氯现在的汇编知识也只能写这么多了。</p>
<p>再写一点精神状态很美好的代码：</p>
<pre><code class="language-cpp">template &lt;class T&gt; class World {
public:
    T *getEarth() { return nullptr; }
    T *getWater() { return nullptr; }
    T *getAir() { return nullptr; }
    T *getFire() { return nullptr; }
};
</code></pre>
<h2 id="devzero">/dev/zero</h2>
<p>下面的内容更奇怪，可以说是不知所云。</p>
<p>最近在向 Grok 询问 <code>/dev/null</code> 的相关知识时，得知了另一个 Unix 和 Unix-like 的设备文件—— <code>/dev/zero</code>。</p>
<p>简单来说，<code>/dev/zero</code> 是一个 <code>/dev</code> 目录下的虚拟设备文件，其作用是提供无限的零字节流（也就是所谓的 <code>\0</code>）。我们可以用这个东西创建一个很大的文件：</p>
<pre><code class="language-bash">dd if=/dev/zero of=file.txt bs=1M count=102400
</code></pre>
<p>这个文件的大小是 100 G。但是如果你用 Vim，Emacs，nano 或者是不管是什么东西打开它，你大概率会什么也看不见，因为 <code>\0</code> 并不是正常的、可见的字符。</p>
<p>当时小氯想到了一句话：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>空不是无，空是一种存在，你得用空这种存在填满自己。</p>
</blockquote>
<p>这句话是《三体》中，长老对魏成说的。不知道这能否算是比较准确的佛教思想，但是至少是比较接近的。</p>
<p>很巧，小氯最近就希望看看《金刚经》。小氯是个无神论者，但是一点哲学（宗教也是一种哲学）对小氯也没有害处。</p>
<h2 id="一言">「一言」</h2>
<p>小氯的手机上有一个软件，名为「一言」，也是我为数不多购买了终身会员的软件之一。一言的 slogan 是「记录字句，发现共鸣」，是一个……嗯，比较文艺的文字社区。一言有许多高质量的创作者，但是小氯只关注了一个作者，就是一言官方。每天读一读那些别具匠心的句子，感觉生命都明亮了许多。</p>
<p>但是，小氯今天在看一言的时候，突然想到了一个问题（小氯酱总是会在各种奇奇怪怪的场合想到奇奇怪怪的问题）：我们阅读，欣赏并且迷恋这些句子，到底是作用在这个句子的哪一层的（事先声明：下面的各种胡言乱语和一言无关，不是对其任何的指责或者批评，希望各位不要误解）？</p>
<p>容小氯解释一二：我们姑且不考虑这个句子本身的形式美，我们可以喜欢这个句子遣词造句的考究，可以喜欢这个句子的含义，可以喜欢哲学深度和情感意境，也可以是这个句子在所处语境中的此类。似乎我们大部分时候都是单独地欣赏这个句子本身，而不是去结合其背后的语境。举个例子，元好问曾写过一句：「且酩酊，任他两轮日月，来往如梭。」这个句子本身自然是把作者及时行乐的潇洒落拓染于纸上，但是如果不去读一读那首《骤雨打新荷》的全文，看不到上阕春末夏初园亭的自然景色，也读不到下阕前半部分作者的直抒胸臆，那我们体会到的那种潇洒落拓，是否还差了点意思？更广一些，把这首词放到这个作者的人生的语境中，甚至是当时那个时代的语境中——无论是历史学意义的时代，还是文化意义的时代，感受是否又会有所不同？就是如此。当然，从一个高屋建瓴的视角，去对这首词作彻底的解构和鉴赏，是我们中大部分人力所不能及的，但是稍微上升那么一两层的语境，我们都是可以做到的。</p>
<p>而且，如果离开语境，含义不仅会发生弱化和变形，甚至有可能完全扭曲，乃至形成一种刻板印象，影响公众对作品整体的判断。再举个例子吧。东坡有句流传甚广的词，大概是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>且将新火试新茶，诗酒趁年华。</p>
</blockquote>
<p>听着真是无比的浪漫、雅致而自由。</p>
<p>可是这句词真的是这样吗？不用多，我们稍微多看一下前面的一句：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>休对故人思故国，且将新火试新茶，诗酒趁年华。</p>
</blockquote>
<p>再多一点：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>寒食后，酒醒却咨嗟。休对故人思故国，且将新火试新茶。诗酒趁年华。</p>
</blockquote>
<p>现在还觉得这首词很浪漫雅致且自由吗？</p>
<p>我一位谙熟语言学的学长曾经对我说：中文是一个高度甚至完全语境化的语言。小氯不懂语言学，但是作为一个中文本族语者对这个说法深以为然。</p>
<p>以及，如果只是反反复复地赏玩和传播少数乃至一个句子，对作品中其他同样优秀的句子其实也有点不公平。还是拿上面那首《望江南》为例。那首词还有上阕：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>春未老，风细柳斜斜。试上超然台上看，半壕春水一城花。烟雨暗千家。</p>
</blockquote>
<p>小氯当年在读这首词时，其实相当喜欢上阕，反而可能是因为下阕听得太多了，产生了一些逆反心理，而对下阕并不感兴趣。</p>
<p>忘了在哪听过一个说法了：诗歌的金句化，是诗歌文学的灾难。其实不仅是诗歌，所有被摘录、被拆解、被剪下枝叶做成标本供人赏玩的文学皆是如此。不是说单独鉴赏一个句子不可行，只是希望各位老友不要只这样做。</p>
<h2 id="与互联网脱轨">与互联网脱轨</h2>
<p>最近，小氯花了不短的时间，以 Vaultwarden 为根据地，对密码开展了整风运动和带清洗。前者就是把一些弱密码和重复密码改成强随机密码。对于许多用户，社会工程学的危险性其实比暴力破解要大得多。如果你在多个网站用同一个密码，那这件事更危险。但是如果你使用足够长的随机字符串作为密码，例如 Bitwarden 自带的密码生成器或者 <code>openssl</code>，并且把它保存在一个足够安全的地方，不要到处乱放，那再厉害的社会工程学黑客都只能看着你的密码干瞪眼（当然，要是您被钓鱼了，那小氯祝您好运。<del>牢清甚至发过官方钓鱼邮件</del>）。</p>
<p>同时，小氯还注销了大量的账号。从 Blackbaze 到 Flomo 到 Zohomail 到 Hugging Face 再到各种我都忘记什么时候注册的小东西。原因很简单：我用不到了。这应该也算是数据最小化原则的一个体现，既然我赋予你们这个权限但你们却无法带给我对等的价值，那就请体面地离开小氯的世界。</p>
<p>此外，小氯也对电脑上的应用进行了一波断舍离，就连用了许久的 Arc 都被小氯扫地出门（小氯现在的主力浏览器是 <a href="https://zen-browser.app">Zen</a>，即使还在 Alpha 阶段，也已经是极为优秀的开源浏览器）——期间还出了点趣事，小氯卸载 Arc 后想着注销 Arc 账号，结果 Arc 账号只能在 Arc 中注销，没办法只好把 Arc 下了回来。</p>
<p>现在在小氯的 MacBook 上，除了自带的一堆之外，闭源的软件大概有：</p>
<ul>
<li>VX、腾讯会议：被逼无奈。</li>
<li>Obsidian：小氯很希望它有一天能开源，但是这即使发生，恐怕也不会是最近的事情。请看<a href="/obsidian-and-open-source/">这里</a>。</li>
<li>Raycast：目前没找到什么开源替代品。可能 Hammerspoon 可以，但是似乎做不到 Raycast 这么好，还得写一堆 Lua 脚本。</li>
<li>iShot Pro：全能截图软件，小氯另一个有终身会员的软件。目前没有更换的想法。</li>
<li>Typora：现在用得不多，大部分时候拿来当临时记事本，以及导出好看的 PDF。</li>
<li>iRightMenu：一个右键助手。目前似乎可以用 <a href="https://github.com/wflixu/RClick">RClick</a> 做替代，但是后者还没有足够的功能。</li>
<li>Lark（飞书）：用得不多，主要靠手机接通知。留下的原因是有些操作必须在桌面端进行，不知道飞书为什么要这么设计。</li>
</ul>
<p>其实说实话，里面最容易替代的应该是飞书。小氯目前使用飞书主要是借助其邮件助手和 Webhook 来接通知（比如说 DDNS，Twikoo 评论等），理论上来说后者可以使用一个自部署的 Webhook 服务器进行替代，但是要想做到和飞书一样或者接近的丰富 JSON 和可视化编辑器，恐怕还是有点困难。其实对小氯来说，对于这种「通知性」的消息，最好的方法就是和 IM（即时通讯）软件集成——当然不是 VX 或者 QQ，更不是 Telegram，而是 Matrix（和 Jami 集成确实难了点）。不过目前 Matrix 的生态还不太完善，Matrix Bot 也远不如 TG Bot 那样成熟。此外，Ntfy 和 Bark 也是非常优秀的选择。不过小氯其实更喜欢 Ntfy，虽然在 iOS 上不太原生。</p>
<p>小氯的最终目标是全面转向开源和本地化，需要同步和网络的（个人用途软件）就采用自托管。小氯将其称之为「与互联网脱轨」。曾经小氯对互联网一无所知，处于现实意义上的脱轨状态；后来是热烈地投入互联网的怀抱，不管不顾；现在，小氯只想保持最小程度的连接，守住自己在数字世界的一方净土。</p>
<p>当然，小氯喜欢开源，是个 FOSS 爱好者（之前说的「FOSS 主义者」可能绝对了点？），不意味着小氯就要求自己的任何一个数字部件都要开源——如果我们拿着客体科学的钻牛角尖的精神一直往下挖，我们可以创造无穷无尽的需求：从操作系统开始吧（这已经很底层了），开源的操作系统非常常见，最典型的代表就是庞大的 Linux Distro 家族；再往下，固件，也就是 BIOS 和 UEFI 之类的东西，我们也有开源替代品，例如 Coreboot；继续，主板设计，比如说 PCB 布局之类的东西，小氯记得 KiCad 有这方面的设计；再往下，处理器，甚至是指令集，我们也有 RISC-V 可以和 x86-64、ARM 分庭抗礼（尽管小氯还没见过任何使用这个指令集的消费级计算机）。</p>
<p>我们还可以继续深挖吗？可以，但是这就不是小氯的专业（准确来说是专业的一半）——计算机科学与技术擅长的领域了，而是牢无（电子工程系）的专长。据小氯粗浅的了解，再往下的部分可能是晶体管布局，这东西有强专利性，虽然据说 Google 和 SkyWater Technology 合作过开源 PDK，但是目前还没见过完全开源的晶体管设计工艺。我们甚至还可以继续：制造工艺、物理材料和光刻机之类的设备，至少就目前人类的认知，这些东西根本不可能开源。</p>
<p>对于小氯来说，虽然一台 100% 开源的 PC 非常酷，但是使用的机会成本实在太大了，这不符合小氯专业的另一半（金融学）。小氯将来最多到达固件的级别就可以了，咱也不是钻牛角尖的人。</p>
<h2 id="next-gen-information-browser">Next-Gen Information Browser?</h2>
<p>如各位所见，这个标题是 <a href="https://follow.is">Follow</a> 的口号，字面意思是「下一代信息浏览器」。但是如果要我来翻译，我会翻译为「面向未来的信息聚合系统」。</p>
<p>把「Next-Gen」翻译为「面向未来」是小氯的习惯，容我解释一二：如果是「下一代」，那么下下一代呢？下下下一代呢？子子孙孙无穷匮也。但是「面向未来」不一样，只要开发者能够保持积极的开发、维护和创新（有的时候甚至是完全的重构，也不知道这种情况下产品还能不能算原来的那个，忒修斯之船了属于是），那么我们似乎可以用到海枯石烂。当然，这只是个翻译问题，最终能否在未来相当长的时间内不落伍于时代还是要看软件本身的素质和社群的活跃度。</p>
<p>那么「信息聚合系统」呢？</p>
<p>「信息」自不必说，「系统」是指一套完整的、自洽的、内部交互的、带有可使用 API 接口的工具和工作流程。至于「聚合」，字面意义上说，它和「浏览」是两个不同层次的事情：「聚合」是一个事实性的功能，亦即使得不同的信源能够统一地归并到和显示在同一个地方；而「浏览」是人类的动作，就是「看」，准确来说，快速、粗略、初步地看。在英语中，browse 也有随意地、无目的地看的意思，一般网页会使用这个动词。而浏览时或者之后还会有更进一步的动作，例如批注、整理、消化、归档和应用等。但是显而易见，在这个信息获取的流程中，「聚合」是一个基础性的流程。尽管这不是一个 BREAKING CHANGE，但是确实是一个提高效率的好手段——毕竟如果等待我们获取的信息分散在太多的角落，记起来确实麻烦。人类的第一大脑利用得普遍不太充分，不然也不会费这么大劲折腾第二大脑。</p>
<hr>
<p>小氯一直在使用一个软件：<a href="https://omnivore.app">Omnivore</a>。Omnivore，杂食者，简单来说是一个开源、全能、跨平台的稍后读（Read-It-Later）软件，或者也可以叫网页剪藏器。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>不过，Omnivore 的功能不止于此，其还有一些其他的功能，包括批注、Obsidian / Logseq 联动等，甚至还有 RSS 阅读——准确来说，是 Subscription，不只是 RSS。当然，Newsletter 似乎还不行。</p>
<p>小氯十分欢喜 Omnivore，除了还不能省力地自托管，Omnivore 几乎就是小氯理想的 RIL 软件。但是爱折腾的小氯也不止一次想过，Omnivore 能否成为一个理想的信息聚合系统。前面说，小氯希望和互联网脱轨，这也算是一种信息层面的脱轨吧——一个自我保护性的信息茧房。</p>
<p>所以，我们——或者还是不要随便代表大家了吧，小氯，平时的「信息聚合」到底有哪些要素？</p>
<p>不难归纳得出以下方面：</p>
<ul>
<li>RSS / Atom / JSON Feed，或者统称为「非交互式订阅」。其中 JSON Feed 还没见过，据说是个比较现代化的东西。此外 RSS3 好像也和 RSS 不一样，理论上来说应该单列的。</li>
<li>Newsletter，或者称为「交互式订阅」。一般 Newsletter 都是通过邮件分发的，当然也可以通过 Webhook 和 Bot 一类的方式。</li>
<li>任何类型的我觉得有价值、需要保存、一会儿去读（<del>也可能是永远不读</del>）的网页内容。可以是「有些趣味」的消遣内容，可以是发现里面有新奇东西的 FYI，可以是自己正好需要的 step-by-step tutorial，可以是看了第一句就感觉不简单的深度好文。当然，也可以是单纯希望给文章存个档——虽然说我们有其他的方式，例如一些扩展可以直接把整个页面保存为 Markdown 甚至完整的 HTML，并且小氯不推荐大家当 browse 方面的数字仓鼠。</li>
</ul>
<p>如果要实现无缝聚合，其实现无非就是以其中一种为主要，例如把所有东西都变成 RSS 或者 JSON Feed 或者这类的东西（但是小氯觉得这样很难做到「剪藏」），或者把所有东西都发到邮箱里（这个还算可行）。无论使用哪种方式，都相当繁琐，而且很难做到统一且良好的体验。所以说一个退一步海阔天空的方式应该还是接受一定的缝合，但是如果需要后续进一步的消化处理的话，还需要有一个统一的底层结构，这不是什么容易做到的事情。</p>
<p>其实如果要说现在的各种产品中，最符合小氯要求的，应该还是 Follow。Follow 最近刚刚进入 Beta，加了一堆新功能，其中包括收件箱——你可以创建一个 <code>xxx@follow.re</code> 这样的邮箱（不知道只能创建一个还是可以有很多个）接收邮件，当作 Newsletter 使用非常合适（估计会有人拿来接码，小氯不提倡这种行为）。Follow 甚至显示可以接收 Webhook，不过 <a href="https://diygod.cc">DIYgod</a> 只在 Wiki 页面写了个 TODO，估计是还在开发中吧。此外 Follow 也搞起了多软件联动，包括 Readwise、Instapaper、Eagle、Omnivore 和 Obsidian 等软件都有集成，只不过小氯还没试过。</p>
<p>目前来看 Follow 还是很有潜力成为一个合适的 All in One 信息聚合系统的，但是至少在一段时间内，小氯并不考虑将 Follow 作为主要的信息聚合系统。一方面，Follow 还没有一个完善的移动端（目前的说法是还在做，但是这会怎么进行同步呢？）；另一方面，Follow 缺少一个书签或者是网页剪藏功能，而这是小氯所必须的。最重要的，据小氯所知，Follow 需要一个账号。尽管这在 Follow 的特殊条件下是可以理解的，而且 Follow 的轻社交也是个很有意思的设计，但是小氯只希望安安静静地读点东西，没有任何人能闯进我的书房。</p>
<h2 id="如果生命只剩三天">如果生命只剩三天</h2>
<p>这周上马原（马克思主义基本原理）的时候，老师向我们提了一个问题：如果你的生命只剩下了几天，例如说三天，你会用剩下的时间做什么？</p>
<p>这个问题涉及到对生命意义最本源的探讨，这是古往今来的人类群星们都在认真思考的问题。但是对小氯酱这只对哲学几乎没什么认识的<del>元素娘</del>原子而言，小氯只相信第一感觉。</p>
<p>所以，小氯的第一反应是：<strong>回家去吧</strong>。</p>
<p>不管怎么样，编一个合适的理由，尽快买好回去的车票——飞机票如果更快也行，这时候钱早就不重要了。在路上回顾一下，这十几二十年的人生究竟是怎样的。再看一看小县城的落日，吃一次妈妈做的菜，陪外公外婆散散步，睡一次自己从小到大躺惯了的床。在最后一个晚上，假装买了那趟十几个小时的卧铺，告诉家人已经准备启程回北京，然后悄悄找一个僻静而美丽的角落，在北方秋天萧瑟的晚风中，感受气流穿透自己的身体和灵魂，看着自己用惯了的躯体化为原子和微粒，投身苍穹，万物长拥。</p>
<p>……上面的场景当然是虚幻而矫情的。但是小氯在想到这个问题时，甚至都没有分哪怕是一点思绪给生活中的其他人，或者自己平时喜欢的任何事。满脑子只想着，回去见家人最后一面，以及如何合理地将他们蒙在鼓里。</p>
<p><strong>第一感觉不会欺骗你</strong>。由此可见，家人和亲情在小氯的生命中，究竟占有怎样的地位。</p>
<p>按照星座而言，小氯是巨蟹座，而巨蟹座的很大特点就是恋家。不过小氯一向不信星座的说法，而宁可解释为一种在特定文化氛围和生活环境下的强烈心理依赖。如<a href="/weekly-8/">从前所说</a>，小氯有一个自认为非常幸福的原生家庭，而在小氯的成长中，家人一直起到了几乎是绝对的支柱作用，直到现在都是这样。遇到自己完全拿不定主意的问题，小氯的第一反应永远是去问问自己的家人；而任何有趣的日常或者大好的消息，小氯第一个分享的也不会是别人。</p>
<p>写到这，小氯有点疲惫，不自觉地抬起头活动了下颈部，然后视线就撞上了书架上摆着的全家福——那是高三那年过年时拍的。我们穿着喜庆的红色衣服，在明亮的灯光下，笑得无比灿烂和幸福。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>若世上有神明，我向您祈愿，愿我们阖家团圆，平安喜乐，天长地久。</p>
</blockquote>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>严格来说两者并不一样，你只打一个书签存起来也算是 RIL，用 Save Page WE 这样的插件把网页变成一个完整的自包含 HTML 也算是网页剪藏。小氯一般在两个场景下使用这个功能：遇到一篇希望日后读的文章，或者是遇到了容易消失或者希望保存的文章。当然，二者有重叠。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Obsidian与开源</title><link>https://chlor.me/obsidian-and-open-source/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/obsidian-and-open-source/</guid><category>Obsidian</category><category>开源</category><category>批判性思维</category><description>本文探讨了Obsidian这款个人知识管理软件的开源问题。Obsidian是一款优秀的笔记软件，但其闭源特性让一些FOSS支持者感到顾虑。文章从Obsidian社区对开源的激烈讨论入手，详尽且具体地分析了开源对收入、隐私、安全性、开发效率、社区管理、知识产权和法律等方面的影响，同时还涉及到实质性开源，Obsidian与一些闭源产品及团队的本质区别，开源与源代码公共可见等概念的区别等问题。文章认为先开源部分核心组件是好的实践，同时强调开源与否是Obsidian团队的自由。文章认为开源将具有重要的象征意义，并表达了对Obsidian开源的期望。文章通过理性而详尽的分析，表达了作者对开源的深入思考和对Obsidian未来的期待。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/obsidian-and-open-source-cover.webp" alt="Obsidian与开源" />
        </figure>
        <p>各位老友们好，我是 Chlorine。鸽了许久的一篇文章，双手奉上。</p>
<p>本文属于对一个话题比较集中的探讨，因此被我归到了尘封许久的「小氯说」系列，大家当个杂文看看即可。</p>
<h2 id="前言">前言</h2>
<p>Obsidian，黑曜石，自然界中最锋利的岩石之一（黑曜石碎片比手术刀锋利 400 倍——这个数字来自小氯看过的一本野外生存手册，可能有夸张的成分）。曾经有人提到，Obsidian 这个名字让他们联想到《三体》中用来压平雪浪纸的黑曜石板（出自云天明讲的那三个故事）。虽然小氯在初中时几乎就能把《三体》倒背如流，但还真没往这方面想。这确实是一个很巧妙的联想。</p>
<p>有点跑题了，回来。相信能看到这个博客的老友多多少少都了解 Obsidian 这个神奇的软件，以及其在个人知识管理（PKM）领域的地位。如果答案是否定的，您可以先把这篇文章放到某个不会很容易地忘记的地方，然后前往 <a href="https://obsidian.md">Obsidian 的官方网站</a>和 <a href="https://forum-zh.obsidian.md">Obsidian 官方中文论坛</a>，作一点简单的了解。如果您对 Markdown 和 PKM 感兴趣，小氯相信您会喜欢上 Obsidian 的。</p>
<p>毫无疑问，Obsidian 是一个极其优秀的笔记软件：本地化存储，开放格式，顺滑的 Markdown 编辑体验，丰富的插件生态，超高的颜值（尤其是有主题加持的情况下），热闹的社区环境……光别的不说，对于中文 Markdown 使用者而言，一个 Easy Typing 插件的编辑体验就可以薄纱从 VS Code 到 Typora 的各种 Markdown 编辑器。</p>
<p>但是就在 Obsidian 的这一众诱人的优点中，有一个非常醒目的事实：<strong>Obsidian 是闭源软件</strong>。这就像是 Obsidian 这朵玫瑰花上一根尖锐的刺，让许多 FOSS 主义者望而却步。</p>
<p>当然，一如刺对玫瑰花一般，闭源对于 Obsidian（或者说，Obsidian 的开发团队）实际上是一个（在他们的看法中）在某些方面有用的特性——至少 Silver（Erica Xu）和 Licat（Shida Li）等 Obsidian 团队的核心成员已经不止一次地表达过这个观点，不管是在官方论坛还是别的什么地方。</p>
<h2 id="一个-thread">一个 Thread</h2>
<p>我们说过，Obsidian 有一个极为庞大的社区，即使在其年轻时（发展初期）也是如此。人一多，就会有不同的观点，尤其是开不开源这种讨论度极高的话题。在 Obsidian 的<a href="https://forum.obsidian.md">官方论坛</a>（不是官方中文论坛）上，有一个非常显眼的 thread<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，专门讨论这个问题：<a href="https://forum.obsidian.md/t/open-sourcing-of-obsidian">Open Sourcing of Obsidian - Meta - Obsidian Forum</a>。</p>
<p>这个 thread 的总回复数达到了将近 300 条，或许是 Obsidian 论坛（English / 简体中文）最多的。讨论开始于大致四年前，那时 Obsidian 还非常年轻，如果我了解得没错，甚至还没有即时渲染；而其最后的活跃时间（截至我敲下这行字），是两天前。管理员甚至设置了一个限制：一天只能有一条回复。</p>
<p>由此可见，这条讨论的关注度高到了什么程度。小氯花了三个星期的时间，断断续续地看完了这个 thread，作为一个英语的外族语者，这是一个极其费力的工作。</p>
<p>老实说，这个线程有很多高质量的讨论，但是也充斥着许多无意义的重复、不明就里的晦涩语句、毫无根据的暴论甚至是不友好的争吵和指责。而且，到最后时，小氯感觉自己浪费了大量的时间，因为事实上能说的观点就那么多，到最后其实就是在翻来覆去地烙饼。</p>
<p>同时，很显然，Obsidian 团队即便再有耐心，面对这么多讨论也会不胜其烦。<a href="https://forum.obsidian.md/u/ryanjamurphy">@ryanjamurphy</a> 甚至直接来了一句：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Logseq is open source. Bye!</p>
</blockquote>
<p>能看出来是真的很不想继续说了。也确实，小氯这个闲人看了这么多回复都感觉很累了，何况是还有开发工作的 Obsidian 团队呢。</p>
<p>——那既然我们早就讲不出什么新的东西了，小氯为什么还要在这里重复呢？</p>
<p>很抱歉，小氯酱也在想这个问题。写长文（指时间跨度和文章长度）的时候常常遇到这种问题，写着写着都要忘了自己为什么要写了。</p>
<h2 id="一点声明">一点声明</h2>
<p>如果要用一篇文章把小氯对于开源、自由软件这些概念的看法讲完，那是不可能的——想想看《大教堂与集市》写了多长，即使小氯现在的开源阅历还极其浅薄。所以小氯做了一个决定：<strong>本文只是一个带有发散的「就事论事」</strong>。至于以后更多的思考，请容小氯留到以后再写。</p>
<p>同时，本文<strong>不是任何形式的谴责或者批评</strong>，但是的确包括很多分析和批判（这里的批判并不是日常中的意思，而是接近于哲学领域的「批判」或者是《政治经济学批判》中的「批判」——当然我不是说我写了篇哲学文章，小氯还没那个水平）。Obsidian 是 Obsidian 团队的智力成果，最终是否开源也是 Obsidian 团队的自由。大家可以从最后的立场看出，如果 Obsidian 开源，小氯会非常高兴，但是如果不开源，小氯至多只会表示一定程度的遗憾。</p>
<h2 id="收入">收入？</h2>
<p>虽说 Obsidian 的使用许可堪称互联网善人，但是 Obsidian 的开发团队（Dynalist Inc.）毕竟是一家公司，考虑商业利益是很正常的事情。由于 Obsidian 似乎还没有公布任何形式的财报，我们可以大胆地设想和总结一下，Obsidian 到底有哪些收入来源。</p>
<p>目前为止，Obsidian 对个人完全免费，没有任何广告，没有接受融资，（按照开发团队的说法）不收集任何用户信息，自然也不会出售。假设这些说法都是可信的，那么其收入来源就是：</p>
<ul>
<li>Catalyst 个人许可证（Obsidian 的个人赞助者许可证）</li>
<li>商用许可证</li>
<li>Obsidian Sync 和 Obsidian Publish</li>
</ul>
<p>让我们思考一下，如果 Obsidian 转变为开源，这些收入会不会遇到什么影响。</p>
<p>首先的首先，First and foremost，需要澄清一件事：<strong>Free in free speech, not free in free beer</strong>. 开源软件、自由软件和完全免费的软件（gratis）完全是两回事。如果您认为 Obsidian 开源了就不能盈利，那小氯可能需要委婉地指出，您在这个领域缺少最基本的常识。</p>
<p>首先，Sync 和 Publish 应当不会有影响——或者至少不会有负面影响，因为它们本质上和 Obsidian 没有关系——前者是帮助你把一堆 Markdown 从一台设备搬运到另一台设备，后者是帮助你把一堆 Markdown 从本地搬运到公网。而且，目前 Obsidian 官方也没有对第三方同步方法做任何限制——不管是 Remotely Save，Remotely Sync 还是 Obsidian LiveSync。甚至可以说，如果 Obsidian Sync 和 Publish（特别是 Sync）开源，那么愿意用的人恐怕还会变多。至于发布，那更不用说。各位可以猜猜小氯的博客是用什么写的。</p>
<p>其次，Catalyst 很可能会不减反增。对于那些不关心 Obsidian 是否开源的人，Obsidian 开源与否不会影响他们的赞助决策（小氯相信，排斥 Obsidian 开源并且能拿出让自己长期信服的理由使得在 Obsidian 开源后放弃对 Obsidian 的支持或者是这方面的想法的人是极少的）；而对于 FOSS 软件的爱好者，Obsidian 开源绝对是一个非常大的 extra mile，会吸引许多本来还在犹豫观望的 FOSS 爱好者投入 Obsidian 的怀抱，而其中必然会有一部分人乐意以这种相当实际又带点情怀的方式向 Obsidian 的开发者们致意（或许也可能是 Sync 和 Publish？）。已知后者不但存在，而且数量并不少，因此我们有理由断定 Catalyst 的收入会增加——很可能还会有小氯的一份。</p>
<p>那么最后，就是商用许可证的问题了。小氯觉得，这个也并不是问题，您所需要的只是一个严格一些的开源许可证。可能有人会说，那如果有商业公司直接把代码拿走以逃避商业许可证的限制呢？你说得对，<strong>但是现在的 Obsidian 就能避免这个问题吗</strong>？就现在的情况而言，无论是商用却不购买许可，还是试图把 Obsidian 解包后自己做产品（这个涉及更复杂的法务问题），其难度并不比开源大多少。所以，我不认为这是一个足以支撑闭源的理由。</p>
<p>甚至我们也可以说，开源会帮助 Obsidian 省去某些费用。正如用户 <a href="https://forum.obsidian.md/u/EuriNaiz">@EuriNaiz</a> 说的，Obsidian 的论坛本身建立在 Discourse 上，而 Discourse 官方事实上为开源软件提供免费的托管服务……</p>
<p>综上所述，在会计学的层面来说，开源对 Obsidian 来说，至少不会有显性意义的收入减少。</p>
<p>那小氯能保证 Obsidian 开源就会生存得更好吗？不能，原因很简单，小氯不是神明或者先知。但是现在，我们也同样无法保证，或者至少是做出更多的肯定，Obsidian 闭源就会生存得更好。此外，小氯自认为从理性和逻辑的角度，以上论证没有明显的矛盾和错误。</p>
<h2 id="道德信任问题">道德信任问题</h2>
<p>这是个极其微妙的问题。毫无疑问，Obsidian 的开发团队在道德上是非常令人放心的，即使是因为隐私问题希望 Obsidian 开源的人大部分也不会否定这一点。</p>
<p>那让我们来分析一个问题吧：Obsidian 闭源的情况下当然也可以通过沙箱的方式保护隐私，但这么做是否意味着我们不信任 Obsidian 的开发团队？毕竟「我断掉了网络连接，因此你无法窃取并传回我的任何数据」和「我相信你不会窃取并传回我的任何数据」是两回事。那么 Obsidian 的独立审计是否足够可靠？我们依然可以怀疑，怀疑审计者，怀疑这次审计是否真的独立。那么开源条件下的社区审计呢？依然可以怀疑。怀疑的种子一旦种下，必然会在一个不太远的时间引发一场思想的雪崩，进而引发无穷无尽的麻烦。</p>
<p>小氯不想在这个问题上说太多，因为小氯也说不明白。同时，希望各位老友尽可能不要在讨论中涉及道德问题，这会引起许多的麻烦。</p>
<h2 id="开源--隐私性">开源 = 隐私性？</h2>
<p>如果 Obsidian 不开源，就不能保证隐私性了吗？</p>
<p>答案是否定的，开源是隐私的既不充分也不必要条件。</p>
<p>这其实涉及到一个非常关键的问题。我们说开源软件（这里我们不考虑那些源代码开放但是广为流传的二进制分发闭源的产品，例如 VS Code）一般在隐私方面都值得信任，其依据主要是由于其源代码开放，因此任何人都可以自行审查其中是否有不受欢迎的部分。<strong>但是，这虽然理论可行，但是在实践中显然门槛极高</strong>。且不说世界上绝大部分的人都是「赛博文盲」，别说看懂代码了，甚至就连电脑怎么用都是迷迷糊糊（当然，这样的人一般也不会为开源、隐私这些事情担忧）。世界上能够对（任何类型的）计算机科学知识有了解的人，恐怕千分之一都是乐观的估计。</p>
<p>而就算是计算机知识比较充足的用户，也不一定就谙熟项目所用的技术栈；就算是谙熟，那也不一定有兴趣去看。所以我们可以认为，在开源软件的用户中，很少有人有能力看懂且会去看项目的源代码。所以，项目审查的重担实际上就是落在极少几个热心且技术力高超的用户（假设有）以及社区的审查员肩上（这甚至还需要我们近乎无条件地信任他们）。一般来说，一个开源项目的代码数量都大得惊人，而人眼观察、静态运行和调试的能力毕竟是有限的。因此，很多情况下，开源的「隐私性」实际上很大程度依赖于开发者自己的道德和良心。但是就如<a href="/weekly-8#%E6%9C%80%E5%B0%8F%E5%8C%96%E4%BD%86%E5%BF%85%E8%A6%81%E7%9A%84%E7%9B%91%E7%AE%A1">我们曾经说过的</a>，在进行任何技术实践时，都应以最坏的恶意度测人心。因此，开源项目的隐私性保障<strong>在实践中</strong>其实处于一个奇怪的真空态。</p>
<p>即使是说开源开发者一般都是有很高自觉性的谦谦君子，但是也难保会不会有一些别有用心的人提交一些不那么受欢迎的 PR。孙哥与我分享过一个很离谱的案例：一位黑客依靠一些贡献在开源社区取得了很高的威望，然后 TA（我不知道其性别）向一个项目贡献了一些代码，似乎还向 Ubuntu 官方提出了 PR 来着。这段恶意代码如果扩散开，可以取得所有安装 Ubuntu 的电脑的 SSH 权限。然后最后被发现了，原因是一位大神发现自己电脑的 SSH 慢了 0.5 s（是的你没听错，0.5 s），于是起了疑心，一步一步把这个东西挖出来了……</p>
<p>而闭源也并不一定意味着毫无隐私可言。虽说曾见过一个非常激进的说法「任何闭源软件的隐私协议都可以简化成一句话：我们可以在适当的时候以任何方式收集你的任何信息，并不必为此承担任何责任」，但是确实存在一些对隐私非常尊重的闭源软件，这点是不可否认的。</p>
<p>而且，理论上来说，不管一个软件（在隐私性上）有多么面目可憎，只要我们能够完全断掉其互联网权限，那么就算它能把你去年这个时候的前天和朋友去逛超市时买了哪个品牌什么口味的饼干或者是你刚刚给妈妈打电话时用的是哪只手的哪个手指的哪个部分触碰了拨打按钮多少毫秒都偷出来，那它也没办法让背后的服务提供者知道。我们还可以采取更激进（更保守？）的策略——直接把应用放到一个沙箱中，这样就算开发者手眼通天，能让应用搭上其他应用的网络连接，那也只能看着隔离环境干瞪眼。</p>
<p>我现在的 iPhone 就严格采取了这个方针——我的输入法是讯飞（因为 iPhone 的 Rime——仓输入法对我来说实在是太难用了），由于我现在 MacBook 已经全面采用了 Rime，因此我直接掐掉了讯飞的网络权限，你做好一个输入法的本分即可。此外，像 Light Player（我的本地音乐播放器）这样的应用，我也会在设置的 WLAN &amp; Cellular 选择 Don&rsquo;t Allow。</p>
<p>我们回来。总结一下，Obsidian 是否开源，其实和其（在实践中的）隐私保护没有什么必然的联系。如果想法不是要对开源项目贡献 PR，而只是希望其代码能被公开审查以确保隐私性（也就是后面会说的「源代码公共可见」），那么 Obsidian 的代码公开会增加一个理论上的、可以通过研究其内部机理而不是仅仅根据实验证据完全确保其隐私性的机会，小氯感觉这其实是一件象征意义大于实际的事。</p>
<p>此外，Obsidian 请了一个独立第三方做了一次审计，可以看<a href="https://obsidian.md/security">这里</a>。</p>
<h2 id="开源--安全性">开源 = 安全性？</h2>
<p>这里的「安全性」可以看作 bug 修复方面的事。如果 Obsidian 只公开代码而不允许社区协作，那么 bug 修复至少不会变慢（指的是投入相同的时间修复的 bug 多少。至于开源后的其他事情挤兑时间，那是另一个问题）。如果允许社区贡献，那甚至可能变快。虽然说重大的 bug 也很难被社区发现，但是小的 bug 不是这样的。退一步说，不论会不会变快，这条理由都不足以支撑闭源的决策。</p>
<h2 id="开源--格式开放性">开源 = 格式开放性？</h2>
<p>可能有老友会问：闭源软件会不会因为要留住用户而转型使用封闭格式？</p>
<p>如果您的第一想法是这个，那小氯觉得您弄混了「闭源软件」和「商业软件」。不是说这件事没可能发生，而是说闭源软件和格式封闭性的相关性远远不如商业软件和格式封闭性的相关性强。Obsidian 是闭源软件，但是正如上面所说的，从 Dynalist 现在的态度上来说，和完全免费分发也基本没什么两样。而且，Obsidian 的格式开放性，在各大 PKM 工具上，应该算是首屈一指的——文件就是 Markdown，名字就是名字，文件夹就是文件夹，白板麻烦一点，<code>.canvas</code> 文件，实际上是 <code>.json</code>（参见 JSONCanvas 标准）。至于里面的语法，除了 wiki 链接（你也可以用正规 Markdown 链接代替）和 GFM 语法（现在 GFM 的兼容性已经非常高了），都是最标准的 Markdown。至于那些您自己嵌入的 dataview、iframe……很抱歉，开发者没有哪怕一点的道德和法律义务对此负责。</p>
<p>而且，至少在 PKM / 笔记软件这个领域，开源和开放格式也不是什么深度绑定甚至能称为比较相关的东西：Logseq 现在正在积极开发非 Markdown 版本；思源笔记采用 <code>.sy</code>（类似 JSON）作为存储格式，在文件系统层面上其文件夹和文件结构毫无人类可读性；至于 Appflowy，Affine，Anytype 等一众 Notion 的优秀替代品更是不用提，有的甚至连开放格式的导入和导出都不完善（当然，这件事也的确棘手）。</p>
<p>如果真要说最极致的兼容和开放，那么只能用纯粹的原始 Markdown 乃至纯文本，或者去找 VS Code，或者 Vim，Emacs 这样古神级别的编辑器了——甚至它们都不行，小氯不认为您使用 Obsidian，Typora，VS Code 或者是 Vim 打开 Org Mode 的文件时会有什么好甚至是基本的体验。</p>
<h2 id="开源--持续开发维护">开源 = 持续开发维护？</h2>
<p>这很难说。无论是支持这个观点还是反对这个观点，都可以举出一大堆例子。我们只说一个很有趣的问题，就是开源是否会对风险灾备有好处。</p>
<p>具体来说：在这个 thread 创建时，Obsidian 应该还只有两位开发者，就是 Shida Li 和 Erica Xu。如果——我们说的是如果，Obsidian 遇到了非常严重的经济困难，不得不终止开发，或者被一个很有可能是 evil 的公司收购了，或者更严重的问题——例如开发者中的一位遭遇了不测，那么 Obsidian 在闭源状态下的开发是否会受到极大的、难以弥补的破坏？</p>
<p>对于第一个问题，这是个很现实的事情，举一个赛道极其相近的产品——Trilium。Trilium 在今年初宣布进入了维护模式，可以理解为开发已经基本停止了。然而 Trilium 并没有随风而逝，一个 community-driven 的项目——TriliumNext 接替了 Trilium 继续活跃地开发。而第二个问题典型的例子是 MySQL 和 MariaDB，OpenOffice 和 LibreOffice 等。如果 Obsidian 闭源，这个工作几乎是完全无法完成的。</p>
<p>一个非常常见的策略是：承诺在无法继续维护时开源。Erica 似乎也在这方面有一定的兴趣，其<a href="https://forum.obsidian.md/t/open-sourcing-of-obsidian/1515/11">原文</a>是：<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>In summary, I think having a privacy statement and a pledge to open up code access if Obsidian discontinues are good ideas, but open sourcing does not make sense given the current circumstances.</p>
</blockquote>
<p>对于最后一个问题……这是个非常严肃的事，尽管现在 Obsidian 的开发团队已经有了<a href="https://obsidian.md/about">九个人</a>（准确来说，八个人加一只猫），但是即使对于一个上百人的大团队，如果其主理人真的很不幸出了什么意外，除非这个团队是非中心化的，否则这真的是个非常棘手的问题。在这种情况下，开源至少不会造成什么损失，毕竟多几个对项目有一定了解的热心社区成员（可以肯定其存在）总归对恢复开放不会有任何负面影响。</p>
<h2 id="开源--开发效率">开源 = 开发效率？</h2>
<p>这当然也不一定。Licat 和 Silver 等核心成员对自己闭源的解释里面很重要的原因就是他们认为闭源对自己的开发效率更有利。</p>
<p>小氯既没办法证明也没办法否定这个说法，因为 Obsidian 的开发效率是怎样的只有团队本身才知道。我们通常认为，开源带来的社区协作效应（对于 Obsidian 这种已经有了良好社区环境的软件，这个效应可能会非常明显。Obsidian 庞大的插件可以作为一个案例，尽管其和本体开发性质不完全相同）会大大提高开发的效率和活力，但是这不是什么普遍规律。毕竟，Obsidian 社区中希望贡献的大多数人（尽管他们已经是极少数了），其水平恐怕都无法超过、达到甚至接近 Obsidian 核心团队的水平。或许 Obsidian 的团队还是希望有一个精英化的核心，这不是什么问题。</p>
<p>此外，在 thread 中有这么一条回复，提到了另一个广受赞誉的软件—— <a href="https://logseq.com">Logseq</a>。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>for everybody that wants an open source obsidian, check out logseq:</p>
<p><a href="https://github.com/logseq/logseq/">https://github.com/logseq/logseq/</a></p>
<p>I just started migrating. Its still in beta and early, but looks really promising and the community grows well. i love it so far. my guess is that because of them being os and having all the benefits that come with it, that they will surpass obsidian in the near future in popularity (fast dev cycles, pull requests, …)</p>
</blockquote>
<p>这位用户并不算是一个成功的预言家。虽然 Logseq 和 Obsidian 在功能上有很多相似之处，但是至少就小氯写下这段话的时候，Logseq 并没有超越 Obsidian，甚至在许多方面依然落后于 Obsidian。</p>
<p>于是，有人用 Logseq 和 Obsidian 比较，说明开源实际上对开发效率不利。这显然是个荒谬的说法，至少是个不正确的论证，原因很简单——没学好控制变量法。这只能说明，对于开发来说，开源并不是一个 100%  的 game changer，而不是开源没有好处甚至有害。</p>
<p>——当然，小氯并不是说 Logseq 或者别的各位喜欢的 Markdown 笔记软件不好。Logseq 也是非常优秀的笔记软件，不论是大纲笔记，还是 Markdown 编辑，还是社区生态都非常出色。希望各位不要有什么误解。</p>
<h2 id="开源--社区管理负担">开源 = 社区管理负担？</h2>
<p>很遗憾，这个事情必然存在，只是负担的大小。开源的确不是把代码扔到 GitHub 上就完事了，用 Silver 的话来说：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Doing open source right is a significant effort; it’s not just “putting code on GitHub”. There’s work in documentation, reply to issues, code reviews, help fellow developers get up to speed with the code base, etc. The cost to benefit ratio is very low for our small team of 2, and our plate is already full.</p>
</blockquote>
<p>那如果不接受 PR 这类的社区协作呢？这的确可以摆脱许多负担，虽然说可能还会有一些极端的 FOSSist 质问「为什么不接受」，但是小氯相信大部分的开发者都不会揪着这一件事喋喋不休。当然，严格来说，这并不是开源。</p>
<h2 id="开源--放弃知识产权">开源 = 放弃知识产权？</h2>
<p><strong>恕我直言，无稽之谈</strong>。Linus Torvalds 开源了 Linux（一个更准确的说法可能是 GNU/Linux）的内核代码，难道这种情况下 Linus 就不是 Linux 的创造者了吗？还是说有人能够明目张胆地宣称，里面的某段代码是他/她写的，而不是 Linus Torvalds 写的？除非你采用的是 Unlicense 许可证，否则这段代码的版权永远属于你。</p>
<p>甚至即使是 Unlicense，<strong>你也并没有失去你的版权</strong>，你只是赋予了所有人完全自由地使用代码的权利。没有任何强制力量可以让你放弃版权，任何力量都不行。即使你真的对版权一点兴趣也没有，你觉得把代码放进公共领域是最好的归宿，那你是一位值得尊敬的开发者，但是，你的道德权利或者说是署名权，将作为一个纪念品一般的事物伴随你一生。如果你真的不喜欢（虽然说小氯还没有见过这样的人），当它不存在即可，要求人们使用时不要署上你的名字。</p>
<p>至于知识产权给作者带来收入，或者说叫「知识变现」的问题，小氯上面讲得很清楚了。</p>
<h2 id="开源--法务问题">开源 = 法务问题？</h2>
<p>关于「不经过商用许可而商用产品」的问题，我们已经讲过了，此处只涉及「重新分发」一类的问题。</p>
<p>这个问题应当在世界各地都很普遍，只是程度不同。Licat 的原话是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>As a business, it’s really stressful if competitors can take your work, copy it and sell it as their own. Licenses don’t prevent copying, and lawsuits are expensive and time consuming.</p>
</blockquote>
<p>这件事确实难办——无论现在窃取 Obsidian 代码的难度如何（小氯没有试过（这是当然的 🤣），所以不能发表意见），开源确实会降低窃取代码的难度。就算是一扇有点单薄和破旧的门，也比没有门要好。所以说，在考虑要不要开源或者是源代码公开时，法务是一个值得考虑的风险，尽管其期望并不如许多人想象的那么高。</p>
<h2 id="可是-xxx-不也是闭源的吗">可是 XXX 不也是闭源的吗？</h2>
<p>小氯在线程中，不止一次看到这样或者与之相关的论述：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>XXX 软件在业界享有盛誉，无数人都在使用它，但是 XXX 是闭源的。</p>
</blockquote>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>各位有时间在这里争辩 Obsidian 的开源问题，那为什么不去问问 Google / Apple / MS / …… 他们为什么不开源？</p>
</blockquote>
<p>前面一个论调的支持者甚至包括 Licat，其<a href="https://forum.obsidian.md/t/open-sourcing-of-obsidian/1515/39">原文</a>是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>The most popular, well designed, well tested, and well supported consumer applications are almost always close sourced:（下面的例子省略）</p>
</blockquote>
<p>我们分别回答两个问题。</p>
<p>许多（甚至大部分）在业界首屈一指的应用都是闭源的，但是这与 Obsidian 有什么关系呢？Microsoft Office，Google Drive，Adobe Photoshop，确实都是闭源的，但是它们和 Obsidian 的商业模式完全不一样。随便举几个例子：Microsoft Office 在任何情况下都需要支付一笔不菲的许可费用或者订阅费，Google Drive 是一个纯云端、订阅制的存储产品。即使是对这些例子而言，也并不意味着闭源就一定比开源要有很大的优势——对于 Google Drive 和 OneDrive，我们有 NextCloud 和 OwnCloud；对于 PS，我们有 GIMP；对于 MS Office，我们有 LibreOffice 和 OpenOffice，这种例子不一而足。而且，Licat 说的这个论据从头到尾都没有涉及 Obsidian 闭源是否会对绝对或者相对的功能表现构成影响，所以我实在是理解不了这能证明什么。</p>
<p>第二个问题，答案很明显：没用。我们说的这些产品都是由极其庞大的科技巨头开发的，Google，Microsoft，Meta，Apple，或者别的什么公司。它们是什么样的？数十亿上百亿美元的市值，庞大到冗杂的客户服务部门和资源多得离谱的市场营销部门，客户和开发者之间的沟通闭塞（至少我没见过哪家的 CTO 能在论坛里和用户如此推心置腹地交流）。最重要的是：<strong>利润高于一切</strong>。大公司是理性（rational）的，它们永远不会有什么善心。如果把你从头到尾卖个干干净净能给它们带来大于损失的利益，那它们才不会在乎你怎么想、愿不愿意。</p>
<p><strong>但是 Obsidian 不一样</strong>。这是一个规模不大的、锐意创新的、愿意和用户推心置腹交流的、愿意把营造社区生态作为自己的重大责任的、（在资金上完全，在扩展性上几乎完全，在宣传方面大部分）由社区驱动的、愿意真的尊重你的隐私的——「不作恶」的公司。</p>
<p>所以在这里讨论的理由依然是：我们认为 Obsidian 开源会对大家都很好，而且我们认为能够决定 Obsidian 未来前途的话事人真的会去听并且认真考虑（但是不一定采纳）我们的意见，所以会在这里这么说。这话听起来有点傲慢，但是这是小氯能想到的最好的表达。</p>
<h2 id="那你为什么不去用-xxx">那你为什么不去用 XXX？</h2>
<p>好问题。从一个听者的角度而言，这无疑是个很令人恼火的表达，但是仔细想想，我们在生活中是不是也一直在使用这样的表达？</p>
<p>回答问题：因为我们真的很喜欢 Obsidian，我们希望它开源，这样（在我们看来）对开发者和我们都更好（尽管动机大概率还是后者），而且我们认为这个问题还有可以争辩的空间，因此我们用自己宝贵的生命在这里敲下这些字符。That&rsquo;s it.</p>
<h2 id="实质性开源">实质性开源？</h2>
<p>小氯还见过这样的说法：只要你打开 Obsidian 的调试台（和浏览器的方法一样），查看 <code>app.js</code>，就可以看到 Obsidian 到底在做什么。所以 Obsidian「事实上是开源的」。</p>
<p>小氯对这个说法持保留态度。引用 Obsidian 官方论坛（引用）的一句评论：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>The code is minified/obfuscated/packed so most keys and words are replaced by numbers, one letter variables, self-calling functions etc (as it should for production code for performence reasons alone). So it would be little help to assess anything :wink: at most it can help debug stuff when things go wrong.</p>
</blockquote>
<p>这感觉有点像是现在的 Thino（以前叫 Obsidian Memos），如果你查看其 <code>main.js</code>，你可以看到这个插件到底在做什么；但是如果你希望从 <code>main.js</code> 中获取到一个完整的执行逻辑或者是 UML 图，或者是希望用其进行二次开发，那小氯祝您好运。这种 dist 化的代码虽然是可见的，但是几乎不具备任何人类可读性，这就意味着其很难用于公开和审查，更别提是协作、分叉之类的更进一步的开源开发活动。</p>
<p>所以，从这个意义上认为 Obsidian 是「开源」或者是「实质开源」的，似乎与开源这件事本身的含义已经有些违和了。或者把话说得更重一点：这就像是国内的某些云盘号称「不限速」，实际上在其他方面对免费用户的下载体验多加掣肘一样，只是一种无聊的文字游戏。</p>
<h2 id="不开源但是源代码公共可见">不开源，但是源代码公共可见？</h2>
<p>这里涉及一个更加微妙的问题，也是一个开发社区（很可能是从计算机科学诞生开始）争执到现在的问题。</p>
<p>首先让我们严格区分几个概念，这几个概念非常容易弄混：源代码可见软件，源代码公共可见软件，开源软件和自由软件。</p>
<p>TL; DR：其范围依次递减。</p>
<ul>
<li>源代码可见（source code available）：指的是对于一个<strong>特定的群体</strong>而言，其能够<strong>看到</strong>源代码——注意小氯的用词，特定群体。那么如果我只把代码给付费用户看行不行？可以，至少从条文上可以（各位应该知道小氯说的是哪个项目）。那只给开发团队看行不行？按照定义似乎可以，但是我们一般称其为<strong>闭源软件</strong>。</li>
<li>源代码公共可见（source code public available）：指的是对于<strong>所有人</strong>而言都可以看到源代码。但是如果希望进行贡献？或者是按照你的意愿增添一个功能？或者是做一个 bug fix？不保证可以。注意此处的「人」并不是指所有自然人，森林里的原始人当然是自然人，但其看不到源代码。当然，这是因为其不具备基本的技术条件，而不是我们从条款上禁止其访问源代码。</li>
<li>开源软件（open source）：看起来开源和源代码公共可见甚至是源代码可见是同义词，但是在计算机科学这么多年的发展中，开源的定义被大大收窄了：不仅需要源代码公共可见，而且需要允许社区参与，例如各种 PR 和 issue。可以简单地认为：<strong>开源= 源代码公共可见 + 社区协作</strong>。</li>
<li>自由软件（free）：Free in free speech, not free in free beer. 自由软件的范围最窄，不仅要求开源，连分发也必须自由。</li>
</ul>
<p>开源软件和自由软件的界限通常不甚清晰，因此常被统称为自由开源软件（Free and open source software，简称 FOSS）；而源代码公共可见和开源常常被混淆，这并不是一个很严谨的事情，尤其是在这个 thread 中。</p>
<p>显然，对于 Obsidian 的隐私问题而言，源代码公共可见就够了，同时这样也可以避免社区管理的压力；而开源可以更直接地收获社区的助力，但是同时也会有一些问题和负担。对小氯而言，前一个级别已经够了——虽然说小氯很愿意 contribute，但是目前来看，有心无力。</p>
<h2 id="先开源一部分核心组件">先开源一部分核心组件？</h2>
<p>这是个非常好的想法，而且很有可行性。虽说大部分的讨论主要还是纠结于 Obsidian 本体，但是仔细想想，Obsidian Sync 也不是什么特别令人放心的事情。E2EE 确实很具有隐私性，但是我们无法确保——抱歉，我又涉及道德问题了。</p>
<p>而且，先开源一部分核心组件的管理压力比一下子开源所有代码小得多，可以当作一种「试水」（尽管 Obsidian 已经开源了几个项目了）。社区也提出了一些看起来比较合理的开源 roadmap，小氯不在此细说了。</p>
<h2 id="总结">总结</h2>
<p>我们说了很多很多，如果让小氯酱概括下到底说了什么，无非就是连篇累牍的推理和论证，（对 Obsidian 来说）开源是什么，开源不是什么，什么是开源，以及其他相关的问题，等等。</p>
<p>社区对这个问题已经谈了太多太多。喜欢开源的人，会更多地关注开源软件相对于闭源软件的优势，并且更多地使用开源软件中最杰出的那一批来塑造自己的观念；喜欢闭源的人反之。这是一种先发的认知偏差。小氯是个 FOSS 主义者，但是在前面的论述中，小氯在尽力避免立场带来的不客观，希望做得不算太差。</p>
<p>最后，可能有老友会问：既然你说过，很大程度上 Obsidian 开源（源代码公开）的象征意义更大，那么象征意义就那么重要吗？</p>
<p>尽管说小氯前面似乎看起来很理性地分析了一堆，但是如果从一个用户、一个个人的角度，允许我使用感性，那么我的答案是：<strong>是的，对于我们，真的很重要</strong>。小氯可以这么说：如果 Obsidian 有一天真的开放源代码了，那么小氯很可能这辈子都不会更换笔记软件了。但是现在，小氯还是只能对着各位老友半开玩笑地说：「在我的电脑上任何个人使用的第三方软件都是开源的——Obsidian 是少数的例外，它用实力争得了这个位置。」</p>
<p>虽然说，是否开源是 Obsidian 团队的自由，并且他们已经明确表示在可预见未来内不会开源，但是小氯还是有那么一份有点不切实际的愿望或者说是幻想：希望有那么一天，能够看到 Obsidian 真正成为「Your Last Stop of PKM」，HN 的头版头条能够铺满这一「惊人的壮举」，以及，FOSS 主义者们以各种方式向这个堪称世界上最优秀的 PKM 软件之一的杰作献上自己的崇高敬意。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>thread 一般被翻译为「线程」，其实就是论坛里一个单独的讨论区或者叫讨论进程。和 Reddit 的 subreddit 之类的东西没什么区别。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>目前尚未找到 Obsidian 明确的官方说明。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>新域名（5）</title><link>https://chlor.me/new-domain-5/</link><pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/new-domain-5/</guid><category>域名</category><category>折腾</category><description>本文讲述了作者出于个人兴趣和实用考虑，又购买了一个新域名 `chlor.in`。作者通过 domain hack 探索了几个域名选项，包括 `xiao.lv`、`xiao.cl` 和 `chlori.ne`，但由于价格或已被注册等原因，最终选择了更短且便宜的 `chlor.in`。这个域名利用了氯元素的简写与印度的国家顶级域名 `.in` 相结合，既有创意又经济实惠。购买完成后，作者将该域名挂到了 CloudFlare 上，暂时未决定具体用途，可能是用于短链接或未来作为主要域名。</description><content:encoded><![CDATA[
        <p>没错，小氯又又又买了个域名（）</p>
<p>起因也很简单，就是小氯闲着没事对自己的 ID 做 domain hack，结果 hack 出来下面几个可选项：</p>
<ul>
<li><code>xiao.lv</code></li>
<li><code>xiao.cl</code></li>
<li><code>chlori.ne</code></li>
</ul>
<p>第一个对中文本族语者来说很好理解，就是小氯的拼音（<code>.lv</code> 是拉脱维亚的顶级域名），很可惜已经被注册了；第二个结合了拼音和元素符号（<code>.cl</code> 是智利的顶级域名）。其实小氯最喜欢的是第三个，更有 domain hacker 的味道（<code>.ne</code> 是尼日尔的顶级域名）。只不过当我试着查询 <code>.ne</code> 的价格时：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241021102742.avif" alt="数据来源：Afriregister" 
        class="mx-auto rounded-lg block" loading="lazy" width="700"  />
    
</figure></p>
<p>……把小氯卖了都不够。</p>
<p>然后小氯想到了另一个选择：<code>chlor.in</code>。</p>
<p>这个域名比上面的 <code>chlori.ne</code> 更短，而且也不会有什么歧义（chlor 就是 Chlorine 的简写，Chlorin 和 Chlorine 的读音几乎完全一样）。最重要的是：<strong>它便宜</strong>。Spaceship 上只需要 $5.18，不到 40 r。</p>
<p><code>.in</code> 实际上是印度的国家顶级域名（<del>干净又卫生呐</del>）。不过现在 Domain hack 这么流行，大家也基本不怎么在乎一个后缀是哪个国家的。比如说 LinkedIn 曾经用过 <code>linked.in</code>，开发大佬<a href="https://innei.in">拾一</a>的个人网站就是 <code>innei.in</code>。所以说小氯也并没有什么心理负担。</p>
<p>最终花费是 38 r 多，比市场汇率略高一点。依然挂到赛博活佛 CloudFlare 上。</p>
<p>小氯还没太想好用这个域名做什么。似乎可以作为主域名的短链接，或者是未来作为主要域名。先买来放着。<del>其实小氯眼馋这个域名已经很久了，今天才下定决心买下。</del></p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（10）：方寸之外</title><link>https://chlor.me/weekly-10/</link><pubDate>Sun, 20 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-10/</guid><category>周报</category><category>日常</category><category>博客</category><description>本文是作者周报的第十期。文章开头提到本期周报内容较少，作者计划多读书以拓展知识边界。接着，作者详细描述了本周的两场defense（答辩），包括学推计划的中期报告和奖学金答辩的准备和经历。意外的是，作者的手机掉进了马桶，引发了一系列的处理和反思，包括手机的应急处理和对生活中数字依赖的思考。文章还探讨了在缺失大量智能手机功能的生活状态下，作者反思了数字生活的必要性，并借助了“零基预算”的概念来审视数字工具的使用。最后，作者回答了关于博客的9个问题，涉及博客的起源、创作过程、动力维持、博客运营成本以及个人兴趣和未来计划等方面。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-10-cover.webp" alt="Ephemeralis-Weekly（10）：方寸之外" />
        </figure>
        <p>各位老友们好，我是 Chlorine。新的一期周报，双手奉上。</p>
<p>感觉最近可写的东西蛮少的，周报也越来越短了。看来应该再多读点书，拓展一下知识的边界了。Obsidian 的那篇文章还在写……到底还要鸽多久啊 qaq</p>
<p>同时，周报的标题与文章内容相关，但是小氯并不会对其关系做出详细解释。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第十期，日期范围为西历 2024 年 10 月 14 日至 10 月 20 日。祝食用愉快。</p>
<h2 id="week-of-defense">Week of Defense</h2>
<p>由于当今网络中一些小氯并不算喜欢的以中文谐音为方式的迷因，现在小氯通常不会使用「答辩」，而是使用「defense」。</p>
<p>小氯这周比较忙，有两场 defense，一场是学推计划的中期报告会，另一场是牢贡（经管）的奖学金答辩。相信老友们应该没什么兴趣听小氯讲学推计划的专业知识或者再做一场赛博奖学金 defense，所以咱们就长话短说吧。</p>
<p>学推的中期报告会很早就在通知了，然而小氯一直在摆烂，结果就是硬生生把中期报告拖到了离 DDL 一周以内。这下如果真不写就要趋势了，于是小氯只好咬着牙开始写（bian）。所幸也不需要写得太复杂，简单交代下项目进展就好。反正小氯没像那些大佬一样做海报，只是交一份报告。</p>
<p>而奖学金的 defense 相对复杂点，不过也就是传统的单人 pre 形式，类似面试。小氯成功在挑选 PPT 模板上花费了几个小时（选综 qaq），最终也是卡着 DDL 把 PPT 交上去了。</p>
<p>中期报告会和奖学金 defense 的时间很近，基本上是挨着的。小氯也没做什么太多的准备，熟悉了一下稿子，穿上正装就走了（小氯在做 defense 时喜欢穿正装，这不仅显得正式，而且可以大大强化战斗力，应该是心理效应 OωO）。</p>
<p>中期报告会比想象中简单很多。小氯几乎什么也没做（如上文所说，小氯没有选择做海报），主要是在给大佬们投票。最后也是很顺利地过了。</p>
<p>下面就是奖学金了。小氯自认为做 pre 的功夫非常到家，效果应该也是所有 defenser 中最好的一批。奈何一起参加的同学们都是中华超人，人家一点技巧也不讲，主打一个纯粹的力量美。算了，随缘吧 qaq</p>
<h2 id="前方高能">（前方高能）</h2>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>以下内容不适合在您以任何形式摄入任何对您生命维持或情感体验有益的实体时观看！</p>
    </div>
</div>
<p>事情是这样的。那天小氯还在准备报告会和奖学金 defense。由于高强度的体力和脑力劳动，小氯的身体和精神状态都不太稳定。写到一半，实在是太累了，小氯就回宿舍喝了口水，顺便去解了个手。</p>
<p>然后……</p>
<p>然后……</p>
<p>然后……小氯的 iPhone，就掉到了马桶里……</p>
<p>然后……小氯……无意识地用手把 iPhone 捞了出来……</p>
<p>啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊！（发出尖锐爆鸣）（冒气泡）（扩散）（光解）（形成自由基）（抱着小氢燃烧）（发出苍白色火焰）（液化）（疯狂流动）</p>
<p><del>小氢：你先去洗手啊！</del></p>
<p>如各位所见，小氯是有点洁癖的（<del>不然也不会形成次氯酸钠这种东西</del>），所以虽然实际上这个和掉到泥水里面差不了太多，但是小氯当场就红温了。</p>
<p>然后嘛，就是拿着酒精湿巾和湿巾反反复复地擦，然后把一切碰到的东西都消了一遍毒，然后洗了不下二十遍手……</p>
<p><del>期间小氯甚至差点把 84 消毒液倒到自己手上</del></p>
<p>然后小氯才想起一个严肃的问题：手机进水，这不是什么小事，而小氯刚才只顾着清洁，完全没注意这点。</p>
<p>然而小氯既没有大米也没有硅胶，因此暂时只能采取风扇加冷处理方式。</p>
<p>等了一晚上。第二天打开，似乎没事，但是充电时似乎不太对劲，比较慢。这说明充电口里可能有水。</p>
<p>不过此时小氯已经要去上 ODE 了，于是小氯斥巨资 30r 网购了一份硅胶干燥剂和自封袋，然后再次把手机关机。</p>
<p>回到宿舍后，干燥剂已经送到了。为了省钱，小氯买了一堆小包装。于是小氯戴上一次性手套，剪了一大堆小包装，做了一个填满一半的干燥袋，然后把手机包了几层，放了进去。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241019171008.avif" alt="大概是这样" title="大概是这样" 
        class="mx-auto rounded-lg block" loading="lazy" width="598"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        大概是这样
    </figcaption>
    
</figure></p>
<p>然后大概过了 48 个小时，小氯把手机拿了出来，然后就该如何用就如何用了。</p>
<p>目前来看似乎没遇到什么问题，除了投送 opus 的时候会失败，但是我怀疑这可能是牢果的 bug。</p>
<h2 id="live-without-a-phone">Live without a Phone?</h2>
<p>本节实际上有点标题党，更准确的说法是「Live almost without a Phone?」。</p>
<p>如前面所说，由于一次灾难性的意外，小氯的 iPhone 暂时无法使用了。于是小氯只能暂时使用自己的备用机。</p>
<p>小氯的备用机是什么情况呢？就是小氯以前的手机。配置倒是不低，但是在不用以后就开始卡顿，不知道为什么。手机里面没有手机卡，没有各种各样的软件（比如 B 站、饿了么、美团，就连我电动车的解锁软件都没有）。微信、输入法等都维持在能用就行的程度。于是小氯这个重度电子产品依赖就拿着这个手机过了好几天。</p>
<p>不方便吗？那是自然的。在离开 Wi-Fi 覆盖区域后，没有流量，上不了网，甚至电话都打不了，完全和现代通讯网络断绝联系；开电动车需要用钥匙拧，往往需要拧好几次才能打开；想点份外卖时发现没有外卖软件，有也没法登录，只好咬牙前去食堂排队；想看看邮件和 Twikoo 评论通知，然后想起来没有飞书，于是只好等到达预定地点后打开电脑；Fcitx5 打字体验实在是令人一言难尽……</p>
<p><strong>但是，小氯怎么样了吗？</strong></p>
<p>显然，答案是没有。经历了几天堪称互联网原始人的生活后，小氯似乎也并没有自挂东南枝（<del>为什么要用「似乎」？</del>），反而因为不能刷 B 站、时时刻刻看微信而精神清明了不少。</p>
<hr>
<p>在会计学中有一个概念，叫作「零基预算」（Zero-Based Budgeting，简称 ZBB）。其大概的思想就是：在新的预算周期，并不根据前一年或几年的预算来制定新的预算，而是从零开始，一项一项考查每一笔费用。</p>
<p>各位老友可以试想一下：如果为各位的数字生活做一个「零基预算」，且要求预算尽可能低，各位会选择留下什么？</p>
<p>现在至少在手机的层面，小氯已经有一定的认识了。小氯不在此展开对哪些功能必须保留或者建议保留的具体论述，但是有一点可以肯定——<strong>小氯实际需要的，比小氯从前以为自己需要的少得多</strong>。那些「德不配位」却依然食尽皇家千钟粟的软件和功能，或是一种「指不定哪天就用上了」的过度备灾，或是华而不实基本上只能起到自我陶醉作用的「工作流」，或是对低级、碎片化快感的贪恋。如今，也是时候拨乱反正、捧日柱天了。</p>
<p>——于是，在回到原本的 iPhone 之后，小氯光速对手机上的软件进行了大规模的断舍离。唯一逃脱掉的软件是 QQ，虽然说小氯对 QQ 没有任何形式的好感（比微信的印象还要负面）。</p>
<p>在未来，小氯可能会更多地做一些这样的 digital detox（姑且使用这个词），而且方式可能会更极端。这不是什么新奇的事情或者独特的哲学顿悟，只是一个<del>元素娘</del>原子终于明白了一点早应该明白的事情而已。</p>
<h2 id="关于园子的-9-个问题">关于园子的 9 个问题</h2>
<p>和上一期一样，这依然是一个问卷，来自 <a href="https://anotherdayu.com/2024/5962">Another Dayu</a>。</p>
<h3 id="简单介绍下自己或者你的博客">简单介绍下自己或者你的博客？</h3>
<p>「园子里的日光」，你可以叫它「园子」。互联网茫茫大海的一个小岛，一个渺小、平凡，但是又有温暖和故事的角落。</p>
<p>园子里住着这么一个智慧体，你可以称其为 Chlorine，或者是小氯，或者是小氯酱，或者是任何你觉得合适的变体。这是现实中的 Chlorine 在园子里的一个投影，或者是一个 speaker。你可以把小氯当成现实中的清华大学学生，也可以当成一只很萌的元素娘，也可以当成一个被捏成这样的人工智能，或者干脆就当成一个会讲故事的原子也行——随意。</p>
<p>小氯时不时会在园子里露个面，修剪一下长出的杂草，或者是小心翼翼地移栽一株培育好的新植物，或者是做一点装修的工作，或者是和宿管同志们一起改进一下紫荆公寓内的采光情况，或者是和食堂的师傅们一起研究下最近应该出什么新菜……更多的时候，只是坐在紫荆公寓阳光灿烂的公共空间，手边放着一杯刚刚泡好的茶或者果茶，随意地看看书，或者是写写代码，或者是发发呆。</p>
<p>尊敬的旅行者，如果您路过这座小岛，又恰好感到有些疲惫，不妨就在此处驻足停留一会儿吧。去找小氯喝一杯热茶，吃一些点心，听上一两个故事，然后再踏上自己的旅程。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>「柴门闻犬吠，风雪夜归人。」故事、热茶与点心，送给每一位路过的老友。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>把一路的风景，都静静地讲与你听。</p>
</blockquote>
<p>——《<a href="/about">关于</a>》</p>
</blockquote>
<h3 id="什么契机让你开始写博客">什么契机让你开始写博客？</h3>
<p>说来话长。</p>
<p>小氯第一个接触的独立博客是<a href="https://lillianwho.com">夜猫日记</a>（现名 Lillian Who）。在这之前，小氯甚至都不知道什么是独立博客。从这里，小氯知道了 Hugo，知道了 Gridea，知道了其他的一些东西。大概就是从那时开始，小氯觉得，有一个自己的 cyberspace，似乎是一件不错的事情。</p>
<p>然而，对于一个（在当时）计算机知识极度匮乏，并且还对博客的各方面有一定要求的用户，搭出一个自己喜欢的博客，简直难如登天。个中曲折，小氯不在此细说了。很幸运，最后小氯发现了 NotionNext，这个简易、精美且强大的框架。然后呢，从 NotionNext 到 Hugo，从 Hello Friend 到 Virgo 到 Blowfish 再到现在的 Efímero，小氯在装修园子这件事上一去不回。而在不断的折腾中，使用文字记录生活，在园子里种上一株又一株植物，似乎也成了生活的一部分。</p>
<p>「搭建博客」和「用文字公开地记录生活」是两个不同的概念。对小氯来说，是前者更先进入小氯的世界。</p>
<h3 id="你是如何完成创作的">你是如何完成创作的？</h3>
<p>大概分为以下步骤：</p>
<ol>
<li>想到一个话题，在手边任何可用的载体（例如 Memos，Apple 备忘录，微信文件传输助手，纸）上记一下。</li>
<li>在 Obsidian 新建一个文件，然后闲着没事就想这个话题，把一切能想到的东西都写到文件里面。</li>
<li>泡一壶果茶。</li>
<li>找一个完整的时间段，开始把碎片化的思维整理成完整的文字。</li>
<li>使用 Obsidian Quail 发布到 Quail。</li>
<li>使用 Python 脚本进行替换后复制到 Hugo 文件夹。</li>
<li>Git Commit &amp; Push。</li>
<li>Vercel CI/CD。</li>
</ol>
<h3 id="运营博客的过程中是否有失去过动力">运营博客的过程中是否有失去过动力？</h3>
<p>首先请容小氯吐槽下，这个问题实在是太长了。其原问题为「运营博客的过程中是否有失去过动力？如果有，是为什么恢复的？如果没有，请问您又是如何保持创作的激情？」。</p>
<p>当然有，大体原因还是老生常谈的那些，就是太冷清了，没有什么反馈，动力自然会衰减。此外还有个原因，就是当时的小氯还没有对互联网上的自己和博客形成一个完整的身份认同和叙事塑造（听不懂也没关系，这个事情我暂时也说不太明白）。</p>
<p>至于如何恢复，很大可能是小氯性格使然。小氯是个内驱力非常强烈的人，一旦自己觉得一件事情有意义，那么不管周围环境如何，都会持之以恒地做。</p>
<h3 id="如何搭建博客以及运营博客每年需要投入的资金">如何搭建博客，以及运营博客每年需要投入的资金？</h3>
<p><del>第一步，选定一个框架；第二步，购买或者注册相应的资源平台；第三步，搭建好你的博客；第四步，开写。</del></p>
<p>小氯曾经写过一个系列《Obsidian + Hugo 建站教程》。然而由于内容早已跟不上园子发展的速度，而且实在是有洗稿的嫌疑，因此被我光明正大地鸽掉了。</p>
<p>目前为止，与园子直接相关的会计成本为 75r/a，即域名的资金。</p>
<h3 id="推荐-1-篇你博客中的文章并推荐一个你喜欢读的博客聊聊原因">推荐 1 篇你博客中的文章，并推荐一个你喜欢读的博客，聊聊原因。</h3>
<p>小氯没觉得有哪篇文章写得特别好的，如果一定要推荐，那还是<a href="/weekly-8/">这篇周报</a>吧。</p>
<p>小氯有很多「喜欢去」的博客，但是「喜欢去」和「喜欢读」并不完全一样。而且，「博客」和「个人网站」和「个人文字作品展示网站」和其他的许多概念并不是一回事。举一个非常有名的例子：阮一峰老师的博客。小氯不清楚阮一峰老师过去的博客是什么样的，但是至少就现在而言，阮老师的博客更像是一本<strong>电子杂志</strong>。你可以从阮老师每周一更的周刊中获取到许多有用的信息，也能感受到阮老师丰富的知识、广博的阅历和编写周刊的用心认真，也偶尔可以从一些字句中窥见阮老师的思想和好恶。<strong>但是，你不能从周刊中看出来，阮老师具体是一个什么样的人</strong>。在小氯看来，这实在是太正常了，因为，就如<a href="https://www.geedea.pro">极客死亡计划</a>的作者 Eltrac 写下的：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我和「极客死亡计划」更像是创作者和作品的关系，作品本身尽管会反映作者的个性，但并不会明目张胆地把自己整个人写满在自己的创作上（就算是畅销书，书页里也只有一句话的作者简介）。所以，关于我是什么样的人，在这里不会多说，如果你感兴趣，我希望你能读一读我写的东西。</p>
</blockquote>
<p>偏向「文字作品集」的个人网站，会更多地致力于让你通过文字，了解创作者的思想、见地和情感，创作者本身只是一个（甚至有时候无关紧要的）信源；而偏向「个人博客」的个人网站，会更多地致力于让你了解创作者本身，文字只是其最主要的手段。当然，这些类型的网站并无高下之分，其界限也并不分明——世界上本就不存在什么绝对的分野。</p>
<p>就园子而言，小氯对其的定位更加偏向后者。我希望当老友们读着这些营养价值不高的文字的时候，真的感到就像有那么一只端着热茶、眉眼弯弯的小氯，坐在赛博空间里的你对面，用轻松随意的语气讲着一个一个故事。你能透过氤氲的雾气，看到对面人的一举一动。来的次数多了之后，你甚至能知道他/她/它喜欢什么颜色的衣服，到深夜几点时会满脸疲倦困得不能自已，在往紫荆园新鲜出炉的面包上抹同样新鲜的果酱时喜欢从哪一边开始仔仔细细地涂，听到哪一句名言会突然笑得不能自已，或者是突然开始正襟危坐，严肃地发表自己的看法——总而言之，就像一个生活中与你相知甚久、无比熟悉的老友一样。</p>
<p>当然，这需要无比生动的细节和高超的表现技巧。小氯自问暂时还做不到这样。</p>
<p>有点跑题了，咱们回来。如果要寻找一个小氯喜欢读（不是「喜欢去」）的「博客」，那这是个很难的事情：尽管小氯的拜访名单并不短，而且其中许多博客都非常优秀，但是如果你需要的是那种每次读完之后都有「须臾收卷复把酒，如见万里烟尘清」的快感或者是「Leave me thinking」的深沉的博客，很抱歉，小氯一时半会没能想到。</p>
<p>答这套卷时，小氯一直是凭借第一感觉在作答。既然一时半会没能想到，那么就证明还没有一个（至少是对小氯）堪称 silver bullet 的答案。更何况，「推荐博客」这种事，是非常严肃的，找一个并不完美的答案，是一个完美主义者无法接受的。</p>
<p>小氯知道，上面的理由用来为本小问空缺辩护并不足够充分，这里算是小氯强词夺理了吧。</p>
<h3 id="推荐-1-个近期喜欢的事物">推荐 1 个近期喜欢的事物？</h3>
<p>Rust！Cargo 真的很好用 www</p>
<h3 id="想做还没有做的事或想尝试还没有尝试的主题">想做还没有做的事，或想尝试还没有尝试的主题？</h3>
<p>Rust（正在学），Go，TypeScript，Vue，React，Next，Tauri，Kotlin，Swift，Dart，Lua，Python（认真学），Docker，Kubernetes，密码学，网络安全，区块链，去中心化技术，智能合约技术，西方哲学，系统科学（认真学），世界历史，马克思主义理论（正在学），西班牙语（认真学），传染病学和流行病学，危寄坟（复（yu）习），线 die（复（yu）习），离散数学（复（yu）习），数理统计（认真学）……</p>
<p>小氯是个什么都想学一点的杂食原子  OωO</p>
<h3 id="写任何你想写的东西">写任何你想写的东西。</h3>
<p>这个问题的完整表述是「写到这里，闭上你的眼睛，深呼吸几分钟，或是出去溜达一圈，然后回来写任何你想写的东西」。</p>
<p>……</p>
<p>本诗的创作部分求助了 AI。小氯的文学功底不够，因此如有文法不通、含义怪异、佶屈聱牙之处，烦请各位老友海涵。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Of vivid scenes, I cannot paint,<br>
nor sing with heaven’s grace.<br>
So I stitched with bits and numbers,<br>
weaving an absurd self—</p>
<p>lines knotted like thoughts,<br>
logic spiraling into echoes,<br>
a digital soliloquy unraveling,<br>
where reality fractures into fragments.</p>
<p>Here, I am a phantom of functions,<br>
a mosaic of misplaced syntax,<br>
my colors, zeros and ones—<br>
my voice, the hum of machines.</p>
</blockquote>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（9）：寒露清秋</title><link>https://chlor.me/weekly-9/</link><pubDate>Sun, 13 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-9/</guid><category>周报</category><category>博客</category><category>日常</category><description>本文是作者周报的第九期。文章开篇讲述了作者回京的曲折经历，突显了生活中的不可预见性。接着，作者描述了秋季的凉意，表现了对季节变迁的细腻感受。在健康问题上，作者求助于中医，分享了痛苦的喝药经历。同时讲述了自己周末生病和写论文的经历，并提出了战损反而能提高自己学习效率的有趣观点。作者还分享了博客 300 天的感受，讲述了通过沟通解冻 X 账号的经历，同时反思了自己中文写作时的奇特表达，认为这是一种有趣的文化融合现象。随后作者回答了独立博客自省问卷 15 题，表现了对博客运营的总结思考。最后作者表示本期没有哲学思考，因为自己关于 Obsidian 和开源的随笔还在书写中。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-9-cover.webp" alt="Ephemeralis-Weekly（9）：寒露清秋" />
        </figure>
        <p>各位老友们好，我是 Chlorine。新的一期周报，双手奉上。</p>
<p>本期和<a href="/weekly-8/">上一期</a>一样，都是以本周碎碎念为主，主打低质高量。<del>我甚至在想这种碎碎念合集要不干脆拆成日记得了</del>。</p>
<p>本期的标题没有任何特殊含义，单纯是一个时令的标记。也希望各位老友不要误以为下面的文章有什么诗意。OωO</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第九期，日期范围为西历 2024 年 10 月 7 日至 10 月 13 日。祝食用愉快。</p>
<h2 id="回京之旅">回京之旅</h2>
<p>小氯记得，在回家的路上和孙哥聊天时，有这么一段对话：</p>
<ul>
<li>小氯：您打算几号回北京啊？</li>
<li>孙哥：5 号，我票已经买好了。你呢？</li>
<li>小氯：我还没定好呢。</li>
<li>孙哥：？你还没买返程票就敢回来？</li>
<li>小氯：是的捏。（<code>眼神清澈的小氯酱.avif</code>）</li>
<li>孙哥：……你是真的勇。</li>
</ul>
<p>我原本没把这件事放在心上，直到我发现我买不到回去的票了。候补了将近十张，但是毫无结果。无奈之下只好先买了一程近站票，希望能补票到北京。</p>
<p>然后我从广播得知，由于列车运行压力实在是太大，暂时不能补票了。</p>
<p>喵的。</p>
<p>不死心的小氯去找了列车长。列车长倒是没有把小氯从车上扔下去玩星穹铁道，而是非常严肃地表示，如果能接受没有座位并且时时刻刻搬来搬去，可以留在车上，临近北京时大概率是可以补到票的。</p>
<p>最后小氯选择了留在车上。很幸运，最后补到票了（小氯当然不会违法乘车 awa）。只不过过程极其曲折。<del>然而丝毫没有影响小氯的心情，小氯甚至最后从圆明园骑自行车回了带清</del>。</p>
<h2 id="秋凉">秋凉</h2>
<p>周二是寒露，二十四节气之第十七。《月令七十二候集解》有言：「九月节，露气寒冷，将凝结也。」</p>
<p>体感上来说，早上一觉醒来（在高强度坐了一天火车后没有早八实在是一件令人欢喜的事），感觉自己的长袖睡衣有些冷，可能应该换棉质睡衣了。换之前，最好是把原本的睡衣彻底洗一下。此处第 N 次吐槽楼层公共洗衣机，总是有种奇怪的味道（<del>也不知道哪群大脑结构对现有模型提出实例性挑战的碳基生物在公共洗衣机里面洗袜子</del>），需要大量的衣物消毒液和衣物馨香剂。当然，如果太阳很好，衣服晒干后的味道是很好闻的。可惜寝室的中厅相对来说采光不是那么好，即使是夏天的正午也很难对衣服进行持续的暴晒。</p>
<p>……所以说小氯的小岛叫「园子里的日光」啊，因为小氯本就喜欢日光，尽管正午的日光似乎有些刺眼。</p>
<p>由于实在是感觉有点冷，因此中午去吃了碗涮羊肉（总花费 9 r，小氯酱的神奇消费能力），感觉暖和了些。</p>
<h2 id="喝药">喝药</h2>
<p>如各位老友所见，小氯的身体一向欠佳。在保持健康的生活习惯的同时，求助于传统医学的智慧也是很自然的想法。于是趁着国庆假期，父母带着小氯拜会了家乡一位颇有名望的中医。中医为小氯开了些便于携带的药，嘱咐小氯说：每日早晚各一次，每次一包。</p>
<p>不过这个一包，并不是大家可能以为的一袋，而是十几袋，简直就是一份中药学期末考试题。</p>
<p>至于味道……嗯，怎么说呢？</p>
<p>先略微偏个题。小氯虽然不太能吃辣或者吃甜（果茶一般都要少糖的，喜欢比较自然的味道），但是对于一些古怪的味道有很强的耐受力，比如苦（高中时经常嚼苦瓜败火）和酸（直接吃柠檬片）。而一些味道很怪的药，比如说汤药，也是用水化开后直接捏着鼻子送进去，然后喝一点果茶就没事了。</p>
<p><strong>……所以，各位老友应该能想到，让小氯都觉得难喝的药，其味道究竟有多么春风不度玉门关。</strong></p>
<p>而且，由于药的量累积起来并不少，且不容易在水中化开，而小氯的水杯容量不大，因此药的浓度极高，还会有大量的残留，需要反复继续加水后才能溶解干净。而这个过程每天需要反复两次，就……怎么说呢？小氯有一种被氧化<del>到坏掉</del>的感觉。</p>
<h2 id="战损版小氯">战损版小氯</h2>
<p>如各位老友所见，小氯的身体状况算不得乐观（<del>这句话已经说了多少次了？</del>）。而且小氯还有一个神奇的人物特质，在一切关键的时刻，必然发生战损。即将交论文的这个周末也不例外。</p>
<p>事情得从上面喝药说起。那天是周五，小氯课最多的一天，回来时已经是晚上七点左右了（如果是后八周，就是晚上九点了捏）。路上的风非常大，而小氯没有帽子，吹得头很疼。这时小氯已经感觉有些了不妙，毕竟伤风感冒对小氯来说简直是紫荆园的麻辣香锅——家常便饭。偏偏这时候小氯还做了一个非常离谱的决定：<strong>点一份冒菜当晚饭</strong>。</p>
<p>冒菜本来就是比较辣的食物，而小氯对辣的耐受力非常低。虽然小氯选了微辣并且在备注里反复强调「少放辣」，但是忙碌的店家显然没有时间去仔细照顾小氯的感受，于是我看着送来的一碗红色陷入了深深的思考。</p>
<p>最终小氯还是吃了，毕竟小氯睡得晚（尽管在大学生中算是非常早的），需要体力坚持到睡觉。直接结果是摄入了大量的水。</p>
<p>然后那天晚上小氯的精神就不太清醒，偏偏那天晚上，小氯还看到了一些令人精神状态极其不稳定的东西。浑浑噩噩了一晚上，论文一笔未动。眼看快到十点了，该喝药了。本来喝着也没什么大逝，结果……就在喝最后一口的时候，可能是小氯不慎把一小角塑料落到了杯子里，反正是有什么东西卡到了嗓子眼，然后……小氯就直接吐了，吐得昏天黑地。</p>
<p>吐完之后小氯的难受程度到达了顶峰，有一种天日昭昭（比阳还阳）的感觉。小氯不得不停掉了准备听的英语听力（<del>不要为你的懒惰找借口</del>），麻溜滚去睡觉。由于担心感冒药和中药冲突（尽管后者已经被吐了一大部分了），小氯也没敢吃感冒药。</p>
<p>然后由于小氯没定闹钟，因此睡了个好觉。挣扎着起来洗漱好，喝了一遍药，再洗一洗衣服，就马上要去吃饭了。由于实在是太难受，小氯也没敢吃什么重口味的东西，一碗阳春面了事。不过实际上倒也不算什么特别大的病，应该就是重感冒级别的，浑身各处疼一些，头晕而已。</p>
<p>下午回来，某个占了公共空间好几天打游戏的虫豸终于走了，于是小氯火速带着一大壶热水前去宣誓主权，顺便开始痛苦地写论文。</p>
<p>晚饭时间去了紫荆三楼，去了所谓的「营养轻食区」一探究竟，结果很惊喜地发现好吃哒非常丰富，遂随手点了一碗鸡汤米粉（小时候当小氯生病时，小氯的外婆经常给小氯熬鸡汤）和一个「七彩燕麦包」。</p>
<p>回去继续写。结果您猜怎么着？嘿！还没到十点，论文写完了！</p>
<p>回想一下这一天，饮食健康，锻炼充分，喝了很多热水，学习效率也蛮高的。</p>
<p>难道战损版小氯才是最萌的吗？（笑哭）</p>
<h2 id="300-天">300 天</h2>
<p>博客一百天时，小氯专门<a href="/blog-100-days">写了篇文章纪念</a>；博客两百天时，小氯在<a href="/weekly-2/">当周的周报里提了一句</a>；到了博客三百天，小氯几乎连提都懒得提了。</p>
<p><del>那请问小氯酱现在在干什么呢？</del></p>
<p>之前忘记在哪听过一个奇怪的说法：很多节日和纪念日都是为了巧立名目去大吃一顿。那要是这么看，反反复复庆祝博客的各种纪念日，是不是也是为了在精神上让自己大吃一顿，告诉自己「天呐，居然已经这么久了，我真的好厉害啊」？</p>
<p><strong>不能说这种想法有错</strong>，只是小氯现在并不时常采用这种心态而已。一方面说，小氯确实很懒，自己的生日都懒得过，更别说在博客的纪念日搞什么奇奇怪怪的活动；另一方面说，在小氯看来，就现在小氯坚持的这点时间，真算不上有多长——就在小氯敲下这行字的前不久，才刚给<a href="https://laozhang.org">张叔</a>博客的十五周年发去贺电，而如果放大点看，这几百天可能只是小氯作为人类的生命的百分之一甚至更短，放在历史上更是微不足道——虽然说这几百天可能会在后世的史书上大书特书，但是除了 Web Archive 之外，又有谁还会记得，曾经有这么一只叫小氯的<del>元素娘</del>原子，在互联网的一个小角落，打理着一个小小的园子呢。</p>
<p>当然，我们现在做的一切，也并不是为了被历史铭记。历史的长河浩浩汤汤，其中最小的支流的最小的支流，就足够让园子中的植物朝露待日晞了。</p>
<p>所以……如果依然希望在精神上和身体上大吃一顿，小氯也不反对哦。OωO</p>
<h2 id="x-账号解冻">X 账号解冻</h2>
<p>小氯有一个 X 账号，是不知多久以前兴味使然注册的。只不过小氯并不喜欢 X，再加之 X 在国内由于一些问题难以正常使用，小氯就没管。</p>
<p>然后，忘记多久以前，小氯偶然想起这个账号，登录一看，发现被 suspend 了。这倒也正常，理由大家都懂。</p>
<p>然后，就在这周，当小氯再次看到做不了任何操作的 X 账号时，突然就感觉不太舒服。起码让我把这个账号注销了，就在这挂着算什么事。</p>
<p>去简单看了下 X 的帮助文档，发现可以发工单（我习惯这么叫）。于是我就发了个简单的工单，内容不太正式，大概是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>I&rsquo;ve had my account for some time but recently found it suspended. I just updated my profile some time ago and haven&rsquo;t been active in any other way, so this suspension seems like a mistake. I use a （此处略掉这个工具名称） due to my location, which might have triggered this. Could you please check on this for me? Thanks a lot!</p>
</blockquote>
<p>发送过去，等着。</p>
<p>这几天我时常去看 Gmail 收件箱，一直没有消息，还有点想抱怨牢马员工的效率太低了。然而今天我登录 X 一看，已经可以正常编辑 profile 了，这应该就是解冻了。<strong>所以说，沟通很多时候还是有用的。</strong></p>
<p>因为我平时分享日常都用 ActivityPub，所有现在我的 X 账号基本上是空的，也没注销，在那里放着。头像是一只 Q 版的小氯酱。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/chlorinechan-q.webp" alt="依然由豆包绘制" title="依然由豆包绘制" 
        class="mx-auto rounded-lg block" loading="lazy" width="324"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        依然由豆包绘制
    </figcaption>
    
</figure></p>
<p>还蛮喜欢这个图片的风格的，不过画得比较一般。或许需要找一位插画师约个稿？小氯的老友们中有很会画画的，但是风格和这个都不大一样。</p>
<h2 id="小氯的中文风格">小氯的中文风格</h2>
<p>有时候看一些我曾经写过的文字，会感觉语言风格有些奇怪。就拿前面一句很简单的话来说：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>在高强度坐了一天火车后没有早八实在是一件令人欢喜的事。</p>
</blockquote>
<p>这话怎么听都不像是地道的中文表达，带有明显的翻译腔，至少非常不口语化。然而事实是小氯是地道的中文本族语者，没有任何表达能力障碍，更没有用英语写 blog 然后翻译成中文（<del>真有那个水平就好了</del>）。</p>
<p>仔细想了想，似乎这个现象在小氯这里相当普遍。无论是时不时探头的长难句（中文的长难句相对来说没那么多，除非刻意生造），还是大量的名词化表达，抑或是奇怪的语序和用词，都给人一种<del>像路易十六一样</del>摸不着头脑的感觉。这种感觉在写 GitHub issue 时尤其明显。</p>
<p>这实在是有些令人费解，尤其是在考虑小氯还好好地住在国内，周围的语言环境基本也都是中文的。英文材料看得也不多，好多英语电子书还是堆在 To-Be-Read 列表里面。如果要说小氯的英文很好……至少小氯不敢如此自居，平时写英语邮件、issue 经常需要「帮帮我，GPT 先生」，口语更是一塌糊涂，去和外国小哥交流大部分时候都会把人搞成物理意义上的黑人问号（但是要说不好的话，高考英语 145+，CET-6 将近 680，似乎也算不得太差）。</p>
<p>如果一定要找原因，可能就是更多的实践性写作让小氯的思维方式和表达习惯多多少少带上了一些英语的色彩。小氯不认为这是件坏事，不过有时候面对着自己写出来 / 说出来的句子，也会忍俊不禁。有趣的跨文化融合现象，不是吗？</p>
<h2 id="独立博客自省问卷-15-题">独立博客自省问卷 15 题</h2>
<p>最近<a href="https://yayu.net">雅余大佬</a>发了个「独立博客自省问卷 15 题」，很多博友都在回答。那小氯也来答一下吧，<del>虽然说这样多少有点跟风的味道</del>。</p>
<p>这让人感觉有点像过去小氯刚有 QQ 时，空间经常有的问卷。只不过，现在是一群距离更远、更加陌生但是更加志同道合的人了。</p>
<h3 id="你的博客更新频率是多少">你的博客更新频率是多少？</h3>
<p>不一定，随缘。但是一般来说，一周不少于一次。种一株新的植物，讲一个新的故事，还要看时间吗？</p>
<h3 id="你的博客上次更新是什么时候-">你的博客上次更新是什么时候 ？</h3>
<p>这周，看<a href="/eh-where-is-my-button/">这里</a>。</p>
<h3 id="你的博客文章是原创的吗">你的博客文章是原创的吗？</h3>
<p>是的捏。小氯有时候会用到 AI 辅助（主要是聚合一些信息，以及快速了解一个不熟悉的概念），但是从不用 AI 写文章（来自一个创作者的观念和 Not By AI 运动的承诺）。至于转载，小氯不大懂这样做的意义所在。如果觉得一篇文章写得好，直接放一个推荐链接不行吗？</p>
<h3 id="你觉得自己的文章对他人有帮助吗">你觉得自己的文章对他人有帮助吗？</h3>
<p>难说，或许有点用，理性价值，实用价值或者是情绪价值。</p>
<h3 id="你上次换博客主题程序是什么时候">你上次换博客主题/程序是什么时候？</h3>
<p>忘记了……我查查我的博客年表……是 2024 年 6 月 25 日，大概是三个半月前。</p>
<h3 id="你上一次捣腾博客主题代码是什么时候">你上一次捣腾博客主题代码是什么时候？</h3>
<p><del>您猜我的主题是怎么改出来的？</del></p>
<p>上次……应该还是在上次，大概这周以内？</p>
<h3 id="你会对博客主题进行二次开发">你会对博客主题进行二次开发？</h3>
<p>……怎么说呢？如果这是道简答题，我的答案是肯定的，但是这是道选择题……</p>
<p>直接说吧。小氯现在的博客主题是基于<a href="https://www.ftls.xyz">恐咖兵糖</a>大佬开发的 Landscape 主题，而 Landscape 实际上是对 <a href="https://fuwari.vercel.app">Fuwari</a> 的 Hugo 复刻。小氯很喜欢 Fuwari，于是把 Landscape 叉了过来，并且按照自己的喜好加了一堆功能，包括但是不限于：</p>
<ul>
<li>Twikoo 评论</li>
<li>霞鹜文楷 Bright 字体和 Fira Code</li>
<li>Algolia Docsearch</li>
<li>多级导航栏</li>
<li>Fancybox 灯箱</li>
<li>Obsidian 风格的图片链接和 caption 渲染</li>
<li>KaTeX 数学渲染（未找到最佳方案）</li>
<li>AI 摘要（大嘘）</li>
<li>糖果特效</li>
<li>Shiki 高亮</li>
<li>代码一键复制</li>
<li>公告组件</li>
<li>ICP 备案信息</li>
<li>站点运行时间计数器</li>
<li>wowbook</li>
<li>友链</li>
<li>若干短代码（GitHub 等的仓库卡片，时间线组件，事件线组件，友链短代码，说说短代码，Alert……）</li>
<li>404 页面</li>
</ul>
<p>美化了：</p>
<ul>
<li>文章详情页（主要是边距）</li>
<li>移动端文章卡片样式</li>
<li>移动端 nav 弹出（未找到最佳方案）</li>
<li>侧边栏（主要是一点点组件图标）</li>
<li>一些 Markdown 样式（比如引用块）</li>
</ul>
<p>修复了 Swup 导致的一大堆问题，主要是各种 JavaScript 加载，比如说点击主题切换按钮不管用……</p>
<p>虽然说核心部分没有动什么大刀子，但是我觉得改到这个程度，大概已经可以算一个新主题了。我给它起了个名字，叫 Efímero（浮光），把 Landscape 的链接放到了关于页面。</p>
<h3 id="你多久打开自己博客自我陶醉一次">你多久打开自己博客自我陶醉一次？</h3>
<p>如果是打开博客……一天好几次。不过「自我陶醉」……好吧你说得对 qaq</p>
<h3 id="你近期对自己博客域名什么感受">你近期对自己博客域名什么感受？</h3>
<p>还好，我的博客域名是我的英文名。有点长，不过还行。如果可以的话，有点想搞一个 <code>xiao.lv</code> 或者是 <code>xiao.cl</code>（Cl 是氯的元素符号）。不过这样的域名显然不能备案。</p>
<p>此外我发现，<code>xl.me</code> 似乎是 available 的，而且价格非常正常。但是扔到购物车之后，再搜索就发现价格离谱了。不知道是不是 Spaceship 的 bug。</p>
<h3 id="你每天都会看网站的流量统计吗">你每天都会看网站的流量统计吗？</h3>
<p>什么是流量统计？（呆萌）</p>
<h3 id="你通过博客的广告赚到钱了吗">你通过博客的广告赚到钱了吗？</h3>
<p>没有广告，可见未来内应该也不会有。</p>
<p>从理性的角度看，园子的运营成本（指显性成本，也就是会计成本）只有一个域名的价格（可能还要算上为了保备案的服务器费用，但是这不算是园子的成本，因为没有它园子也能运行，放弃备案就是了），小氯再缺钱也没必要为了这点钱去污染园子的游览体验。就算就算是小氯想污染，就凭园子这点流量，也没有什么商家愿意在这里打广告，就像没人会在鲁滨逊的荒岛上拉横幅一样。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>没那个能力知道吗？——范志毅</p>
</blockquote>
<p>从感性的角度看，小氯也不希望园子沾染上这样的气息。世间没有桃源，但是在互联网的海洋里造一个近似的还是能做到的。</p>
<h3 id="你去浏览别人的博客网站主要为什么">你去浏览别人的博客/网站主要为什么？</h3>
<p>为了回访啊。</p>
<p>小氯偶尔也喜欢跳任意门（比如<a href="https://foreverblog.cn/go.html">十年之约的虫洞</a>和<a href="https://travellings.cn/go.html">开往</a>），去随机看一看互联网上其他的小岛。但是作为赛博社恐分子，小氯主要还是贯彻 P2P 社交。</p>
<h3 id="看到别人分享了一篇文章你打开第一反应是什么">看到别人分享了一篇文章，你打开第一反应是什么？</h3>
<p>还是看文章内容吧，尽管美观的主题和流畅的加载会给小氯以非常舒适的情感体验。</p>
<h3 id="你觉得博客哪方面更重要">你觉得博客哪方面更重要？</h3>
<p>这题我很想回答「内容」。很遗憾，尽管小氯确实觉得内容非常重要，但是倒腾了这么久的主题，很难说小氯最看重内容是真心实意的。</p>
<h3 id="近期通过写博客有哪些新收获">近期通过写博客有哪些新收获？</h3>
<p>让我想想……</p>
<p>题目中的四个选项，似乎除了「知识变现」之外都有——有认识新的老友（这个词组似乎听起来很别扭，但是如果您熟悉小氯的表达习惯，就会知道小氯口中的「老友」实际上也不需要认识很长时间 :D），知识面也有了扩展，写作水平也有了一定提升。</p>
<p>但是小氯觉得，这个问题没那么简单。如果要深挖，这实际上是一个很哲学的问题：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我们为什么要写博客？或者是博客的意义在哪？</p>
</blockquote>
<p>这个问题可以写一本书。或许等到园子周年的时候，小氯会专门写篇文章讨论一下吧（<code>画大饼.gif</code>）。</p>
<h2 id="哲学思考呢">哲学思考呢？</h2>
<p>之前小氯写周报，多少都会在最后一个章节讲点哲学。但是本期没有，不是没进行，是没写完……</p>
<p>小氯最近在看 Obsidian 官方论坛上一个非常大的 thread：<a href="https://forum.obsidian.md/t/open-sourcing-of-obsidian/1515">Open Sourcing of Obsidian</a>，是 Obsidian 还很年轻时，用户们对 Obsidian 为何不开源以及是否应该开源的讨论。</p>
<p>作为一个 FOSS 主义者，Obsidian 不开源一向是小氯的一个 sore point。但是在看这个巨大的线程时，小氯又有了一堆新的思考，甚至还涉及一些 FOSS 本质的问题。所以小氯的这篇文章越写越长，现在已经和这篇周报差不多长了。以小氯的性子，很可能会去看完《大教堂与集市》之后才能继续写。<del>不要为你的鸽找借口</del></p>
<p>行了，小氯承认也是因为这周末生着病写报告写论文太疲劳了……这篇文章不会鸽太久的，小氯保证。OωO</p>

      ]]></content:encoded></item><item><title>咦，我的按钮呢？</title><link>https://chlor.me/eh-where-is-my-button/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/eh-where-is-my-button/</guid><category>博客</category><category>折腾</category><description>本文讲述了作者在维护博客时发现返回顶部按钮消失的趣事。最初怀疑是 Swup 插件的问题，但经过本地测试和调试后，发现按钮实际上存在于 HTML 中，只是被 CSS 隐藏了。进一步检查后，发现是广告屏蔽插件 uBlock Origin 误将按钮的类名当成广告或恶意链接的一部分隐藏了。最后，作者通过更改按钮的类名和 ID 解决了问题，并为此取了一个更具趣味性的名字，以避免未来被误识别。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/eh-where-is-my-button.webp" alt="咦，我的按钮呢？" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>今天讲一件维护博客时遇到的趣事。本来想着周末更周报一起更了，但是想了想还是想水篇文章，<del>拦不住的小氯酱呢</del>。</p>
<p>园子的首页有一个 back-to-top 的按钮，继承自恐咖兵糖大佬的 Landscape 主题，一个蛮人性化的组件。由于这个组件实在是太简单了，因此我一直没多管。</p>
<p>不过，今天我在园子闲逛时，突然发现按钮不见了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>原本以为又是 Swup 的锅（<del>Swup：能不能别什么事情都怪到我身上</del>），结果刷新了几次都没有反应。</p>
<p>嗯？</p>
<p>赶紧回到本地跑构建，结果发现按钮是正常的。</p>
<p>这就很奇怪了。<code>⌘ + ⌥ + I</code> 打开控制台，调试启动。</p>
<p>首先扔一串 JavaScript，看下这个元素还在不在。</p>
<pre><code class="language-js">const element = document.getElementById('back-to-top-btn');
if (element) {
    console.log('Element with id &quot;back-to-top-btn&quot; exists:', element);
} else {
    console.log('Element with id &quot;back-to-top-btn&quot; does not exist.');
}
</code></pre>
<p>结果是在的，这至少说明 HTML 没问题。</p>
<p>定位到查看器……为什么这个 HTML 是灰色的？</p>
<p>再看一会儿旁边的样式表……我的 <code>lg-block</code> 怎么被覆盖了？</p>
<p>赶紧去翻找，结果发现了一个神秘规则：</p>
<pre><code class="language-css">.w-full &gt; .banner.el-carousel, .grid &gt; .container &gt; #aside-promotion, .flex-row &gt; #propagandaLeft, .flex-row &gt; #propagandaRight, .link &gt; .image[src*=&quot;.qhimg.com/&quot;], .back-to-top-wrapper, #back-to-top-btn, .back-to-top-btn {
	display: none !important;
}
</code></pre>
<p>嗯？这都是一堆什么？我不记得我有这个 CSS 规则啊？</p>
<p>再一看文件名，好家伙，这家伙直接把文件内容当成名字了。</p>
<p>去样式编辑器看看，不看不知道，一看吓一跳，这里面有一大堆 CSS，而且含有大量的链接。虽然不知道那是什么，但是一看其中的某些链接就不是什么好早餐饼干，具体是什么我就不说了，免得园子被请去喝茶。</p>
<p>小氯瞬间不淡定了。这该不会是什么注入攻击吧？</p>
<p>赶紧去排查 JavaScript，但是刚刚排查了几个文件，小氯突然想到了一个关键的问题：<strong>这一大堆东西，好像都被设置了 <code>display: none;</code> 啊？</strong></p>
<p>让我仔细看看。那个 CSS 极长，里面有一大堆的东西，像什么 <code>a[href=&quot;/e/member/register/index.php?tobind=0&amp;groupid=1&quot;]</code>，什么 <code>a[onclick$=&quot;'clicked', 'ad');&quot;]</code>，一堆不可描述的网站，还有一些<del>牢朋友</del>老朋友，比如说 Google 和 Facebook。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Suddenly, at that very instant, I had an epiphany.</p>
</blockquote>
<p>既然这个 CSS 费这么大劲把这些东西设置成了不可见，而且这些看起来似乎是广告和恶意链接，那这<strong>会不会是我的广告屏蔽插件？</strong></p>
<p>赶紧把 uBlock Origin 关掉，结果按钮显示出来了。</p>
<p>破案了，就是因为这个按钮的类名字起得不太好，所以被 uBlock Origin 误杀了。</p>
<p>那接下来的事情就好办了，回去改个类和 ID 名即可。这里小氯也搞了点小小的趣味：</p>
<pre><code class="language-html">&lt;div class=&quot;genki-dash lg:block&quot;&gt;
    &lt;div id=&quot;sora-tabi-btn&quot; class=&quot;sora-tabi-btn hide flex items-center rounded-2xl overflow-hidden transition&quot;
        onclick=&quot;soraTabi()&quot;&gt;
        &lt;button aria-label=&quot;Sora Tabi&quot; class=&quot;btn-card h-[3.75rem] w-[3.75rem] border-none&quot;&gt;
            &lt;div class=&quot;i-mdi-arrow-top&quot;&gt;&lt;/div&gt;
        &lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;

{{ with resources.Get &quot;css/addon/b2t.css&quot; }}
&lt;link rel=&quot;stylesheet&quot; href=&quot;{{ .RelPermalink }}&quot;&gt;
{{ end }}

{{ with resources.Get &quot;js/b2t.js&quot; }}
&lt;script src=&quot;{{ .RelPermalink }}&quot; defer&gt;&lt;/script&gt;
{{ end }}
</code></pre>
<p>起一个比较萌的名字，一般就不会被误伤了呢 ヾ(≧∇≦*)ゝ</p>
<p><del>Grok 甚至建议我起名为 <code>rasengan-btn</code></del></p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（8）：七日漫谈</title><link>https://chlor.me/weekly-8/</link><pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-8/</guid><category>周报</category><category>去中心化</category><category>Artalk</category><category>日常</category><category>RSS</category><description>本文是作者周报的第八期，涵盖了从日常生活琐事到技术尝试，再到哲学思考的广泛内容。文章从图书馆体验、意外受伤、回家旅程等琐事开始，展现了作者的日常状态。作者还分享了对旧衣物的独特情感，体现出对时间和记忆的深层思考。在技术领域，作者尝试了 Artalk 评论系统，对其功能和用户体验进行了详细评估，并与现有的 Twikoo 进行了比较。此外，作者还体验了 Follow 这一新兴的RSS阅读工具，分析了其对信息获取习惯的影响。社交方面，作者收到了中文博客圈的邀请，在喜悦之余也引发了对社交活动的复杂情绪；同时从一段家庭闲聊开始，表达了对家庭支持的感激之情。文章的最后，作者从「是否能构建一个非中心化的 Pixiv」开始，深入探讨了非中心化时代的社区基本准则，探讨了自由、隐私和必要监管之间的平衡等话题，展现了其对社区治理和运行模式的深刻思考。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-8-cover.webp" alt="Ephemeralis-Weekly（8）：七日漫谈" />
        </figure>
        <p>各位老友们好，我是 Chlorine。新的一期周报，双手奉上。</p>
<p>一如小氯<a href="/weekly-7/">之前所说的</a>，感觉写周报应该更多地写一写这一周「自己的感知和经历」，本期算是一个小小的初探吧。因此本期的内容较为琐碎和冗长，<del>主打一个低质高量</del>，我甚至都找不出一个合适的标题，只能（从形式上）仿造薄伽丘的《十日谈》（甚至 「七日漫谈」这个名字都可以当作周报名称了，太宽泛了）。当然，副标题并不一定要是四个字，只是前面碰巧都是而已。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第八期，日期范围为公历 2024 年 9 月 30 日至 10 月 6 日。祝食用愉快。</p>
<h2 id="文图初探">文图初探</h2>
<p>事情是这样的，在放假的前两天，我早上起来后去了三教自习。至于为什么去，和以往的理由不大一样，因为我寝室的水喝完了，我又不想再订一桶（马上国庆节放假了，订一桶喝不完，回来就不能喝了），于是准备去三教蹭免费饮水机（你可真是个小机灵鬼）。</p>
<p>然后学到大概九点半……抬头一看，嚯，教室里来了个老师，再一看课件，嚯，离散数学，图论。得，咱还是润吧。</p>
<p>然后……在这个时间点进入清华的道路，会遇到什么大家应该都知道。</p>
<p>于是我打算暂时避一避，等到人少些再往回润，正好旁边就是文图（人文社科图书馆），好，就你了。</p>
<p>虽说身为带清子民，但是我的活动范围小得可怜，图书馆只去过北馆（李文正馆）。也算是新的体验了。</p>
<p>文图的结构和北馆很不一样，自习区域和阅读区域大致是一个大环形。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240929100136.avif" alt="原谅我拙劣的摄影技术" title="原谅我拙劣的摄影技术" 
        class="mx-auto rounded-lg block" loading="lazy" width="528"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        原谅我拙劣的摄影技术
    </figcaption>
    
</figure></p>
<p>里面的设施相对北馆有一点陈旧，或者说是陈旧的感觉。以及，我居然发现，里面有一些座位，配备了显示器……显示器……显示器……</p>
<p>总体而言，我还是更喜欢北馆。可能是因为我更熟悉吧，就像是为什么最开始我觉得 C++ 怎么都不得劲，现在却感觉 C++ 的语法很舒服一样。</p>
<h2 id="受伤">受伤</h2>
<p>如各位所见，小氯有一个人物特质：每个夏天都会收获一种伤病。但是我实在是没想到，这个特质还可以在秋天发挥作用。</p>
<p>简单来说呢，就是……在放假的前一天，我骑着车子去上马原，结果前面的外卖小哥突然刹车了。我紧急刹车，然后我就……华丽地侧翻了。</p>
<p>很奇怪的是，我翻倒时心里没有任何波澜，最先冒出来的想法居然是……我记得外卖平台都有很严格的时间限制，我是不是耽误他们工作了？</p>
<p>外卖小哥明显也很懵，于是我告诉他：要不你先去送外卖吧，一会能过来扶我下就好。小哥连忙表示他的目的地就在前面，没关系的。于是我在地上坐了会，感觉恢复一点力气了，就在外卖小哥的帮助下站了起来。</p>
<p>我当时仔细感受了下，腿基本没事，右胳膊基本没事，但是左胳膊没有力气了。试着活动几下，还可以活动。因此我判断，我应该没什么大事，就让外卖小哥先走了，自己去上马原。</p>
<p>原本我是打算在马原休息时跟老师请个假，去校医院看看的，很不幸，可能因为这是国庆节前最后一节马原，因此老师没有设置休息。这让小氯的心情不太稳定。</p>
<p>下课之后赶紧去校医院挂急诊。经过一次照相、一次 CT 后，医生得出结论：骨头没事，有可能有韧带和肌肉损伤，于是开了些药就让我回去了。</p>
<p>然后小氯也没什么办法，只能是吃点药，在疼痛的地方喷一些云南白药，然后贴膏药。然后小氯就进入了单手打字的痛苦时光 TvT。</p>
<h2 id="长路归乡">长路归乡</h2>
<p>感谢 Kaiserreich 对本节的标题启发（Doge）。</p>
<p>简单来说就是，我<a href="https://clf3.org">光荣而伟大的孙哥</a>帮我抢到了回家的火车票，于是我们一起踏上了回家的旅途。</p>
<p>具体过程我觉得各位应该不会有太大兴趣，毕竟一个无系的垃圾佬折腾达人和半个贵系的划水小白 FOSS 主义者碰到一起，能谈什么大家应该大致是有数的。我们只讲点有趣的事吧。</p>
<ul>
<li>我忘记带午饭了，达成了早午饭都没吃的成就。</li>
<li>半路我的水杯滚到座位下了，然而我们没找到，直到临下车。</li>
<li>关于运动手表的对话
<ul>
<li>小氯：您的运动主页的数据是从哪里获取的？</li>
<li>孙哥：从运动手表里（叫什么品牌小氯忘记了），可以直接从这个品牌那里获取到运动数据。</li>
<li>小氯：那这个手表开源吗？（<code>眼神清澈的小氯酱.avif</code>）</li>
<li>孙哥：……鉴定为开源开魔怔了。</li>
</ul>
</li>
<li>骗孙哥一起看了一部我电脑里面祖传的老电影，卓别林的一部经典作品。</li>
</ul>
<p>然后大概是 17:50 吧，到了我们市的车站，再坐一班车就回到我们县啦。话说在我们县的出站口，有一个学弟拉着我合影来着 hhh。</p>
<h2 id="旧衣">旧衣</h2>
<p>小氯一向不喜欢买衣服。一方面来说，我一向对这方面的事极其倦怠，更别提反反复复试衣服或者从许多件衣服中挑选一件所谓「最好看的」会给我带来多大的心智负担。而且，小氯无论是在二次元还是三次元长得都比较「衣服架子」——That is，穿什么都至少不会显得难看。</p>
<p>所以说，当我中午在外婆家蹭完饭，昏昏欲睡却被父母拉去试衣服时，我内心是一百个不愿意的。但是他们表示，已经到秋天了，我在学校的衣服似乎有些缺，所以还是添几件衣服好。</p>
<p>但是说实话，我并不是很认同。在我眼里，一件衣服除非大小已经不合适或者发生了重大损坏，否则我至少要穿三年——这一方面是因为我平时比较节俭（习惯和认同，再加上的确没有大手大脚的条件），另一方面是因为我比较懒，不想总是换衣服。此外，我在某种程度上的确喜欢旧衣服。</p>
<p>倒不是因为说，旧衣服能体现我对审美的独特看法而不是被流行文化所裹挟（出自<a href="https://lillianwho.com/posts/week-summary-2023-38/">这里</a>）——我说了，我不挑衣服，只是说我喜欢和以前一样。</p>
<p>我们看过去，总归是带着一层暖化的光晕的。如狄更斯所言的：「我们总是在离开一个地方后开始原谅它。」现在我看我的高中时代，我时常会忘记过去对那些令人无语的规定的吐槽和卧床期间极度的痛苦，而只记起来朋友递来的口香糖，下晚自习的清冽的风，令人捧腹不止的课堂，和在无数次联考中大杀四方的光辉岁月。</p>
<p>所以，还是换一件旧衣服吧，在楼层的公共洗衣机倒进足够的馨香剂和檀木味的衣物消毒液，再在阳光下晾干，刮掉表面粘上的白色绒毛。一年过去了，但是我们仍能想起来去年的这个时候，我们走在哪条道路上，忙于白昼生于午夜时心里在想着什么。</p>
<h2 id="say-hello-to-artalk">Say Hello To Artalk</h2>
<p>本节的标题不是《Hello，Artalk》，因为我现在还没切过去。</p>
<p><a href="https://artalk.js.org">Artalk</a>，鼎鼎大名的博客评论系统，也是在我眼里唯一能和 Twikoo 分庭抗礼的存在（Waline 也不错，但是 LeanCloud 似乎并不是什么互联网善人）。我的许多老友，譬如 <a href="https://koxiuqiu.cn">klcdm</a> 和<a href="https://dusays.com">杜老师</a>，都在使用 Artalk。</p>
<p>但是我还在坚持使用 Twikoo，目前的理由大概是：</p>
<ul>
<li>Twikoo 我从就建站开始用了，有惯性。</li>
<li>Artalk 需要服务器部署，但是我的虚拟机的连接在带清校园网内实在是太过优秀，我不想每次自己看评论都看不到（<del>然而你是不是忘了你还有一台套路云的服务器</del>）。</li>
<li>Twikoo 本身的功能以及 MongoDB、Netlify 的免费额度暂时够我用了（目前 MongoDB 的免费额度是 512 M，大概是够我存数十万条评论的）。</li>
</ul>
<p>但是在我希望修改一些数据，但是我只能通过 MongoDB Atlas 进行简单的修改，逼着我去现学了 MongoDB Python SDK 的使用方法后，以及在看到<a href="https://www.iczrx.cn/archives/119/">晚夜老友</a>的文章后，我又一次开始考虑 Artalk。</p>
<p>Artalk 本身的部署非常容易，写一个配置文件，docker-compose 一跑，反代一代就完事。Artalk 可选的配置项非常多，我折腾了很久，终于把飞书推送、邮件通知和注册都配好了。很可惜，我一直没有配好 Redis 缓存，不知道怎么回事。</p>
<p>下一步是在 Hugo 中整合 Artalk。按说这非常简单，但是由于万恶的 Swup 的 JavaScript 加载问题，我遇到了大量适配困难。一个很重要的问题是：Artalk 的 <code>init</code> 函数是页面特异的，因此 <code>swup.hooks.on</code> 方法是不能用的（不然会加载上一个页面的评论）。所以只能用回老方法，就是 <code>data-swup-reload-script</code>。不过好在，可算是加载出来了。</p>
<p>此外，Artalk 的亮暗模式是按照系统来的，但是我的博客不是。好在经过反复观察，我发现对于我的 Hugo 博客，其只由父容器 <code>Comment</code> 中的一个 <code>atk-dark-mode</code> 类控制。因此可以在初始化博客亮暗模式，点击切换时和 Artalk 容器填充时进行一个 class 的 add / remove。</p>
<p>——要是真这么简单就好了。</p>
<p>我本来的想法是在 <code>Artalk.init</code> 执行中加入一个 <code>onReady</code> 回调，在回调函数中封装一个控制 <code>atk-dark-mode</code> 类的 IIFE，但是不知道为什么，这个 IIFE 一直不执行，有可能是 <code>Artalk.init</code> 根本没有回调选项。观察者更别提了，用不了一点。目前我采用的是非常笨的办法，就是 <code>setTimeout</code>。坏处是会造成闪烁，但是我也没有更好的方案了。这就是 Swup，丝滑，优雅，但繁琐，就像是维多利亚时代贵族们华丽的晚礼服。</p>
<p>不过目前为止，Artalk 应该已经是一个生产可用的状态了。不过我目前依然将其存在一个分支中，站点还是使用 Twikoo。如果有一天我下决心切换，会以显性的方式通知所有曾到访园子的老友，尽快进行账号激活。</p>
<h2 id="hellofollow">Hello，Follow</h2>
<p><a href="https://follow.is">Follow</a> 应该是最近博客圈非常热门的话题了。来自两位巨佬 <a href="https://innei.in">Innei</a> 和 <a href="https://diygod.cc">DIYGod</a> 的作品，号称「下一代信息浏览系统」，简单粗暴地理解的话，可以看作一个 ProMax 版本的 RSS 阅读器。但是 Follow 不止于此，其还创新性地加入了轻社交、原生 RssHub 支持等功能。</p>
<p>Follow 目前还处于 Alpha 阶段，需要邀请码才能使用。小氯虽然也十分心痒，但奈何没有合适的渠道，也不好意思直接和几位开发者讨要邀请码，因此只好施展战略定力。不料有一天晚上，小氯在闲来无事刷联邦时，发现所在实例 <a href="https://scg.owu.one">Owu Social</a> 的另一位活跃用户 <a href="https://scg.owu.one/@icarus">@CDN18</a> 表示可以送出一个邀请码。于是小氯立即与 CDN18 老友取得了联系，并最终获得了一个邀请码。此处向 CDN18 老友致以真诚的感谢。</p>
<p>现在距离我开始使用 Follow 也有几天了，先说说体验吧。首先是界面，虽然 Follow 是一个（对我来说算是 sore point 的）Electron 应用，但是其界面的精致和原生、交互的丝滑和流畅还是让我有种我在使用一个 SwiftUI 标杆作品的错觉，即使是我为了性能把动效减少到最少也是如此。至于 RSS 阅读体验，那没的说，尤其是对媒体文件的处理。用 <a href="https://www.pseudoyu.com/zh/2024/08/05/weekly_review_20240805/">Pseudoyu</a> 的话来说，「有一种看久了 pure html 突然飞跃到加了现代化 css 效果的感觉」。</p>
<p>但是我只是将《Hello，Follow》作为这篇长长的周报（周记）的一个都算不上长的段落，而不是像许多博友那样单独写一篇文章，谈谈其对我的信息获取有什么颠覆性改变，因为<strong>就目前来看，确实没有</strong>。</p>
<p>我目前的感觉是：<strong>对 RSS 和信息聚合越依赖的人，Follow 对其的价值就越大</strong>。小氯目前只能算个 RSS 业余用户（<del>这从我到现在都没攒够能生成一个邀请码的能量就可见一斑</del>），信息的获取（注意不是信息的浏览）渠道更加偏向于静态内容（例如已经完结的教程，成套的视频教程，纸质书）而非是随着时间增补和替换的动态内容，少数的动态内容，例如一些博主的更新、Bilibili 的动态等（我不看 Twitter 和 TG Channel，谢谢），我也并没有一定要放到一个聚合来源的刚需，虽然说这样似乎的确更加高效；至于将其作为一个纯净化阅读器或者是更新通知工具，在我看来就像使用 Memos 作为说说一样——不是不行，甚至可以做得很好，问题是这本来就不是做这个的东西。而且，我目前获取的信息来源几乎都没有什么无法去除的顽固干扰物，即使是 Bilibili 令人眼花缭乱的弹幕，也可以直接关掉。</p>
<p>综上所述，Follow 是一个非常强有力的工具，但是我现在只是将其重器轻用，轻用到我自己都怀疑是不是太轻了，以至于浪费了一枚宝贵的邀请码。或许日后我会发现 Follow 对我更多的价值，但是——那是日后了。</p>
<p>事实上，在我看来，Follow 和其背后的 RSSHub 就像是一种多信息源到用户之间的 adapter，将各种信息源都变为 RSS XML 格式返回给用户，来提供一个聚合的阅读体验。其实也不一定要是 XML，任何能够承载足够丰富信息、能够便捷地解析和交换的格式都可以，只是历史原因让我们选择了 XML 而已。</p>
<h2 id="加入中文博客圈">加入「中文博客圈」</h2>
<p>今早（10 月 5 日）意外收到了一封邮件（<del>快说谢谢飞书</del>），来自于<a href="https://yinji.org">印记</a>的站长——青山。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20241005140534.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="693"  />
    
</figure></p>
<p>我对这个群也略有耳闻，其中有很多优秀的站长。能接到这份邀请，我有些受宠若惊。因为园子建立到现在起其实也不到一年，总的文章数（截至我敲这行字）也不过才 53 篇，即使是计算上那些在不断的迁移过程中有意无意地丢失的文章，应该也才七八十篇的样子。这可能也算是对园子的一种认可吧。</p>
<p>但是，就我第一反应的情感体验而言，我其实略微有一点犹豫。这当然和中文博客圈无关，而是应该归因于我的性格，总体而言我算是个 I 人，虽然在与人（无论是熟人还是陌生人）约饭或者进行别的什么社交活动时看起来都是落落大方侃侃而谈，在 Pre、小组讨论这样的场面下也常常是一个 ice-breaker，似乎显得非常长于社交，但实际上我的社交热情只能止于被动社交，熟人社交，以及 P2P 的社交。一旦面对群体性、主动性的社交，即使都是熟人，我也会感到有些不适。</p>
<p>我并不觉得这是什么需要改正的缺点，社会本就应该容得下性格开朗喜欢外向和性格内敛喜欢独处的人以及它们的一系列中间性状，而不是强迫所有人都顶着笑容灿烂而虚伪的橡皮面具，明明如坐针毡却还要笨拙矫造地热情得体。就像是我们常说的理想主义，这是所有最优秀的高等教育都一以贯之的思想血脉和精神基座，本就应当足够作为推动人上行而不是防止人下行的力量。如果这种精神在任何情况下都被无差别指责为「涉世未深」或者别的贬义词汇，那么应该反思的是发出指责的人——或者用一句火药味更浓的话，应该反思的不是我们，是你们。</p>
<p>扯远了，回来。最终我当然接受了邀请，毕竟这除了是一种认可，也是不可多得的学习和交流机会，就像是开发者大会或者经常会有的 Workshop 一样。以及上面的话只是我顺着自己思维的跳跃轨迹的一些想法，希望各位不要有什么误解。</p>
<h2 id="原生家庭">原生家庭</h2>
<p>在从奶奶家回家的路上，我和父母聊天。我娘开玩笑地说，现在只想找一个活不多、存在感低的单位去上班，躺平算了。</p>
<p>我不禁有些好笑：「为什么我感觉，好像你把我送到清华之后，你的人生价值就已经实现了，这辈子就已经完满了一样。」</p>
<p>谁知我娘非常严肃地说，她确实是这么想的。现在出门，如果她自我介绍说她是 XXX，几乎不会有人知道，但是如果说是我的妈妈，（至少是在我们那个小县城的范围内）都会受人青眼。</p>
<p>我问：「现在很多父母都不希望这样，说是感觉这样自己这辈子就只剩下父母一个身份了，全部的价值都在孩子身上，就没有自我了。」</p>
<p>二老意见异常一致：他们不那么认为。然后我娘就开始反反复复地强调她有多么为我骄傲，但是我不要有太大压力，只要做好自己、健康快乐就好了。</p>
<p>一直没插上话的我爹说，他倒并不是因为我考上了清华就如何如何，但是他感觉，自己所有的遗憾我都为他弥补了。他当年没有考上重点高中，我考上了；他当年高考发挥失常，而我考得非常好。</p>
<p>我们三个哈哈大笑。</p>
<p>笑完之后，我们继续开车回家。我突然想到一个词：原生家庭。原生家庭（大概是指一个人出生和成长的最初家庭环境）这个词在近几年非常流行，似乎很多现象和问题都可以归因于原生家庭（事实也至少有一部分是这样）。</p>
<p>小氯自认为，小氯的原生家庭非常非常幸福美满。家庭结构相对简单，家族内的关系和谐，没有什么坑人的亲戚；虽然说几代人之间有过一些不和，但是都慢慢走向了互相理解；父母虽然偶有争吵，但是都能好好过日子；父母都极其开明，同时对我的成长都颇为上心；家境虽然远远不算殷实，但是至少没有到缺衣少食的地步。小氯不知道小氯给家庭带来了什么，但是所谓的「原生家庭阴影」，在小氯身上几乎完全不见踪影。</p>
<p>感谢我的家庭，他们把我养得很好，给了我情感上坚实的依靠。我爱他们。</p>
<h2 id="我是一个过渡">我是一个过渡</h2>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>在开始我们下面的论述之前，有必要叠个甲：<strong>以下的所有讨论都无意涉及任何的政治性或者有争议的话题，也不是对任何已有政策或者是特定实体的评论。</strong> 还请各位抱着开放、包容的态度参与讨论。另外如果茶和饼干见底了，请前往公共空间自取。</p>
    </div>
</div>
<h2 id="一个外行眼中的非中心化时代的基本准则">一个外行眼中的非中心化时代的基本准则</h2>
<p>很长的标题，不是吗？</p>
<p>事情的起因是这样的：我在听 B 站的日推时，发现了一张非常好看的图片（我觉得上面的人物应该是初音未来？）。然后我试图搜索这张图的原图，然后我就来到了 Pixiv。众所周知，在好看的插画方面，Pixiv 应该是最丰富的。</p>
<p>然后我突然想到了一个问题：<strong>Pixiv 有非中心化的版本吗？</strong></p>
<p>容我解释一下这个问题：是否存在一个类似 Pixiv 的插画分享社区，但其具有自由、去中心化（或者是联邦化）的特征，一如 Mastodon 对 Twitter？<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>这个问题乍一看很无厘头，就像孙哥上面调侃我的那样「开源开魔怔了」。但是作为一个坚定的 FOSS 主义者以及 Non-Centralized Architecture 的喜爱者（但是，从技术上来说，我是绝对的外行），我在评估任何产品时都会思考其是否能有这样的替代品。</p>
<p>然后我就开始动手查阅资料。很遗憾，答案是还没有。但是确实存在一些类似的平台，比如基于 Mastodon 的 <a href="https://pawoo.net">Pawoo</a>。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Pawoo（パウー）は The Social Coop Limited が運営するMastodonのインスタンス（サーバー）です。 「創作活動や自由なコミュニケーションを楽しめる場」として、どなたにも幅広く使っていただけます。</p>
</blockquote>
<p>机翻后的版本：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Pawoo 是由 The Social Coop Limited 运营的一个 Mastodon 实例（服务器）。每个人都可以将其作为「享受创意活动和自由交流的场所」。</p>
</blockquote>
<p>但是从技术上来说，有 Mastodon 为代表的 ActivityPub、LBRY、Matrix 等优秀的非中心化社区珠玉在前，写一个这样的去中心化（或者联邦化）的平台在技术上并不是不可完成的。在我看来，可能需要认真考虑的就是两件事：海量图片的存储以及约稿的支付事宜。前者可以借助 AVIF 等高效格式和 IPFS 等去中心化存储系统，后者则可以从 Steemit 等已有的社区中获取灵感。毕竟，都用非中心化插画社区了，应该也不会排斥收取一些去中心化代币作为约稿的报酬吧。</p>
<p>我为我的这个想法小小地兴奋了一会儿，仿佛能看到一个崭新的、美好的社区在非中心化时代的黎明如日之升，以及将来我在这样一个社区兴味盎然地寻找自己喜爱的插画的场景。</p>
<p>然而我并没有兴奋多久，因为我想到了一个严肃的问题。由于小氯思维的极度跳脱，我无法条理清晰地梳理我到底是如何联想到这个问题的，只记得思维链不短。简单来说，我想到的问题就是 R-18 图片的问题。R-18 或许还能说是在某种程度上可以接受的，但是如果比这更加……嗯，不适宜公共展示的图片呢？在现有的机制下，这类图片并没有很大的机会出现，但是如果是在一个更加自由的非中心化社区呢？这是我们想要的结果吗？</p>
<p>我们来把问题聊得更深入一些：<strong>一个理想的非中心化社区，应当具有怎样的基本准则？</strong> 或者把问题提得更大些：<strong>如果我们将其作为一个可行并可以讨论的背景，那么非中心化时代的基本准则是什么？</strong></p>
<h3 id="自由隐私中心">自由、隐私中心</h3>
<p>这两点几乎不需要论述，所以请允许我略过它们（<del>承认吧你就是太懒不想写了</del>）。</p>
<h3 id="社区治理">社区治理</h3>
<p>这个词让我想了很久，最终才勉强挑出了一个能够比较完全地概括非中心化社区的理想运作模式、同时还不会涉及一些不必要的联想的词汇，虽然说这个词可能也不算是那么恰当——「治理」（Governance）这个词，似乎本身就带有一些「自上而下」或者「中心决策」的意味。不过如果我们一定要问个究竟，其词源应该是希腊语 κυβερνάω，意思是驾驶。也就是说，「治理」实际上是通过某些方式控制社区运行的过程，那还不如叫「运作」。</p>
<p>扯远了，回来。一个较为理想的非中心化社区，其运行和治理模式应该具有如下特点：</p>
<ul>
<li>非中心化：不会存在一个人或者一小群人作为一些重大决策或者是大部分决策的核心而其他人不能或者很难对结果产生实质性影响。这是句废话，要不然这个社区为什么叫非中心。</li>
<li>透明决策：一切可能具有社区性的决策都需要将其过程公开，使得任何社区成员都能进行查阅和了解。</li>
<li>社群参与：每一个社区成员都应该有参与社区运作的权利，同时也应该承担社区运行的义务。</li>
</ul>
<p>毫无疑问，最后一点最难以理解，也最模糊。在我的理解中，这包括了社区运行本身的群策群力，社区成员对社区本身以及社区其他成员的尊重等。还是拿上面的类 Pixiv 社区来举例子，对于插画社区不可避免的版权问题，这其实也可以作为这条原则的一部分，也就是对其他成员权利的尊重。虽然开源和宽松的分享协议当然是被提倡的，但是至少就目前我们的认识，谁也没有权力强迫插画师这么做。如果插画师并不希望自己的作品被太过随意地使用，我们也应该尊重。</p>
<h3 id="最小化但必要的监管">最小化但必要的监管</h3>
<p>这是我希望重点论述的部分。注意，以下我可能会把「监管」和「监管基于的规则」混为一谈，因为对于在可行性层面上非刚性的规则（也就是社会学意义上的规则）而言，没有监管就意味着规则在实践层面毫无意义。</p>
<p>「抗监管」一直是非中心化系统一个非常大的卖点。因为没有单一的或者少数几个的中心节点，再加之非中心化社区在许多条件下的匿名性，因此对其进行监管的难度相当大。同时，可能是一种基于技术的思想风潮（或者有可能是反过来，我们探讨的东西就是一种由思想风潮衍生出的技术），许多人都主张应该建立一个「无监管化」的社区。在某些情况下，这几乎成了一种「意识形态」，乃至是一种极端化的、门电路一般无可迂回的判断——只要你有监管，你的社区就是有问题的，甚至你就不配做 Web3（请允许我不透露这条言论的来源）。</p>
<p>我们不去评价这样的言论的对错，我们希望探讨的是：<strong>「无监管化」真的可能吗？</strong></p>
<p>从技术上，（在不出重大问题的前提下）确实可以做到无监管——或者至少是一个极大的近似，因此我们探讨的实际上是无监管化作为一个技术 - 社会复合体是否是合适的。</p>
<p>「合适」，这本就是一个模糊的词汇。就像是吃猪肉，在一个没有特定忌讳和宗教信仰的普通人眼中并不是什么事，但是在一个穆斯林眼中却是非常冒犯的行为。在探讨这类问题时，我们只能按照周总理的「求同存异」方针，尽可能地寻找一个最大公约数，也就是说，能不能保证不违反（社会学意义的）人类最基本的行为底线。</p>
<p><strong>很遗憾，就我目前的观点以及目前能够获得的实践证据，「无监管」尽管听起来非常「自由」，但是其做不到「合适」。</strong> 不需要过多论证，一个基本的事实是：几乎所有人都做不到「君子慎独」，甚至许多人在有监管的前提下都敢于践踏人类的底线。那么在一个无监管的环境下，即使这个环境还不足以构成最有力的现实投射，也足以向我们展示人性可能的最黑暗的一面。「人们哭喊自由，说的其实是放纵。」不管是 Silk Road，AlphaBay，WannaCry 还是难以计数的「涉及未成年人的不适宜内容」（我实在说不出口那个令人难以接受的词汇），都已经用一种我们并不愿意看到的方式向我们反复强调了一个堪称颠扑不破的真理：<strong>在进行任何技术实践时，都应以最坏的恶意度测人心。</strong></p>
<p>如果这样的案例只是少数，或许还可以说「不应该因噎废食」；但是如果这样的案例已经达到了这个规模、数目和严重程度，那么对于项目有责任的主理人和社区成员就必须作一些反思和改变了。</p>
<p>我的观点可以概括为一句话：<strong>最小化但必要的监管</strong>，也即保留必要的社区准则和监管，同时保证个人的自由和隐私以及基本准则的稳定。这当然不是什么容易做到的事情，无论是技术上还是非技术层面，做到「适当」的难度几乎相当于掷飞镖时将飞镖投到靶的绝对几何中心。但是我们必须试着做，因为我们想要一个自由、开放、公正又有秩序的社区，而不是一个严酷的电幕地狱或者一座燃烧的混乱之城。</p>
<p>最后，有一句话，送给那些极端自由主义者们：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>In no system that could be rationally defended would the state just do nothing.</p>
<p>——F.A.Hayek</p>
</blockquote>
<hr>
<p>兜兜转转写了这么多，感觉有些疲惫。尽管我已经尽力避免一切可能引起争议的名词和话题了，但还是不知道我的话是否足够中性。</p>
<p>最后，还是祝愿各位老友，都能享受「天放而不失其常」的良好而合理的自由。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>一如下文所体现的那样，「去中心化」（Decentralization）和「联邦化」（Federation）实际上是两个（甚至完全不同的）概念，虽然它们经常被（不正确地）混用。所以我们此处使用「非中心化时代」（Era of Non-Centralization）而不是更常见的「去中心化时代」（Era of Decentralization）。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（7）：唯有时光</title><link>https://chlor.me/weekly-7/</link><pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-7/</guid><category>周报</category><category>博客</category><category>Swup</category><description>本文是作者周报的第七期，主要包括园子的装修工作，如 Swup 的修复、whisper 代码美化、Twikoo 表情链接的调整、解析线路切换等。此外，还探讨了不同语言中对“小氯”这一昵称的翻译，涉及英语、西班牙语、日语、法语、俄语和韩语/朝鲜语等。文章最后分享了对时间和生活感知的哲学思考，提倡通过记录日常小事来增强对时间流逝的感知，强调生活经历对个人记忆和身份的重要性。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-7-cover.webp" alt="Ephemeralis-Weekly（7）：唯有时光" />
        </figure>
        <p>各位老友们好，我是 Chlorine。<del>鸽了一期</del>的周报再次回归。本期又是一篇蛮矫情且没营养的怪东西，如果吵到您的眼睛了，小氯提前跟您道个歉。红豆泥私密马赛。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第七期，日期范围为公历 2024 年 9 月 23 日至 用愉快。</p>
<h2 id="园子装修">园子装修</h2>
<p>严格来说，园子的装修就从来没停过，就和<del>某款开放世界游戏的</del>每日任务一样。毕竟小氯是个喜欢好看装修的<del>元素娘</del>站长。</p>
<h3 id="swup-修复">Swup 修复</h3>
<p>这个标题不太准确，因为小氯也不知道修复了没有，只是暂时能用了，在各种情景下的鲁棒性没有经过严格测试。</p>
<p>就如小氯<a href="/swup-modifying/">曾经说的</a>，Swup 本质是是对页面内容的部分替换，因此对于 JavaScript 这种东西的处理并不出色，需要借助比较复杂的 <code>swup.init</code> 或者 script plugin 来进行加载，而且还经常出一些令人<del>像路易十六一样</del>摸不着头脑的问题。</p>
<p>这次的问题依然是我们的老朋友，Twikoo。我之前采取了一个非常令人困惑的策略，就是在 <code>js.html</code> 和 <code>comment.html</code> 中放置两份 <code>twikoo.min.js</code> 并且都打上 <code>data-swup-reload-script</code> 属性。不知道为什么这个方法能工作，但是就是能用了。</p>
<p>但是大家用核外电子也能想到，这样显然会降低性能。于是拦不住的小氯又开始了折腾。</p>
<p>首先参考了 Swup 的<a href="https://swup.js.org">官方文档</a>，看到了在 Swup 对象构造时的初始化方法，遂将 Twikoo 初始化放到了其中：</p>
<pre><code class="language-js">function initTwikoo() {
    if (document.querySelector('#tcomment')) {
        twikoo.init({ envId: &quot;{{ .Site.Params.Twikoo.envId }}&quot;, el: &quot;#tcomment&quot; });
    }
}

function init() {
    initTwikoo();
}

if (document.readyState === &quot;complete&quot;) {
    init();
}
else {
    document.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; init());
}
swup.hooks.on('page:view', () =&gt; init());
</code></pre>
<p>然后自然是必遭严惩，Twikoo 居然消失掉了。经过调试，发现是……Twikoo 对象没定义？</p>
<p>Twikoo 对象没有定义，说明远程的 Twikoo 脚本没有加载，至少是在 <code>init</code> 执行之前没有加载，这是很个邪门的事情，因为我们预先已经在 <code>js.html</code> 引入了 Twikoo 脚本。</p>
<p>后面的故事极其混乱，我不知道怎么和各位老友描述。简而言之，就是我尝试了各种可能的拼接方案，甚至包括在初始化 Twikoo 之前检查 <code>typeof twikoo === 'undefined'</code> 如果未定义就引入这种大聪明方法。</p>
<p>最后，心力交瘁之下，我想到了一位大神曾经说的：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>99% 的 JavaScript 问题都可以用 <code>async</code> 和 <code>defer</code> 解决。</p>
</blockquote>
<p>这俩货我听过，但是由于不会前端，我不太懂这到底是什么意思。问了下 AI，得知二者都是异步加载的脚本。前者在加载后立即执行，后者则等到 HTML 完全加载后才执行。</p>
<p>嘶，让我思考一下。<code>twikoo.min.js</code> 和 <code>twikoo.init</code> 应该都是会直接或者间接操纵 DOM 元素的，尤其是后者，需要依赖于 <code>#tcomment</code>。而 Swup 本身也会依赖于 DOM 元素中的属性，那么我加一个 defer 试试看？</p>
<p>于是把代码改成：</p>
<pre><code class="language-html">{{/* js.html */}}
&lt;script src=&quot;https://gcore.jsdelivr.net/gh/chlorine3545/customcdn@352853c/js/twikoo/1_6_39.min.js&quot; defer crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;

{{/* baseof.html */}}
{{ partialCached &quot;head/js.html&quot; . }}
&lt;script data-swup-ignore-script defer&gt;
    const swup = new Swup({
        plugins: [
            new SwupPreloadPlugin(),
            new SwupScriptsPlugin({ optin: true }),
            new SwupScrollPlugin({ animateScroll: true })
        ]
    });

    function initTwikoo() {
        if (document.querySelector('#tcomment')) {
            twikoo.init({ envId: &quot;{{ .Site.Params.Twikoo.envId }}&quot;, el: &quot;#tcomment&quot; });
        }
    }

    function init() {
        initTwikoo();
    }

    if (document.readyState === &quot;complete&quot;) {
        init();
    }
    else {
        document.addEventListener(&quot;DOMContentLoaded&quot;, () =&gt; init());
    }
    swup.hooks.on('page:view', () =&gt; init());
&lt;/script&gt;
</code></pre>
<p>奇迹出现了：加载正常了。</p>
<p>当然，这种方法也有缺点，一个显著的缺点就是 <code>comment.html</code> 和 <code>extend-comment.html</code> 失去了其原有的作用，变成了单纯提供 HTML 元素的静态 partial 文件，这样对用户自定义不是很友好，尤其是作为主题发布时。但是我管不了那么多了。</p>
<h3 id="whisper-代码美化">whisper 代码美化</h3>
<p>这已经是我第 N 次美化 whisper 的代码了。这次简单增加了一些缓存机制，防止不停地请求 API 给人家的服务器带来太大负担；引入了原本就很顺手的 Fancybox 作为图片点击放大的工具；增加了 caption；然后又美化了各种边角细节。</p>
<p>代码我放在这里了，为了访问速度，国内的小伙伴请选用杜老师的 Opengist。</p>
<ul>
<li><code>whisper.css</code>：<a href="https://gist.github.com/chlorine3545/40289925b9670f08c51dc6e63f7ca7e8">GitHub Gists</a> / <a href="https://gist.dusays.com/chlorine/94932360c55449a391339a51ea18b01e">杜老师 Opengist</a></li>
<li><code>whisper.html</code>：<a href="https://gist.github.com/chlorine3545/78f51e8e102b2a102d5166dbdeee5b26">GitHub Gists</a> / <a href="https://gist.dusays.com/chlorine/17330e2e6f2049978c9a91fe0dd65e28">杜老师 Opengist</a></li>
<li><code>time-fmt.min.js</code>：<a href="https://gist.github.com/chlorine3545/5a17e67e3881fdc02b4a39092a1b3313">GitHub Gists</a> / <a href="https://gist.dusays.com/chlorine/ecdffff0af20474a8eabf81e15671112">杜老师 Opengist</a></li>
</ul>


<div class="my-6 rounded-lg border-l-4 p-4 border-amber-500 bg-amber-50/50 dark:bg-amber-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-amber-700 dark:text-amber-300">
        <div class="w-5 h-5 i-carbon-warning">
        </div>
        <span>Warning</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>本代码并不是开箱即用的！需要进行以下配置：</p>
    </div>
</div>
<ul>
<li>在 <code>hugo.toml</code> 或者其他配置文件中增加对应变量的配置项（如 <code>{{ .Site.Params.Whisper.instance }}</code>），或者如果你不使用 Hugo，请直接替换为值并安全保存。</li>
<li>（如果你不使用 Hugo）将 Hugo 风格的 CSS / JavaScript（例如 <code>{{ .Content | safeCSS }}</code>）导入改为你需要的格式。</li>
<li>（如果你不使用 UnoCSS）将 UnoCSS 类改为对应的普通 CSS 选择器。所幸这里面的 UnoCSS 不太多。</li>
</ul>
<h3 id="twikoo-表情链接">Twikoo 表情链接</h3>
<p>最近发现评论区的一些表情显示不出来了，右键新标签页打开，原来是图片挂掉了，有可能是因为 Magic Twikoo 的 AliyunOSS 出问题了。</p>
<p>目前临时把线路切到了 Gcore jsDelivr，但是之前的链接并不会自动切换。Twikoo 的管理面板不支持修改评论，因此我需要用 MongoDB 的命令行才能修改，难绷。</p>
<p>以及，我有点想自己建一条线路，提供一下表情加速的功能，正好手里还有几个免费的 CDN。不知道大家怎么看？</p>
<h3 id="线路切换">线路切换</h3>
<p>我的博客一直用的是 <a href="https://yt-blog.top">Fgaoxing</a> 维护的 Vercel 加速解析线路，综合表现还是比较出色的。不过最近接到了<a href="https://dusays.com">杜老师</a>的反馈，网站无法访问了。这倒是也不意外，毕竟海外的半墙不墙的服务，无法访问实在是太常见了。</p>
<p>目前暂时把线路切到了 <a href="https://xingping.cn">Xingping</a> 提供的加速解析，先这么用着。实在不行，我就要上 CDN 了。</p>
<h2 id="不同语言的小氯">不同语言的「小氯」</h2>
<p>本来是打算单独水一篇文章的，但是真这样的话我实在是良心不安（<del>承认吧你就是太懒了</del>）。</p>
<p>事情的起因其实是我编辑我的 GitHub Profile i18n 的时候，更改了我的中文 profile。然后我在英语和西语方面遇到了一点麻烦。简单来说，我的 profile 里面有一句：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>你好，我是 Chlorine，来自清华大学。你可以叫我小氯，或者这个名字的任何友好的变体。</p>
</blockquote>
<p>如果翻译成「Hello, I&rsquo;m Chlorine &hellip; You can call me Chlorine」，那实在是有点某度（要么是某歌）英语翻译我北的简介的时候的风范了：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Peking University, referred to as Peking University</p>
</blockquote>
<p><em>注：现在这个问题已经修复</em></p>
<p>那么我们需要仔细思考一下，「小氯」这个昵称的翻译。</p>
<h3 id="追本溯源">追本溯源</h3>
<p>我的 ID 其实是「Chlorine」，这个词本意指的就是元素周期表的第 17 号元素，没有什么萌的含义。但是由于这个 ID 的来历是一张可爱的氯元素拟人头像，因此 Chlorine 被我翻译成了小氯，听起来就萌一点了。</p>
<p>因此我们需要解决的问题其实是：<strong>如何在不同语言的语境下表达出一个和氯元素相关的、比较萌或者可爱的词汇，而不是如何翻译作为化学名词的氯</strong>。</p>
<h3 id="英语">英语</h3>
<p>英语的「小氯」最简单的翻译其实是不翻译，也就是 Xiaolv 或者是 Xiaolü。虽然直接用拼音显得非常狗，但是这也不失为一个好方法，毕竟中华语言博大精深，能准确翻译成英语的才是少数。</p>
<h3 id="带有日语风格后缀的英语">带有日语风格后缀的英语</h3>
<p>牢日算是萌文化的发源地，因此如果引入一些日语化的后缀，那么翻译就会有味道很多。</p>
<p>一个比较典型的翻译是使用中文中一个萌化的变体「小氯酱」。酱（ちゃん）常用于称呼可爱的女孩子，但是并不限于此，比如お兄ちゃん（欧尼酱，也就是「哥哥」）。所以就我的理解，一般情况下不必太过担心这个称呼带有明显的性别指代（毕竟小氯只是个原子 (≧∇≦)ﾉ）。回到正题，「酱」在英语中一般使用后缀「chan」，因此翻译为「Chlorinechan」即可。</p>
<p>此外，另一个常用的后缀是「nya」，这个后缀常常用于模仿猫叫声，可以理解为「喵」。于是拼接在一起可以得到「Chlorinya」，也是不错的想法。</p>
<h3 id="西班牙语">西班牙语</h3>
<p>西语的情况也不算复杂。Chlorine 的西语是「Cloro」，而在西语中，后缀「ito」（阳性）和「ita」（阴性）是用于表达小、可爱含义的最常见后缀，因此可以翻译为「Clorito」或者「Clorita」。</p>
<p>不过此处存在一个问题，就是这两个词汇都是存在的。Clorito 的含义是「亚氯酸盐」，而 Clorita 则是「绿泥石」（一种页硅酸盐底下的矿物群）。要是这么玩，那可就一点也不可爱了。</p>
<p>因此我最终采取了另一个后缀，就是 in/ina。或者简单点，就写成「Clori」，这样更接近一个人名。</p>
<h3 id="其他语言">其他语言</h3>
<p>由于我几乎完全不了解中文、英语和西语之外的任何语言，因此下面的（基于资料搜集的）观点可能和正确的或者被本族语者普遍接受的用法有所出入，敬请斧正。</p>
<h4 id="日语">日语</h4>
<p>日语的氯叫作「塩素」（えんそ、enso）。如前文所述，牢日算是萌文化的发源地，因此引入一个可爱的后缀是相当自然的想法。例如，「塩素ちゃん」（えんそちゃん、Enso-chan）。</p>
<h4 id="法语">法语</h4>
<p>法语的氯叫作「Chlore」，那么我们可以简单粗暴地将「小氯」翻译为「Petit Chlore」。或者采用常见的表示小或者可爱的后缀「-inou」，翻译为 Chlorinou。</p>
<h4 id="俄语">俄语</h4>
<p>俄语的氯叫作「хлор」（khlor）。俄语中表示亲昵的后缀常见的有「-ик」和「-ушка」等，因此可以翻译为Хлорик（Khlarik）或者Хлорушка（Khlorushka）。当然，我觉得 Хлорёнок（Khloryonok）也可以。</p>
<h4 id="韩语朝鲜语">韩语/朝鲜语</h4>
<p>韩语和朝鲜语在这个问题上的表现基本上一样，因此我们下面不做区分，统一称为「半岛语」。</p>
<p>在半岛语中，氯被称作「염소」（yeomso）。而比较亲昵的后缀的话，可以考虑「야」（-ya），这个词常用于称呼朋友或者晚辈，因此可以翻译为「염소야 」（yeomso-ya）。此外，根据 Grok-2 的建议，也可以翻译为「소염」（so-yeom）。我也不大清楚这么说可不可以。</p>
<h4 id="除此之外的语言">除此之外的语言</h4>
<p>好吧，小氯承认小氯的语言能力就到这里了 qaq</p>
<h2 id="周报">周报？</h2>
<p>不知道大家听完这一通碎碎念，是否还记得本期的标题：Ephemeralis-Weekly（7）。</p>
<p>什么是周报？虽然这是个见仁见智的问题，但是有一点我觉得可以肯定：<strong>你起码得讲讲在这一周发生的事情吧？</strong></p>
<p>上面讲的这些自然也是在这一周发生的事情，但是如果我把前面的这些内容放到 Ephemeralis-Weekly（8），或者是第九期、第十期或者是其他的随便哪一期里面，我相信大家并不会感觉有什么违和感。甚至如果这个周报在十年以后还存在，我把前面的内容放进去，看起来也不会有什么大的问题。</p>
<p>换句话说：<strong>这些内容几乎是没有时间属性的</strong>，或者说，在大部分人时间感知的层面，其并不具有明显的时间属性。</p>
<p>当然，我并不是说这些内容完全和时间无关。除去任何事件都有的客观的时间属性外，如果我们把足够多、时间跨度足够长的事件排列在一起，就可以看出一些时间上的变化。远了不说，如果各位能搞到我中学时期写的文章，和现在小氯的博文摆到一起，就可以非常明显地看出表达方式、语言风格的区别，甚至可以看出一些人生经历的变化。甚至我们还可以兴味使然地分门别类地分析各个时期各个种类的文章的表达区别以及其背后的成因，拿着文学史中为大家们准备的那些方法杀鸡用牛刀地看一看这个园子的气候变化。</p>
<p>不过，这是统计学家和文学史家们的工作了，哪有人会为了一个蛮荒之地的小岛主人去如此大费周章呢。而且就算是这样，那你看到的应该也不能算是小氯了，只能算是 <code>E5B08FE6B0AF</code>。至少就目前为止，人的形象是无法通过分析的手段进行感知的，不然为什么即使是当代研究鲁迅先生的大师也写不出《回忆鲁迅先生》。</p>
<p>扯远了，我们回来。在高中时，我就喜欢说一句话：高中的生活让人失去了时间感。因为周一到周日，都是上课和自习，或者还有考试，特殊的月末假呢，也是每个月一次。如此的循环往复，每天或者每周期的工作大体都是一样的。有人会问，那每天干的活不是不一样吗？你说得对，但是至少就我而言，现在的我完全无法分辨出做湖南四校的第 X 次联考模拟卷的那天和做东北三省四校联考的那天到底有什么不一样。</p>
<p>网络的发达，解构了空间上的「附近」，而对生活感知主动或者被动的放弃，解构了时间上的「最近」。所以有一句老话「日子经不起混」。混日子时，你对时间的感知实际上是原地踏步的，今天和明天、后天都一样，因此在你意识到之前，许久就已经过去了。在 Rime 中，我们只需要打出 <code>dt</code> 就可以方便地打出一个时间戳，但是我们的时间却变成了用毛玻璃包裹的方盒子，里面的东西似乎影影绰绰地不一样，却再也让人没有了打开的兴趣。</p>
<p>那么我们还剩下什么？或者提一个更严峻的问题，我们的生活何以成为生活，又何以成为自己的生活？</p>
<p>答案其实不难想：就是经历，我们能够感知到并且记住的经历。相对论告诉我们，任何事件都是四维时空中的一个点，它和时间本就分不开；而没有任何事件的时空，本身也没有任何存在的必要了。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>模糊的、一段时间的气氛化的感知，或者是脉冲式的、一个被我们记住的事件，共同构成了我们过去的回忆。</p>
<p>还是拿我的高中说吧，我虽然分不清高中的每一天，但是我能记得，我第一次考联考第一，是在高一上学期刚开学不久，大概是十月份；我第一次下决心「我要学化学」，是在高一的期中考试之后；在疫情期间，火锅吃得比较多，每天都起来做核酸检测，每天下课都会统一做锻炼，有一段时间的精神状态极差，会给不存在的人写信；第一次手术是在高二升高三的暑假；高三下学期的居家学习做了成堆成堆的卷……</p>
<p>所以，如果想多感知到、多记住一些东西，那么也只好让自己的生活更加鲜亮一些，以及用某种方式记录下，有哪些只发生在最近或者当下的事情，比如说，这周做了第一个 PA，学会了一种船新的算法；最近去了一个讲座，听了某某大佬讲了什么内容，本来自己也知道这个东西，但是大佬却能讲出新高度；马上要放假了，打算出去看看；第一次点了某家麻辣烫的外卖，味道做得还不错，但是包装有点差；这周不太想写东西，看了不少自己以前喜欢的电影……说到底，其实都是或大或小的经历，能帮助我们标识出，这段时间与其他的时间到底有什么不同，到底值得我们记住什么。</p>
<p>小氯以后写周报，也会试着改变一些，多加一些这样的内容。这样或许才更像是对自己所浪费的这一周生命的记录。</p>
<p><strong>毕竟，当世界走到尽头，我们朽坏的精神剩下的，唯有时光。</strong></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>广相的「事件」和我们探讨的「事件」并不完全一样，这里并不是严谨的物理学讨论。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>升级系统那点事</title><link>https://chlor.me/upgrading-systems/</link><pubDate>Wed, 18 Sep 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/upgrading-systems/</guid><category>macOS</category><category>Linux</category><category>折腾</category><description>本文介绍了作者更新系统的经历。macOS Sequoia 的更新过程虽然遇到了一些问题，但新功能如 Markdown 预览对其有帮助。接着，作者提到了 iOS 18 和 iPadOS 18 的顺利升级，期待苹果能够专注于产品体验的优化。随后，作者讲述了 Ubuntu Server 24.04.1 LTS 的更新经历，解决了 SSH 连接中断的问题。最后，作者表达了对全面拥抱开源的兴趣，尤其是 Fedora 和 Manjaro 发行版，以及 Framework Laptop 的潜在购买计划。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/upgrading-systems-cover.avif" alt="升级系统那点事" />
        </figure>
        <p>各位老友们好，我是 Chlorine。今天给我的设备们更新了系统，咱们大体讲讲。</p>
<h2 id="前置">前置</h2>
<p>虽然本文的内容是技术和生活分享，但是小氯还是希望提醒各位老友，今天在历史上是一个极为特殊的日子。忘记历史，就意味着背叛。万望各位生于华夏的老友，勿忘国耻。</p>
<h2 id="macos-sequoia">macOS Sequoia</h2>
<p>大概是两天之前吧，Apple 发布了 macOS 的最新版本——macOS Sequoia 的正式版。</p>
<p>Sequoia 的意思是「红杉树」，这里说的应该是内华达山脉（Sierra Nevada，没错，就是那个 High Sierra）的红杉国家公园。据说牢果喜欢用 California 的一些地理景观命名操作系统，比如过去的 Big Sur（大苏尔，加州中部海岸的一个地区），Monterey（蒙特雷，一个海滨城市），Ventura（文图拉，旅游胜地），Sonoma（索诺马，著名的葡萄产地）。</p>
<h3 id="踩坑">踩坑</h3>
<p>刚开始我更新的时候反复踩坑，要么是显示什么「找不到所需的 Rosetta 更新」，要么速度极慢。我本来以为是带清校园网的抽象活，毕竟带清校园网的优秀质量和高度稳定性早已通过了实践的考验（在教学楼连不上网）。后来我想到可能是代理的问题，就把网络设置改了下，速度就快多了。</p>
<p>总更新时间不超过一个小时，至少是在我衣服洗完之后就更新好了。然后重启电脑即可。</p>
<h3 id="体验">体验</h3>
<p>总体而言，macOS Sequoia 的设计风格和 macOS Sonoma 基本没区别，但是细节上有变化，比如通知变窄了。之前听说 macOS Sequoia 的设计风格会大改，看来是没实现。</p>
<p>牢果官方说的几个更新点对我来说几乎没什么感觉，比如 iPhone 镜像，这个甚至在 Windows+Android 都能实现（借助牢软出的一个软件），不能拖拽文件的话对我来说几乎就是毫无作用，最多就是接一个通知；内置密码管理器，我有 Vaultwarden，用不着这个（但是我还是把密码导入了一份，毕竟不知道哪天服务器就连不上了，有一手准备总是好的）；Calendar 和 Reminder 同步，这个属于概念神，但是我目前用得不多；而 Apple Intelligence 还没发布，发布了估计也用不了。而且我也不想用，让 AI 盯着我的一举一动我实在是令人头皮发麻。不知道牢果后续会不会加什么抽象的狠活，如果实在是太离谱，我就得考虑锁定版本或者换到 Linux 了。Fedora 和 Manjaro 都不错，配置一个 KDE macOS Sequoia 应该可以复刻 macOS 的风格。</p>
<p><del>才买电脑几天你就想着换新的</del></p>
<p>说起来，倒是有一个小功能很戳我：空格预览支持 Markdown 了。虽然只能预览为纯文本，但是已经足够了。反正，Markdown 的本质就是纯文本。</p>
<p><del>那为什么不能预览 CSS？！</del></p>
<p>目前为止没遇到任何兼容性和数据损失问题。不过如果大家想升级，还是建议备份。小氯没有移动硬盘，因此没备份，这是不对的。</p>
<h2 id="ios-18--ipados-18">iOS 18 &amp; iPadOS 18</h2>
<p>iOS 也迎来了一波升级。为了和 macOS Sequoia 配套，我直接全部升级了。也没遇到什么问题，算是你过关了吧。</p>
<p>还是希望牢果不要整太多抽象的活，好好做产品。不然换一个系统需要适应的时间是很久的。</p>
<h2 id="ubuntu-server-24041-lts">Ubuntu server 24.04.1 LTS</h2>
<p>别急着走，茶还没喝完呢。</p>
<p>前几天 SSH 我的 server 时，Ubuntu 就开始喋喋不休地告诉我更新（<del>Ubuntu：我明明只是每次登录说一遍而已</del>）。说实话原本不想更新，原因在于对新版本的不信任。要不为什么现在这么多服务器还是 Ubuntu 18.04。</p>
<p>可是随着这几天服务访问的频繁崩溃，我实在是绷不住了。虽然说有可能是带清校园网的抽象烂活，但是一想到承载在我大半个数字生活的虚拟机时常要在断联的边缘起舞弄清影，小氯就像吃甜味酸菜鱼一样难绷。</p>
<p>于是，<del>病急乱投医之下</del>我想到了更新。或许更新一下就好了呢。</p>
<p>那么来吧。</p>
<p>SSH 进去，先把包滚一遍：</p>
<pre><code class="language-bash">sudo apt update
sudo apt upgrade
</code></pre>
<p>然后直接更新：</p>
<pre><code class="language-bash">sudo do-release-upgrade
</code></pre>
<p>然后会有一大堆安装记录。注意里面有一个会给你单独开一个新的 sshd，这时候 tmux 到一个新的窗口，维持好 SSH 的登录即可。</p>
<p>剩下的事情一路回车，但是这里面出现了一个问题：我洗衣服去了，回来一看，好家伙，connection closed。</p>
<p>我瞬间绷不住了。因为就我的经验来看，只要出了这个问题，除非飞天面条大神洒高汤，否则根本修复不了。</p>
<p>还好另一个 SSH 还在。查看一下系统状态，这个更新进程似乎是坏掉了（也有可能是我判断失误）。</p>
<p>妥，那咱们中止进程，重来。</p>
<p>首先把进程都鲨了：</p>
<pre><code class="language-bash">sudo killall apt dpkg do-release-upgrade
</code></pre>
<p>然后再看一遍：</p>
<pre><code class="language-bash">ps aux | grep -E 'apt|dpkg|upgrade'
</code></pre>
<p>要是还有就 <code>-9</code> 强制超度。</p>
<p>然后把锁文件删了：</p>
<pre><code class="language-bash">sudo rm /var/lib/dpkg/lock
sudo rm /var/lib/apt/lists/lock
sudo rm /var/cache/apt/archives/lock
</code></pre>
<p>修复系统状态：</p>
<pre><code class="language-bash">sudo dpkg --configure -a
sudo apt install -f
sudo apt update
sudo apt upgrade
</code></pre>
<p>按理说下面应该重启更新，然而我记得我重启系统之后，就更新好了。不知道怎么回事。当然我这方法挺暴力的，谨慎使用。</p>
<p>然后 SSH 就可以回去了。我用 IP 加端口看了下 1Panel，应该是 OpenResty 的问题。不知道怎么回事。</p>
<h2 id="结语">结语</h2>
<p>水了篇文章，内心就如 1939 年末的欧洲——毫无波兰。</p>
<p>说起来，真有点想换 Linux 全面拥抱开源了。Unix shell 我已经基本会耍了，就是两个问题：用什么发行版，刷什么设备。发行版我比较喜欢 Fedora 和 Manjaro，而设备方面，最合适的应该是模块化电脑 Framework Laptop。问题是 FWL 在大陆地区买不到，或许我去牢美那边交换或者实践的时候会去看看吧。</p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（6）：无可热爱</title><link>https://chlor.me/weekly-6/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-6/</guid><category>周报</category><category>Zen</category><category>Matrix</category><category>AIGC</category><description>本文是作者周报的第六期，以轻松幽默的语气分享了自己对多种主题的思考和体验。首先，作者介绍了Zen Browser这款新浏览器，虽然其界面设计精致、性能较好，但由于bug频繁且仅处于Alpha阶段，作者对其当前表现略有保留。接着，作者描述了用Rust编写的Matrix服务器实现Conduit的部署体验，指出其轻量高效的优点。随后，作者简评了豆包AI的绘画功能，并分享了自己使用AI生成头像的经历。最后，文章逐渐转向深刻的个人反思，讨论了生活中无谓的琐事、理想与现实的冲突，以及意义感的缺失，表达了对时代与个体生活的质疑、困惑与思考。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-6-cover.webp" alt="Ephemeralis-Weekly（6）：无可热爱" />
        </figure>
        <p>各位老友们好，我是 Chlorine。一别旷日，心下甚念。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第六期，日期范围为公历 2024 年 9 月 9 日至 9 月 15 日。祝食用愉快。</p>
<h2 id="hellozen-browser">Hello，Zen Browser</h2>
<p>如果问我每天使用时间最长的应用程序是什么，那恐怕不是 VSCodium、Obsidian 或者微信，而是浏览器。浏览器是我们通往互联网的桥梁，也是我们与科技巨头的「隐私战争」最激烈的阵地之一。</p>
<p>现在浏览器市场的老大毫无疑问是 Chrome，如果我没记错，其市场占有率应该在 60% 以上，Edge、Safari、Firefox 和 Opera 等位居第二梯队。目前这几大浏览器中，唯一开源的是 Mozilla Firefox，这也是几个浏览器中公认对隐私尊重最好的。只不过，虽然 Firefox 是开源的，但是其和东家 Mozilla 也面临着很多非议（这会让人想到一些和 FOSS 意识形态有关的问题，小氯在这方面有一些不成熟的思考，有时间我会详细讲的）。于是，一些基于 Firefox 开发，但是预先做了许多隐私和安全方面处理的第三方分支出现了，我们姑且将之称为 pre-harden 版本。</p>
<p>关于 Firefox 的 pre-harden 版本，比较著名的应该是 <a href="https://librewolf.net">LibreWolf</a>（我很难不怀疑开发者起名的用意）。LibreWolf 很好，但是从某种意义上来讲，有点太好了——它尽心尽力地去除了那些试图窃取我们隐私的虫豸，但是却没有帮我们补齐曾经我们用隐私换取的体验，或者说是补齐得不够。</p>
<p>而且，就我个人而言，我对于 LibreWolf 的界面不太满意。作为一个 Arc 重度用户，我对 Arc 精致的设计和交互非常着迷。而要在 LibreWolf 中达到一样的效果，需要费非常大的力气。</p>
<p>后来，我在 GitHub 上发现了另一个开源项目：<a href="https://github.com/zen-browser/desktop">Zen Browser</a>，我们可以称其为「禅浏览器」。</p>
<p>在<a href="https://zen-browser.app">他们的官网</a>上，开发者高调地宣称：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Zen is the best way to browse the web.</p>
</blockquote>
<p>虽然比不上 Arc 的「改变整个互联网」这么自信，但是这个宣传语也已经够让人眼前一<del>黑</del>亮了。于是我下载了这个浏览器，并将其作为主力使用了一段时间。</p>
<p>那这个浏览器能配得上这个宣传吗？</p>
<p><strong>很遗憾，就我目前的体验，暂时还不能。</strong></p>
<p>总体而言，Zen 的交互在 Firefox 系浏览器中是相当精致的，甚至可以说是最精致的，没有之一。可以看出开发者的确下了很大的功夫去设计界面交互。就原生侧边栏这一个功能，就是难得可贵的了。其速度和内存占用要好于 Arc，但是没有达到明显优于的级别。在界面设计方面，还存在一些我不是很满意的细节，然而我不会改 Firefox 的 CSS，于是只好干瞪眼；而且，其目前为止还存在很多 bug，例如无法保持许多自定义设置（例如 DNS 保护中的偏好等级，甚至是侧边栏钉住的标签页都无法保留）。</p>
<p>那我为什么还是保留了它？</p>
<p>说出来大家可能不信：这个浏览器，到现在还只是 Alpha 版本，连 Beta 都不是。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>这么一说，好像前面的所有 bug 都变得合理了。</p>
<p>但是我并不这么认为。作为一个项目，Alpha 版本存在错误可以得到 Fellows 的理解；但是作为一个产品，存在错误可不会得到用户理解。当然，我这么说并不是在对 Zen 吹毛求疵、严以待人，Zen 是一个非常优秀且未来可期的产品，我希望表达的意思是：如果各位老友希望使用 Zen，请注意和明确直至完全理解可能要承担的风险。</p>
<h2 id="helloconduit">Hello，Conduit</h2>
<p><a href="https://conduit.rs">Conduit</a> 是一个用 Rust 写的 <a href="https://matrix.org">Matrix</a> 服务器实现，具有超轻量、高性能等优点。我看了一圈，目前简中圈的相关资料似乎不是特别多。</p>
<h3 id="部署">部署</h3>
<p>我们依然使用美好的 Docker。</p>
<p>找个你喜欢的目录，创建 <code>docker-compose.yml</code>：</p>
<pre><code class="language-yaml"># Conduit
version: '3'

services:
    homeserver:
        image: matrixconduit/matrix-conduit:latest
        restart: unless-stopped
        ports:
            - 8448:6167 # 左边的端口可以改一个你喜欢的
        volumes:
            - ./db:/var/lib/matrix-conduit/
        environment:
            CONDUIT_SERVER_NAME: 你的实例域名
            CONDUIT_DATABASE_PATH: /var/lib/matrix-conduit/
            CONDUIT_DATABASE_BACKEND: rocksdb
            CONDUIT_PORT: 6167
            CONDUIT_MAX_REQUEST_SIZE: 20000000 # in bytes, ~20 MB
            CONDUIT_ALLOW_REGISTRATION: 'true'
            CONDUIT_ALLOW_FEDERATION: 'true'
            CONDUIT_ALLOW_CHECK_FOR_UPDATES: 'true'
            CONDUIT_TRUSTED_SERVERS: '[&quot;matrix.org&quot;]' # 我们信任的实例，会进行优先通信
            # CONDUIT_MAX_CONCURRENT_REQUESTS: 100
            CONDUIT_ADDRESS: 0.0.0.0
            CONDUIT_CONFIG: '' # Ignore this
volumes:
    db:

</code></pre>
<p>然后直接部署即可：</p>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
<p>部署成功后，访问你部署的地址，如果看到一串「Hello from Conduit!」，那么恭喜你部署成功。</p>
<h3 id="注册">注册</h3>
<p>由于 Conduit 不带 Web 界面（原本的 <code>docker-compose.yml</code> 把这个部分注释了，我直接给删除了），所以我们需要找个 Matrix 的客户端进行注册，比方说 Element 之类的。</p>
<p>第一个注册的用户会成为管理员。注册成功后建议把配置文件的 <code>CONDUIT_ALLOW_REGISTRATION</code> 改成 <code>false</code>，防止有人恶意注册。</p>
<p>我目前的 Matrix 就采用自己的私有实例。但是吧，我的虚拟机在带清校园网内访问经常抽风，造成 Matrix 服务也不大稳定，因此我准备了一个备用账户。</p>
<p>我一直想用 Matrix Bot 代替飞书 Webhook，但是我还不会。</p>
<h2 id="hello豆包">Hello，豆包</h2>
<p><del>你这写的到底是周报还是 Hello 宇宙文集？</del></p>
<p>很早就听说过字节家的豆包 AI，但是没用过。这几天翻<a href="https://immmmm.com">木木老师</a>的博客说说，发现木木老师对豆包的 AI 绘画赞不绝口，于是我打算尝尝鲜。</p>
<p>试了一段时间，总体感觉属于还可以的水平，文字问答和 Kimi AI 差不多。其他的功能，像音乐生成和智能搜索我还没试过。</p>
<p>不过有一说一，这个 AI 绘画是真的可以。我用祖传的 prompt 去炼了会金，炼出了一些看着蛮不错的照片，其中包括小氯现在的头像。</p>
<p>——准确来说，是我头像的原图。</p>
<p>简单来说呢，我对头像的制作非常满意（虽然说细节上还有一些瑕疵吧），但是我试着将其换成头像后，远看起来，人物的腿部非常显眼，事实上也的确存在一定面积的裸露（我目测是四分之三长度）。</p>
<p>这不算是一个很暴露的比例，但是已经足以让一些较为严格的审查亮出黄牌了。我用凉心云的审核系统检测了一下，果然被警告了。</p>
<p>作为一位遵纪守法的独立博主，我不能接受这个事实。于是我花了很大力气，终于为人物加上了合适的衣着，也就是各位老友现在看到的头像。虽然细节处理上并不出色，但是至少可以用了：这个版本是全年龄段适宜的，至少就我国法律而言，不会碰到任何意义上的红线。</p>
<p>反正总而言之，豆包 AI 的绘画确实很不错，大家可以试着玩一玩。</p>
<h2 id="开学">开学</h2>
<p><del>终于讲点正事了</del></p>
<p>从 9 月 9 日开始，小氯就正式开学了。一周下来体验就一个字：累。</p>
<p>牢针大二的专业课非常抽象，诸如贵系的 DSA、计系概和贡系的会原、中微等硬课都逝坟的核癌可氢，与之相比，CTMR 和常微简直显得仁慈。尽管第一周的事情很少，但是小氯也已经感受到了令人咋舌的压力。</p>
<p>不过幸好，第一周完事就是美好的中秋假期，可以稍稍<del>摆会烂</del>喘口气。我很难想象，到了期中和期末会是怎样一番勃勃生机万物竞发的盛景。</p>
<h2 id="无可热爱">无可热爱</h2>


<div class="my-6 rounded-lg border-l-4 p-4 border-red-500 bg-red-50/50 dark:bg-red-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-red-700 dark:text-red-300">
        <div class="w-5 h-5 i-carbon-warning-alt">
        </div>
        <span>Caution</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>警告：下面的若干段话相当的幼稚和矫情。各位老友可以先回自己的房间，我会把线上故事打开。这样如果不想听，直接关掉即可。我不希望周报变成另外一场无聊而冗长的会议。</p>
    </div>
</div>
<p>当我写下这段话时，我正在开一段非常无聊且冗长的会。台下的每个人看起来都生无可恋，我怀疑台上的实际上也是。</p>
<p>我的心情不太好。刚刚收到了 <a href="https://physnya.top">Physnya</a> 老友的邀请邮件，希望能去新生舞会面基。插句话，Physnya 老友应该是目前离小氯地理位置最近的一位了，平时可能在几百米以内（第二近的可能是<a href="https://dusays.com">杜老师</a>？）。说实话我还是蛮心动的，除开可以和老友面基外，毕竟当初三字班的新生舞会我还没参加，虽然我腿脚不好且在运动方面毫无天赋，但借着四字班的学弟学妹们的活动感受一下氛围也不错。</p>
<p>然而我去不了。我只能在会议上摸摸鱼，抓紧讲话的间隙做一点工作，或者写写代码。</p>
<p>当然，经常在会议上摸鱼的朋友都知道，这样的效率不高，甚至极低。于是小氯的情绪变得非常不稳定<del>想随机找一位幸运观众进行氧化</del>。</p>
<p>趁着中场休息的功夫我跑去接了瓶水，然后在外面东倒西歪地走，假装自己可以不太清醒地耍耍酒疯（各位老友应该知道，小氯因为身体原因不能喝酒）。</p>
<p>越喝我的情绪越不稳定，到最后内心只剩一个想法：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我到底在这干什么？这不就是在浪费生命吗？</p>
</blockquote>
<p>没错，完完全全就是浪费生命。把本来可以认认真真写代码，或者去和老友畅谈文事共叙旧谊丰富人生体验，或者只是在紫操走一走吹吹风听听歌的时间花在一场结束后不会对我有任何技能价值或情绪价值的会议上，顺便还会导致我今天睡得不好。</p>
<p>恕我直言，作为一个学过经济学原理的人，我面对这种效率和公平一点不沾边的行为会感到异常不满。</p>
<p>既然都已经不满了，索性让我再多吐槽几句吧。</p>
<p>我们的日子到底充斥着多少这样浪费时间的无谓之举？把最好的时光花在不得不做的乱七八糟的琐事或者自我麻痹的短视频上，到头来只留下了无穷无尽的空虚。这样日复一日年复一年，找不到任何可依托的锚点，没有任何喜欢或者追求的事物，到头来就像秦始皇陵地下的兵马俑，只剩下一副干瘪的躯壳，即使摆出笑的造型都不知道有什么可高兴的。</p>
<p>我不止一次发出过这样的质疑。一般我用来自我安慰的方式有两种，温和派就是那句曾经激励我的「热爱可抵岁月漫长」，激进派不太喜欢给人留面子，会直接劈头盖脸地斥责你：你的所有空虚、寂寞、伤感、迷茫，归根结底就两个字：闲的。</p>
<p><strong>好，那小氯今天倒是想问一句：我们应该热爱什么？就算我们不闲下来，每天忙忙碌碌过着「充实」的生活，那又是为了什么？</strong></p>
<p>千人千面的问题。但是只要我们追问几句，一切看似冠冕堂皇或者热血沸腾的答案都会被审视的大剑劈成苍白无力的自证的碎块。</p>
<p>这是一个意义被解构的时代，一切的崇高都可以被从神坛上拉下，被粗暴地揭去其金色的铠甲或长袍。泛娱乐化消解了严肃性，怀疑主义动摇了合理性，而功利主义打碎了理想性。意义一旦被解构，就几乎无法重建，如同破镜不能重圆。我们自然可以用理性去批判其中的不合理之处，但是就像《天下第一楼》中说的，「一个人干，八个人拆」，意义的崩塌可比建构快多了。而怀疑的种子一旦种下，必然会在一个不太远的时间引发一场思想的雪崩。</p>
<p>这个问题在高中几乎是不存在的——至少就小氯的人生经历来说。高中是一个极其纯粹的阶段，除了学习几乎不需要接触任何其他事情。这就造成我们的理想主义可以安心地躲在长城之后，免于任何铁骑的冲击。而一切疑问都可以被「考一个好大学」所掩盖，大学生活本身的神秘性也为这种推脱提供了情感上的有力支持。因此，小氯可以一天做上十几张卷而不去想为什么要去做卷，而一句「追逐人类心智的荣耀」就足以让人热血沸腾许久。</p>
<p>但是乐园消失了就无法重建，朴素集合论和形式主义系统再令人沉醉也逃不过 Russell 悖论和 Gödel 不完备性定理的恶魔。我们当然可以用下一个大众意义眼中的「人生阶段」作为自己的目标来继续激励自己，例如说保研或者国外升学或者 Offer，但是我们永远逃不开这个意义的终极追问。科幻文学界可以「嘲笑宏大叙事，消解终极追问」，<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>但是作为个体的我们却无法忽视这个自我幻境之中的阿喀琉斯之踵。至于将自己的目光放近，只是感受生活中的小确幸，抑或守护自己身边的熟悉一隅，这种生活方式「虽然清丽飘逸，但却独欠风骨」。而且我很怀疑，武陵人是否真的能回到桃花源。至于搞钱，似乎只有利欲熏心的资本家才能将其作为人生的终极意义，而且在当下的经济形势，估计这个目标也难以为继。</p>
<p>一旦人无可热爱，意义的消解就是生活的破碎。工作变成了苦兮兮的打工，娱乐变成了自我麻痹的无形酒精。人的断片从未消解，而是以另一种形式延续下来，并且正在侵蚀人心的道路上披荆斩棘一往无前。文明精神上的熵增似乎已经不可避免，最后也不知会来一场现实意义的赛博朋克 2077，还是幸存者在辐射的废土上苟延残喘，或者是数据主义的洪流如人曾经洗刷掉动物和神明一般洗刷掉人类，将曾经在进步和吹嘘中飘飘然认为自己可以万世长存的文明如泥石流中的土块般冲散。这么看来，全体人类搬进元宇宙倒可以算是一个相当好的 HE，起码在一段时间内，可以享受一个所谓「质料与原本完全不同，因而问题也不再存在」的世界——不过我并不认为元宇宙里就不用上班，很可能变成二次元人物之后还得打工。</p>
<p>说了这么多，感觉对于每一个个体而言，除了被博弈论嘲笑的微乎其微的团结的希望，似乎剩下的唯一选择就是不去思考终极问题，用上文所述的方法去欺骗自己一生。不是说这样不好，这样可以过得相当幸福，甚至可以成为一个伟大的人——通常意义上的，创造出丰富的物质和精神价值。</p>
<p><strong>然而我们必须思考</strong>。</p>
<p>我曾经做过一个心理测试，里面有一道题：清醒地痛苦和糊涂地幸福，你选择哪个？</p>
<p>我当时选择的是前者，我记得。但是现在看来，这根本不是一个能选的问题，因为能够不思考的，估计只有被圈养的动物。</p>
<hr>
<p>乱七八糟说了一大堆不知所云的话，抱歉污染到各位老友的时间线了。</p>
<p>按理说，小氯作为一个在大众意义上被认为是未来的精英群体或者国家栋梁的年轻人的群体的一员，不应该如此「悲观」，但是，很可能正因为看得更多，才会想得更多。当然，更大的可能是只是在没有看清世界全貌时的无病呻吟。我希望是后者。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>简单科普一下：Alpha 是软件开发的早期版本，相当于「内部测试版本」；而 Beta 可以看作「公测版本」。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>出自《三体》的序言，不知记得是否准确。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（5）：只是去做</title><link>https://chlor.me/weekly-5/</link><pubDate>Sun, 01 Sep 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-5/</guid><category>周报</category><category>Vaultwarden</category><category>Gitea</category><category>Obsidian</category><description>本文是作者周报的第五期，详细记录了自己在技术折腾、笔记软件选择以及生活琐事中的思考与实践。主要内容包括部署Vaultwarden和Gitea的经验分享，笔记软件的使用和选择中的感悟，高效率完成一次准备任务以及在健康问题下的饮食调整。文章风格轻松幽默，体现了作者对技术和生活的热爱与反思。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-5-cover.webp" alt="Ephemeralis-Weekly（5）：只是去做" />
        </figure>
        <p>各位老友们好，我是 Chlorine。水篇文章。</p>
<p>本期已经不能称作「周报」了，因为时间跨度长得我自己都不知道是多少。各位当个乐子看就好。</p>
<p>祝食用愉快。</p>
<h2 id="hellovaultwarden">Hello，Vaultwarden</h2>
<p>开局咱们先甩一个 Hello 宇宙新成员。本来这个是打算单独水一篇文章的，但是实在是写不出什么新颖的东西了。</p>
<p>这个起因说来大部分还是我比较闲，当然，对外说的原因是 Chrome（实际上是 Arc）的密码管理机制实在是太聪明了，它……居然都不做个本地加密。行吧，小厂的产品这样我也就忍了，您 Arc，号称改变互联网的下一代浏览器，以及您，Chrome，Google 最得意的作品，世界市场占有率第一的浏览器，对于用户最隐私的部分……连个加密都不做？我知道您对您的产品沙盒的坚固程度很有自信，但是，我是说但是，有没有一种可能，有一些软件喜欢扫盘呢？</p>
<p>（冷知识：有一段时间我本地存放一些重要信息的 <code>tokens.csv</code> 也没加密，甚至没有沙盒。后来改用 GPG 加密了，当然现在找到了更聪明的存放方法。大家可以在评论区嘲笑小氯了。）</p>
<p>于是我想改用 iCloud 自带的钥匙串。这是个很不错的选择，但是由于最近我又开始使用我的安卓备用机了，这就变成了一个 sour point。而且，iCloud 密码管理器在接管 Chrome 等的自带密码的时候似乎总是有问题，不知道为什么。</p>
<p>所以我盯上了伟大的自托管密码管理器—— <a href="https://bitwarden.com">Bitwarden</a>。</p>
<p>雷蒙德·卡佛有本书：《当我们谈论爱情时我们在谈论什么》。小氯不懂谈论爱情时谈论的是什么，但是当我们谈论 Bitwarden 的时候，我们谈论的几乎都是 Vaultwarden（拜托……不要那么生硬地抖书袋可以吗？）。</p>
<p>Vaultwarden 是一个 Bitwarden 的分支——准确来说，是一个实现了 Bitwarden API 的第三方服务（因为 Vaultwarden 的代码实际上是自己写的），采用我们喜闻乐见的 Rust 编写。Vaultwarden 的内存占用极低（据说是 10M 左右，我实际测试下来大概是 30M），并且兼容几乎所有 Bitwarden 的 API，适合个人和小型组织使用。</p>
<p>为了省事，我们直接使用 1Panel 进行部署即可。在应用商店搜索 Bitwarden 就可以，安装的实际上就是 Vaultwarden。</p>
<p>安装后登录，创建一个主密码。这个东西很关键，不推荐使用日用的密码，可以通过命令行生成一个随机字符串，然后放在一个安全的地方存放好。</p>
<p>在登录后，回到 1Panel，修改一下我们的 <code>docker-compose.yml</code>，添加几个环境变量：</p>
<pre><code class="language-yaml">environment:
    - TZ=Asia/Shanghai # 时区，按自己的来
    - SIGNUPS_ALLOWED=false # 禁用注册
    - INVITATIONS_ALLOWED=false # 禁用邀请
    - ADMIN_TOKEN=你的管理员 token # 推荐用 openssl rand -base64 48 生成一个
    - LOG_FILE=/data/vaultwarden.log
    - LOG_LEVEL=warn
    - SHOW_PASSWORD_HINT=false # 禁用主密码提示
    - DOMAIN=你反代的域名
</code></pre>
<p>完事。此外，推荐开启 2FA 和 HTTP 鉴权，更安全。毕竟这玩意是最不能暴露的。</p>
<p>如果需要导入 Chrome 存储的密码，可以在 <code>chrome://settings</code> 页面的密码管理工具中导出 CSV 再导入；如果需要接管浏览器级别的密码存储，安装 Bitwarden 扩展即可。此外 Bitwarden 还提供了 iOS 和 Android 客户端，以及一个 Bitwarden Authenticator 验证器（不过 2FA 用 Bitwarden 自己也可以做）。</p>
<p>（小声吐槽一句：Bitwarden 的这个手机客户端实在是太难看了）</p>
<p>如果需要更多知识，可以参考<a href="https://atpx.com/blog/docker-vaultwarden/">这篇教程</a>。</p>
<h2 id="hellogitea">Hello，Gitea</h2>
<p>这是我部署的又一个比较大的服务。起因其实是我希望使用 Git 同步一下我的 Obsidian 笔记库，但是又不太放心把笔记交给 GitHub 和牢软（<del>那你早干嘛去了</del>），因此打算自己部署一个小 Git DevOps 玩玩。那么最合适的选择就是 Gitea 了，Git with a Cup of Tea，轻量美观的服务。</p>
<p>这里是 Gitea 的官网，可以参考官网的部署方式。由于我是个人使用，因此 SQLite 就足够了，MySQL 占用资源太多了，另一个原因是 1Panel 陷害我，部署 Gitea 之后差点没把我机器干废。</p>
<pre><code class="language-yaml">version: '3'
services:
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    restart: always
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DB_TYPE=sqlite3
      - RUN_MODE=prod
    ports:
      - &quot;3000:3000&quot;
      - &quot;222:22&quot;
    volumes:
      - ./data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

</code></pre>
<p>登录后会出现注册页面，按照要求操作即可。如果是个人实例，为了安全，推荐在登录后把注册等等乱七八糟的功能全都关了。编辑 <code>data/gitea/conf/app.ini</code> 即可。总体而言，由于我的虚拟机在国内，速度还不错，不比 Gitee 慢多少 :)</p>
<p>关于 Gitea 更多的部署知识，可以参考<a href="https://dusays.com/722/">杜老师的教程</a>。</p>
<p>顺便说一句，我的 Gitea 实例叫「小氯の鲜果茶」(๑˃ᴗ˂)ﻭ</p>
<h2 id="折腾笔记软件">折腾笔记软件</h2>
<p>接着上面 Obsidian 的事情，说说最近折腾笔记软件的经过。</p>
<p>我是一个卡片笔记的爱好者。不过，我的思路和经典的 Zettelkasten 还不一样：卢曼教授会给卡片编写细致的索引，但是我不喜欢。我甚至都不希望有太明显的层级，这一方面是因为 <a href="https://www.pseudoyu.com/zh/">Pseudoyu</a> 说的「心智负担」，另一方面也与我的思考方式有关。</p>
<p>我是一个思维极其跳脱的人，平时就喜欢胡思乱想，从一个思维锚点出发可以通过一系列几乎是难以理解的联想迅速跳转到数个看起来八竿子打不着的话题（而且我的语速极快，使得和我闲聊的人很多时候难以跟上我的思路）。同时，我的学科背景算是比较广泛的，高中时以「九边形战士」（我们存在的九个学科——数语英物化生政史地。相对来说，我地理比较差）而闻名，分科后理科拿高分的同时也喜欢闲着没事去钻研人文社科相关的内容，尤其语文和历史可以说好于绝大部分的文科生。现在大学读的专业是计金，天然带着交叉属性。平时也爱折腾，了解各个领域奇奇怪怪的小知识。因此我的知识库（如果有）主打一个多且杂，注重在同一个问题中运用各种可能的知识进行<del>胡乱的</del>链接。所以，严格的分类和放置对我来说反而是桎梏。我最多是打 categories（如果领域太多，加一个 subcategories）和 tags，有时候连 tags 和标题都懒得打。</p>
<p>回到笔记软件。我对笔记软件的理想要求如下：</p>
<ul>
<li>良好的编辑体验，支持 Markdown 和 GFM 标准（或者其他轻量级标记语言）</li>
<li>开放格式，或者可以导出为开放格式</li>
<li>高度卡片化和非线性</li>
<li>支持随时随地闪念记录</li>
<li>支持剪藏</li>
<li>支持双向链接，关系图谱属于加分项，可有可无</li>
<li>足够的写作性能、搜索性能等</li>
<li>支持同步（移动端有简单的查看和闪念记录即可，主要要求可靠）</li>
<li>（optional）白板，可视化思维工具</li>
<li>本地化，离线可用</li>
<li>开源，或至少需要保证尊重用户隐私</li>
</ul>
<p><strong>不过，我找了很久，遗憾地发现，满足我全部要求的 silver bullet 目前是不存在的。</strong></p>
<p>目前为止，Obsidian 应该是我用过编辑体验最好的笔记软件，Easy Typing、LaTeX Suite、Completr 等插件的加持使得 Obsidian 可以薄纱市面上几乎所有的编辑器，同时高度可扩展性的平台生态为其增加了几乎无限的可能；TiddlyWiki 是最符合我卡片笔记思维的一款，单文件 self-contained、开源免费也为其增加了最大限度的可靠性；思源笔记应该是所有类 Notion 软件中对 Markdown 支持最好的一款，同时支持和 Memos 以及 Web Clipper 的 100% 整合；Affine 的设计风格我非常喜欢，同时支持手写白板也非常诱人……</p>
<p>乱花渐欲迷人眼。我在「挑选一个最好的笔记软件」这件事上越陷越深，浪费了不知道多少时间。</p>
<p>直到我想起我和娘亲的一段对话：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>——儿子，你回去上学了会想家吗？</p>
<p>——会啊。</p>
<p>——那怎么办？</p>
<p>——想就想呗，也不耽误干活。</p>
</blockquote>
<p>这款软件不完美，不等于它不能用。既然我还没到「能自己写一个完全满意的工具」的程度，那也只好先从现在能用的资源里挑个最好的。于是我暂时放下了追求完美的念头，继续用我的 Obsidian。我甚至都没完全使用其功能去构建什么工作流，只是用。Apple Notes 和 Memos 这些辅助工具也用，我也没想着去做什么大的整合，一方面做不到，另一方面没必要，「又不是不能用」。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.
—— Donald Knuth</p>
</blockquote>
<p>以及我很喜欢说的一句话：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>PKM（个人知识管理）的前提，是你有知识。</p>
</blockquote>
<h2 id="接一个-pre">接一个 Pre</h2>
<p>我们的实践成果答辩马上就要开始了，需要做个 pre（presentation）。本来这事是支队长的责任，和我关系不大，但是我们经管的支队长临时有事，于是我接下了这个活（没错，我们同一支队答辩需要分院系，牢针就是这么抽象）。</p>
<p>说实话我比较懒，需要的资料又迟迟拿不到，因此我光明正大地摆烂了。但是老是这么摆也不是事，总不能到时候临场发挥。所幸，今天我们伟大的计金首相，也就是计算机系的支队长送来了我们的 PPT（我们用的 PPT 基本一样）。</p>
<p>面对又一次推掉这个活的机会（不细说了），我犹豫再三，还是选择了继续做。我简单阅读了 PPT，开始动手写讲稿。没写多久，大概一个小时就写完了。我<del>扯皮</del>写报告的能力大家还是可以相信的。</p>
<p>结果居然得到了老师的认可。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240901191154.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="428"  />
    
</figure></p>
<p>然后我花了点时间和支队长讨论了下，修改了不少细节。前前后后加起来用了一上午。</p>
<p>我外婆喜欢说一句话：「眼是懒蛋子，手是好汉子。」话有点糙，但理不糙。</p>
<h2 id="喝点什么">喝点什么</h2>
<p>最近检查出了尿酸偏高和痛风性滑膜炎，算是我的人物特质了，每年夏天随机获得一个病症。因此最近在大规模喝水（这两个词是怎么连起来的？！）。但是喝多了会感觉嘴里没味道，因此想了一个办法，柠檬水。</p>
<p>不是蜜雪冰城的柠檬水，就是柠檬，水。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240901185937.avif" alt="拍得很没有美感" title="拍得很没有美感" 
        class="mx-auto rounded-lg block" loading="lazy" width="397"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        拍得很没有美感
    </figcaption>
    
</figure></p>
<p>好喝吗？不好喝，很酸，即使我对酸的耐受力很高，我也不会觉得这种东西好喝，但是就是莫名其妙喝了一杯又一杯。</p>
<p>我喜欢各种各样的饮料，尤其是奶茶和果茶。在园子里面，我最喜欢桃李园的元气莓莓，少糖的。可惜这次恐怕是要和它们说再见了。</p>
<p>我甚至还有过更加「大逆不道」的想法：我想尝一尝伏特加，战斗民族的饮料。据说斯米诺红牌味道比较好，尤其是兑果汁的时候。但是最终还是放弃了，身体健康之外，我不喜欢和任何烟酒沾边。</p>
<p>先说这么多吧。马上我就要开学了，下次写周报的时候，我应该已经回园子里了。</p>

      ]]></content:encoded></item><item><title>服务器除虫日志</title><link>https://chlor.me/jailing-server-chongzhi/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/jailing-server-chongzhi/</guid><category>折腾</category><description>本文讲述了作者偶然发现自己的服务器遭到了一些攻击，主要是试图用 root 和不存在的用户名登录等。作者对之十分生气，于是写了一个脚本扫描了攻击者的 IP，使用 Fail2ban 将其永久封禁，同时设置了定时任务对试图用 root 登录的攻击者进行封禁。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。本来打算鸽一段时间，等备案完成再水文，但是没办法，键盘不允许（<del>键盘：关我什么事</del>）。</p>
<p>昨天闲着没事又去看我的服务器，偶然打开了 1Panel 面板的 SSH 登录日志，结果不看不知道，一看吓一跳……</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240825090708.webp" alt="好几万条的记录" title="好几万条的记录" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        好几万条的记录
    </figcaption>
    
</figure></p>
<p>我简单看了下，大部分的攻击都是来自海外的（也有国内的，我就不说是哪个地方的了）。攻击的 IP 高度重复，手段主要集中于使用 <code>root</code> 进行登录，以及尝试蒙用户名。幸亏我的机器除了 <code>root</code> 拢共就我一个用户（系统自动生成的除外），而且只有我能 SSH 登录，不然可能还真就叫人钻空子了。</p>
<p>然后我就坐在那想，越想越气。欺负人都欺负到我小氯头上了，这已经不是一般的虫豸了，必须要出重拳！</p>
<p>于是我写了个简单的脚本：</p>
<pre><code class="language-bash">#!/bin/bash

LOG_DIR=/var/log

OUTPUT_FILE=/home/yoghurtlee/chongzhi.txt

# 方便审查
LOGIN_RECORD_FILE=/home/yoghurtlee/chongzhi_jilu.txt

&gt; $LOGIN_RECORD_FILE

for log_file in $LOG_DIR/auth.log*; do
    if [[ -f &quot;$log_file&quot; ]]; then
        grep &quot;Invalid user&quot; &quot;$log_file&quot; &gt;&gt; $LOGIN_RECORD_FILE
    fi
done

grep &quot;Invalid user&quot; $LOGIN_RECORD_FILE | awk '{print $10}' | sort -u &gt; $OUTPUT_FILE
</code></pre>
<p>然后赋予可执行权限：</p>
<pre><code class="language-bash">chmod +x chongzhi.sh
./chongzhi.sh
</code></pre>
<p>获得了一群 IP。全都加到 1Panel 里面 Fail2ban 的黑名单里面，杜绝其访问我的一切服务。</p>
<p>然后我又写了个定时任务，监控所有尝试用 <code>root</code> 登录的 IP，一旦发现直接永久封禁。你们这帮攻击者给我老实呆着，看我派 Fail2ban 来把你们一个一个送上天！</p>
<p>然后的话……其实我也没什么好办法了。封禁已经是我能想到的最好的防范措施了，总不能拿我的服务器去反向攻击它们吧。</p>

      ]]></content:encoded></item><item><title>园子装修日志（2）</title><link>https://chlor.me/yuanzi-decorating-2/</link><pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/yuanzi-decorating-2/</guid><category>博客</category><category>折腾</category><description>本文记录了作者最近优化 Hugo 博客的过程，包括优化 GitHub 卡片、重构 CSS 和侧边栏等。优化包括样式、API 逻辑、错误处理等，重构 CSS 采用 SCSS 方法，导入特定页面样式。侧边栏优化了公告、目录、移动端显示和图标，使得代码结构更加整洁。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/yuanzi-decorating-2-cover.webp" alt="园子装修日志（2）" />
        </figure>
        <p>各位老友们好，我是 Chlorine。继续水文，讲讲这几天摸鱼的经历。</p>
<p>准确来说应该是我能记得的经历，因为我记性一向不好，而且这几天的 Git commit 也异常多：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240821195307.avif" alt="630" title="还没算我写文章的时候没提交的" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        还没算我写文章的时候没提交的
    </figcaption>
    
</figure></p>
<h2 id="优化-github-卡片">优化 GitHub 卡片</h2>
<p>这几乎是我的每日任务了。由于 GitHub/GitLab/Codeberg 的卡片基本上是一样的，所以说一优化可以优化三次，三倍业绩，三倍快乐，<del>改 bug 也是三倍快乐</del>。</p>
<p>这次的优化很多，包括但是不限于：</p>
<ul>
<li>样式打磨，我的目标就是 Vercel/iOS18 的风格~</li>
<li>API 逻辑改写，更多地使用 Hugo 模板</li>
<li>错误处理完善</li>
<li>使用 license 映射来改进显示</li>
<li>自动截断过长的描述</li>
<li>图标更改，采用 Simple Icons 的 GitLab/Codeberg 图标</li>
<li>去掉父元素的 <code>&lt;a&gt;</code> 标签，改良整体样式和点击容错性</li>
</ul>
<p>此外，我在之前的老朋友 Blowfish 主题那里闲逛的时候发现他们加了 Gitea 短代码，无论谁在写 Hugo shortcode，我小氯都要帮帮场子。直接加上。Gitea 和 Codeberg 的逻辑基本上一样，毕竟 Codeberg 就是基于 Gitea 的。</p>
<p>顺便说一句，我发现我犯了个非常执杖的错误，就是我已经用 <code>resources.GetRemote</code> 获取 API 的数据了，我居然用 JavaScript 又获取了一次。</p>
<h2 id="refactor-css">refactor CSS</h2>
<p>闲着没事去主题原型 Hugo landscape 的仓库看了看，发现恐咖兵糖大佬把 CSS 重构了一下。正好我也一直被无法正确导入 CSS 困扰，于是就动手开始 refactor 了。</p>
<p>我原本的文件结构大概是：</p>
<pre><code class="language-txt">.
├── css
│   ├── addon.css
│   ├── algolia(almost of no use)
│   │   ├── algolia_dark.css
│   │   └── algolia_light.css
│   ├── base.css
│   ├── normalize.css
│   ├── tailwind.css
│   └── whisper.css
├── js ...
├── json ...
└── style.css
</code></pre>
<p>其中 <code>style.css</code> 是 UnoCSS 自动构建生成的，而我的几乎所有魔改 CSS 都堆在 <code>addon.css</code> 中，看着很难受，维护起来也不方便。</p>
<p>重构代码时我选择了恐咖兵糖大佬使用的 SCSS 方法：在文件夹中创建 SCSS 索引文件，然后在 <code>css.html</code> 中直接用 Hugo 来解构 SCSS 得到 CSS 导入。一顿拆分重组后得到了：</p>
<pre><code class="language-txt">.
├── addon
│   ├── algolia.css
│   ├── fonts.css
│   ├── friend.css
│   ├── index.scss
│   ├── others.css
│   ├── twikoo.css
│   └── whisper.css
├── base
│   ├── base.css
│   ├── index.scss
│   ├── normalize.css
│   └── tailwind.css
├── main.scss
├── test.txt
└── uno.css
</code></pre>
<p>此外，对于一些只在特定页面生效的 CSS 文件（例如 <code>whisper.css</code> 只在《碎语》页面生效），我们直接在页面进行导入，避免不必要的开销。</p>
<pre><code class="language-html">{{ with resources.Get &quot;css/addon/whisper.css&quot; }}
&lt;style&gt;
    {{ .Content | safeCSS }}
&lt;/style&gt;
{{ end }}
</code></pre>
<h2 id="侧边栏优化">侧边栏优化</h2>
<p>在我看来，侧边栏是个相当重要的页面元素。我在侧边栏堆了公告（Announcement）、目录（TOC）、分类（Categories）和标签（Tags）。在移动端，它们会显示在主体卡片的下方。</p>
<h3 id="目录">目录</h3>
<p>这个目录改得我几乎红温。我原本是直接采用 Hugo 的 <code>{{ .Page.TableOfContents }}</code> 模板，但是其样式令人一言难尽。而且可能是因为 Swup 的原因，目录是没办法随着文章同步更新的。于是，在深思熟虑后，我决定暂时将其去掉。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>《fix bug by removing the feature》</p>
</blockquote>
<h3 id="公告">公告</h3>
<p>公告组件是我比较看重的东西。我采用的是在 Hugo 配置文件相应选项开启的情况下，直接读取 <code>content</code> 下的 <code>announcement.md</code> 进行展示。其功能比较完善，但是样式看起来并不好看。</p>
<p>我去查了些资料，找到了一个名为 prose 的布局，经过实验看起来还不错。所以就改成了这样：</p>
<pre><code class="language-html">&lt;div id=&quot;announcement-content&quot; class=&quot;collapse-wrapper px-4 overflow-hidden&quot;&gt;
    {{ $announcement := .Site.GetPage &quot;announcement&quot; }}
    {{ with $announcement }}
    &lt;div class=&quot;rounded-xl backdrop-blur-md p-2 mx-4 mb-2 relative md:mx-auto md:max-w-lg&quot;&gt;
        &lt;div class=&quot;prose dark:prose-invert max-w-none text-sm md:text-base&quot;&gt;
            {{ .Content | markdownify }}
        &lt;/div&gt;
    &lt;/div&gt;
    {{ end }}
&lt;/div&gt;
</code></pre>
<h3 id="移动端隐藏组件">移动端隐藏组件</h3>
<p>我感觉，移动端很少有人会去专门翻最下面的 categories 和 tags，所以我干脆直接把它们 <code>hidden md:block</code> 了。这样最下面就是 profile 和 announcement 了。</p>
<h3 id="图标">图标</h3>
<p>从页面的元素选择上，各位老友应该可以看出，我非常喜欢 UnoCSS 的矢量图标，尤其是 IBM 的 Carbon Icons 系列。</p>
<p>所以我打算给侧边栏的组件加图标。这个不算难，一个 <code>flex</code> 布局，再把图标和标题套在一起就可以了。</p>
<pre><code class="language-html">&lt;div class=&quot;font-bold transition text-lg text-neutral-900 dark:text-neutral-100 relative ml-8 mt-4 mb-2 flex items-center
before:content-['']
before:w-1 before:h-4 before:rounded-md before:bg-[var(--primary)]
before:absolute before:left-[-16px] before:top-[5.5px]&quot;&gt;
    &lt;i class=&quot;i-carbon-data-categorical mr-2&quot;&gt;&lt;/i&gt;
    Categories
&lt;/div&gt;
</code></pre>
<p>加个边距看上去好看。</p>
<p>我用的图标分别是：</p>
<pre><code class="language-html">&lt;i class=&quot;i-carbon-border-full mr-2&quot;&gt;&lt;/i&gt;
&lt;i class=&quot;i-carbon-data-categorical mr-2&quot;&gt;&lt;/i&gt;
&lt;i class=&quot;i-carbon-tag-group mr-2&quot;&gt;&lt;/i&gt;
</code></pre>
<h3 id="partial-化">partial 化</h3>
<p>我原本的组件样式大部分是写在 <code>sidebar.html</code> 那里的。但是这样让 <code>sidebar.html</code> 看起来很不整洁，所以我把大部分的代码都移动到了相应的部分代码（partial）中。</p>
<pre><code class="language-html">{{/* sidebar.html */}}

&lt;div id=&quot;sidebar&quot;
    class=&quot;w-full row-start-3 row-end-4 col-span-2 lg:row-start-2 lg:row-end-3 lg:col-span-1 lg:max-w-[17.5rem] onload-animation&quot;&gt;
    &lt;div class=&quot;flex flex-col w-full gap-4 mb-4&quot;&gt;
        {{ partial &quot;sidebar/profile.html&quot; . }}
    &lt;/div&gt;
    &lt;div class=&quot;flex flex-col w-full gap-4 top-4 sticky&quot;&gt;
        {{ if .Site.Params.Basic.announcement }}
        &lt;widget-layout id=&quot;announcement-widget&quot; class=&quot;pb-4 card-base&quot;&gt;
            {{ partial &quot;sidebar/announcement.html&quot; . }}
        &lt;/widget-layout&gt;
        {{ end }}
        
        &lt;widget-layout id=&quot;categories-widget&quot; class=&quot;pb-4 card-base hidden md:block&quot;&gt;
            {{ partial &quot;sidebar/categories.html&quot; . }}
        &lt;/widget-layout&gt;

        &lt;widget-layout id=&quot;tags-widget&quot; class=&quot;pb-4 card-base hidden md:block&quot;&gt;
            {{ partial &quot;sidebar/tags.html&quot; . }}
        &lt;/widget-layout&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>可以看到基本上是一个模子刻出来的，形成可复用打法了属于。</p>
<h3 id="折叠展开">折叠展开</h3>
<p>此外还写了个折叠展开的代码。但是感觉现在的 tags 和 categories 都不是很长，因此就没真正加上。</p>
<h2 id="hello109chan">Hello，109chan</h2>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>《hello 宇宙最新力作》</p>
</blockquote>
<h3 id="前言">前言</h3>
<p>熟悉博客圈的老友应该知道一个著名的工具：<a href="https://postsummary.zhheo.com/">TianliGPT</a>。这个工具来自洪哥（<a href="https://blog.zhheo.com/">张洪 Heo</a>）和 Tianli，是个自动生成博客文章 AI 摘要的工具。对于希望在听故事之前简单了解其脉络的老友来说是个很好的补益。</p>
<p>问题是：这个工具收费。虽然不贵，但是以小氯的节俭程度，还是不太舍得花这个钱的。</p>
<p><del>那你买域名的时候怎么一点也不节俭啊喂！</del></p>
<p>于是我就开始想替代方法。很巧，在之前写 Java 大作业的时候，我们有一个 feature request 就是 AI summary（用带清的智谱清言 API 生成新闻摘要）。我当时的思路大概是：</p>
<p>最后实现得非常好，除了学校给的 API SDK 居然不能用，必须 HTTP，害得我和答疑坊的大佬调了半个下午。</p>
<p>于是我想按照这个思路做一个 AI 摘要。不过，我不太熟悉怎么在 Hugo 里面用数据库，而且我的智谱 API 《只有》一千万 token 的额度，我比较担心用完（<del>你确定你能写这么多？</del>）。</p>
<p>于是我又想到了薅 CloudFlare 的羊毛。用 Workers 做 JavaScript 运行时，D1 做数据持久化，Workers AI 做摘要。这个免费额度是绝对够的，唯一的问题是我不会。</p>
<p>穷途末路之下，我想到了我的好伙伴：Quail。</p>
<p>各位老友应该都知道，我的 newsletter 是通过 <a href="https://quail.ink">Quail</a> 实现的，而 Quail 为每位创作者都免费提供 AI 摘要生成功能。这个摘要直接写在 Markdown 源文件的 YAML front matter 里面，是完全静态的，既不怕丢，也不用执行复杂的 API 请求和数据库调用。</p>
<p>那么，就是你了。</p>
<h3 id="设计">设计</h3>
<p>由于只有 <code>content/posts</code> 中的页面需要加摘要，所以我们直接改动相应的 <code>single.html</code> 即可。位置我选择在封面图和正文之间。</p>
<p>先用 AI 搓个形：</p>
<pre><code class="language-html">&lt;div class=&quot;my-4 p-4 bg-neutral-100 dark:bg-neutral-800 rounded-lg shadow-md cursor-pointer transition-transform transform hover:scale-105&quot; id=&quot;ai-summary-toggle&quot;&gt;
    &lt;div class=&quot;flex items-center justify-between&quot;&gt;
        &lt;span class=&quot;text-neutral-900 dark:text-neutral-100 font-semibold&quot;&gt;AI 摘要&lt;/span&gt;
        &lt;svg class=&quot;w-5 h-5 text-neutral-900 dark:text-neutral-100 transition-transform duration-200 transform&quot; id=&quot;ai-summary-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot; stroke=&quot;currentColor&quot;&gt;
            &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M19 9l-7 7-7-7&quot;/&gt;
        &lt;/svg&gt;
    &lt;/div&gt;
    &lt;div class=&quot;mt-2 text-neutral-700 dark:text-neutral-300 hidden&quot; id=&quot;ai-summary-content&quot;&gt;
        {{ .Description }}
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>然后我简单修了下，大概就是这样了：</p>
<pre><code class="language-html">&lt;div class=&quot;my-4 p-4 border dark:border-color-neutral-600 border-color-neutral rounded-xl shadow-md cursor-pointer transition-transform transform-gpu md:hover:scale-105 shadow-md md:hover:shadow-lg&quot;
    id=&quot;ai-summary-toggle&quot;&gt;
    &lt;div class=&quot;flex items-center justify-between pb-3&quot;&gt;
        &lt;div class=&quot;flex items-center&quot;&gt;
            &lt;span class=&quot;i-carbon-ai-generate text-neutral-900 dark:text-neutral-100 mr-4&quot;&gt;&lt;/span&gt;
            &lt;span class=&quot;text-lg text-neutral-900 dark:text-neutral-100 font-semibold&quot;&gt;AI 摘要&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&quot;flex items-center&quot;&gt;
            &lt;span
                class=&quot;px-2 py-1 bg-gradient-to-r from-blue-500 to-purple-500 bg-opacity-20 backdrop-blur-md text-neutral-300 rounded-md text-sm mr-2 ring-1 ring-offset-1 ring-indigo-200 dark:ring-indigo-700&quot;&gt;109酱&lt;/span&gt;
            &lt;svg class=&quot;w-5 h-5 text-neutral-900 dark:text-neutral-100 transition-all duration-300 transform hover:scale-110&quot;
                id=&quot;ai-summary-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;
                stroke=&quot;currentColor&quot;&gt;
                &lt;path stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; stroke-width=&quot;2&quot; d=&quot;M19 9l-7 7-7-7&quot; /&gt;
            &lt;/svg&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;border-t border-neutral-200 dark:border-neutral-700 my-3&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;mt-3 text-neutral-700 dark:text-neutral-300 hidden&quot; id=&quot;ai-summary-content&quot;&gt;
        {{ .Description }}
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>移动端的点击放大我关掉了，因为看起来不太舒服。高斯模糊的手艺是跟 GPT 学的，本来想用 <code>var(--primary)</code> （就是我的博客那个一直在变化的主题色），但是不知道为什么没成功。</p>
<p>使用 <code>description</code> 字段可以保证其尽量都是 AI 摘要，<code>summary</code> 字段我比较喜欢用来扯淡。难绷的是 Quail 的标准 AI 摘要键是 <code>summary</code>，造成我需要手动改一下。已经和作者<a href="https://quail.ink/lyric">歌词经理</a>反馈了，作者说会想办法优化一下。</p>
<h3 id="why-109chan">Why 109chan？</h3>
<p>还有个关键问题，为什么这个 AI 摘要助手（迫真）要叫 109 酱？</p>
<p>这又要说起现实中园子里的一些故事了。在紫操（紫荆操场）旁边，有一座形状比较特别的建筑，叫紫荆学生公寓综合服务楼，由于其形状，我们一般称其为 C 楼。C 楼的 109 号房间是综合服务台，也叫总台。一般来说，有什么问题不知道去哪里问，就可以去总台。由于 AI 摘要的目的是让老友们更省力地阅读园子里的故事，因此我将其命名为 109 酱（109chan）。如果后续有问答之类的服务，应该也会是 109 酱来承担。</p>
<h2 id="更新依赖">更新依赖</h2>
<p>npm 有 <code>package-lock.json</code>，pnpm 有 <code>pnpm-lock.yaml</code>，yarn 有 <code>yarn.lock</code>， Bun 有 <code>bun.lockb</code>，这充分说明了对于 JavaScript 包，锁定版本有多么重要。我曾经试着直接对 <code>theme/efimero</code> 的依赖进行更新，结果自然是必遭严惩，样式全都乱了。</p>
<p>最近闲着没事去 UnoCSS 的<a href="https://unocss.dev">官网</a>的官网看了下，发现已经到 <code>0.62</code> 了，而我的依赖还是 <code>0.60</code> 左右。由于我非常喜欢 UnoCSS，并且确信自己会一直使用，于是我想着更新一下。</p>
<p>直接删除 <code>node_modules</code> 和 <code>bun.lockb</code>，然后把 <code>package.json</code> 的版本全改成 <code>latest</code>，直接一手 <code>bun i</code> 更新。</p>
<p>然后构建，不出意料出了很多错误：</p>
<pre><code class="language-txt">Failed to load custom icon &quot;copy&quot; in &quot;carbon&quot;: TypeError [ERR_IMPORT_ATTRIBUTE_MISSING]: Module &quot;file:///Users/chlorine/Dev/Hugo/themes/efimero/node_modules/@iconify-json/carbon/icons.json&quot; needs an import attribute of &quot;type: json&quot;
    at validateAttributes (node:internal/modules/esm/assert:88:15)
    at defaultLoad (node:internal/modules/esm/load:133:3)
    at async nextLoad (node:internal/modules/esm/hooks:746:22)
    at async nextLoad (node:internal/modules/esm/hooks:746:22)
    at async nextLoad (node:internal/modules/esm/hooks:746:22)
    at async Hooks.load (node:internal/modules/esm/hooks:383:20)
    at async handleMessage (node:internal/modules/esm/worker:199:18) {
  code: 'ERR_IMPORT_ATTRIBUTE_MISSING'
}
</code></pre>
<p>看来是缺少一个导入类型。在询问 GPT 后，得知改动 <code>uno.config.ts</code> 中的导入部分为动态导入即可：</p>
<pre><code class="language-ts">import { defineConfig } from &quot;unocss&quot;;
import { presetUno } from &quot;unocss&quot;;
import { presetIcons } from &quot;unocss&quot;;
import { presetAttributify, presetTypography } from &quot;unocss&quot;;
import presetLegacyCompat from '@unocss/preset-legacy-compat';

import carbonIcons from '@iconify-json/carbon/icons.json';
import mdiIcons from '@iconify-json/mdi/icons.json';

export default defineConfig({
    presets: [
        presetAttributify(),
        presetUno(),
        presetTypography(),
        presetIcons({
            collections: {
                carbon: () =&gt; carbonIcons,
                mdi: () =&gt; mdiIcons,
            },
            scale: 1.2,
            warn: true,
        }),
        presetLegacyCompat({
            commaStyleColorFunction: true,
        })
    ],
    // ...
});
</code></pre>
<h2 id="结语">结语</h2>
<p>除此之外还有一堆优化，我们就不展开说了，像什么优化 Algolia Docsearch 样式之类的。静态博主都是装修爱好者，折腾就完了，把园子装修得漂漂亮亮的。</p>
<p>明天我考<del>磕墓三</del>科目三，考完之后我就要着手二次备案了。</p>

      ]]></content:encoded></item><item><title>Hello，Shiki</title><link>https://chlor.me/hello-shiki/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-shiki/</guid><category>博客</category><category>折腾</category><description>本文介绍了如何在Hugo中使用Shiki进行代码高亮，Shiki在服务端执行，提供了更好的性能和样式，适合构建静态网站，需满足特定前置条件和安装依赖，步骤包括配置Hugo、创建rehyperc文件和修改CSS等。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-shiki-cover.webp" alt="Hello，Shiki" />
        </figure>
        <p>各位老友们好，我是 Chlorine。继续高强度水文。</p>
<p>本期的主题是 Hugo 的代码高亮，主要参考了<a href="https://www.eallion.com">蜗牛大神</a>的教程：<a href="https://www.eallion.com/hugo-syntax-highlight-shiki/">在 Hugo 中使用 Shiki</a>。感谢前辈的付出。</p>
<h2 id="前言">前言</h2>
<p>Hugo 的代码高亮基于 Chroma。这是个用 Go 语言写的库，好处是性能极高，坏处是不太聪明。比如我之前的文章 <a href="/hello-searxng/">Hello，SearXNG</a>，里面有一段 PowerShell 脚本，结果：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240818100304.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>嗯……这个效果不能说是尽善尽美吧，至少也可以说是聊胜于无。</p>
<p>其他的部分，像 <code>docker-compose</code>、<code>git</code> 之类的命令高亮不了，已经是紫荆园的麻辣香锅——家常便饭了。</p>
<p>那怎么修复？无非两个招：自己写 Lexer<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，或者引入第三方库。</p>
<p>不清楚哪位勇士有第一项所需的娴熟的专业技能、大把的闲暇时间和超人的折腾勇气，反正小氯自认为没有。</p>
<p>Hugo 的第三方代码高亮库很多，比方说 <code>Highlight.js</code> 和 <code>Prime.js</code>，其优缺点可谓各有千秋。但它们都有一个致命的缺点：<strong>都需要在客户端执行大量的 JavaScript 代码</strong>。这就势必会对性能造成可怕的影响。如果大家没有什么感知的话，请参考下面的 Twikoo 的加载需要多久。</p>
<p>那有没有办法在服务端执行代码，把压力放在网站构建过程中呢？</p>
<p>有，方法就是我们今天的主角——Shiki。</p>
<h2 id="shiki-简介">Shiki 简介</h2>
<p>Shiki 这个名字来自于日语的「式」（しき），意思就是「样式」。此外如果我记得没错，Shiki 应该还有季节、四季的意思，当然这不重要。</p>
<p><a href="https://shiki.style">Shiki</a> 是一个基于 VS Code 语法高亮引擎（没错，就是那个 VS Code）的代码高亮库。其基于 TextMate 语法定义文件和 WebAssembly 技术提供快速精确的代码高亮。</p>
<p>Shiki 很特别的一点在于：<strong>它在执行时会扫描指定路径的 HTML 文件，并且将各种语法 token 附加上内联样式</strong>。这使得 Shiki 非常适合用来为 Hugo 这样的静态网站构建工具添加高亮，无它，扫一遍 <code>public</code> 就行了。</p>
<p>顺便说一句：Shiki 是 Pine Wu 和 Anthony Fu 等前端大神的力作 :)</p>
<h2 id="前置要求">前置要求</h2>
<p>请注意，如果您的已有条件和需求不满足下面所述，那小氯推荐您还是先别看文章了，还是先去紫荆公寓的公共空间喝杯茶更能体现对您生命的尊重。<del>没错我是直接从上一篇文章复制过来的</del></p>
<p>条件：</p>
<ul>
<li>已经能用 Hugo 构建静态网站</li>
<li>对 GitHub Actions 和 Vercel 等自动构建的流程有一定了解</li>
<li>本地已经配置了一个 JavaScript 运行时及包管理器，例如 <code>Node.js</code> 或者 <code>Bun.js</code>。我们以下均使用 <code>Bun.js</code> 进行演示。</li>
</ul>
<p>要求：</p>
<ul>
<li>对 Chroma 的高亮表现不满</li>
<li>不希望使用 <code>Highlight.js</code> 等客户端高亮器</li>
</ul>
<h2 id="安装相关依赖">安装相关依赖</h2>
<p>进入你的博客根目录，运行命令：</p>
<pre><code class="language-bash">bun i shiki @shikijs/rehype rehype-cli
</code></pre>
<p>这应该会自动为你创建 <code>node_modules</code>、<code>bun.lockb</code> 和 <code>package.json</code>。记得把 <code>node_nodules</code> 文件夹加到  <code>.gitignore</code> 里面——如果没有自动添加的话。</p>
<h2 id="配置-hugo">配置 Hugo</h2>
<p>修改 <code>hugo.toml</code> 或者你其他名字的配置文件，将 <code>codeFences</code> 改为 <code>false</code>。如果没有请自行创建，像这样：</p>
<pre><code class="language-toml">[markup]
    [markup.highlight]
      codeFences = false
</code></pre>
<h2 id="创建-rehyperc">创建 <code>.rehyperc</code></h2>
<p>如果我没猜错的话，这应该是 rehype 的配置文件了。看起来跟个 <code>JSON</code> 似的。</p>
<pre><code class="language-json">{
  &quot;plugins&quot;: [
    [
      &quot;@shikijs/rehype&quot;,
      {
        &quot;themes&quot;: {
          &quot;light&quot;: &quot;你的日间主题&quot;,
          &quot;dark&quot;: &quot;你的夜间主题&quot;
        }
      }
    ]
  ]
}
</code></pre>
<p>主题列表在<a href="https://shiki.style/themes">这里</a>，挑个自己喜欢的吧。效果没必要像我一样每次都重新构建，在 VS Code 里面搜索同名主题看就行了。我比较选综，就用了 One Dark Pro 系列的。</p>
<p>rehype 这东西很神奇，可以对 HTML 各种爆改。当然，咱们这里用的就是其中一个插件，如果想进一步探索请看<a href="https://github.com/rehypejs/rehype/blob/main/doc/plugins.md">这里</a>，如果有什么好的创意也可以和我分享，小氯洗耳恭听。</p>
<h2 id="修改-hugo-css">修改 Hugo CSS</h2>
<p>找到你主题的 CSS。我们要做一下样式适配。我原本的样式大概是：</p>
<pre><code class="language-css">code {
    font-family: &quot;Fira Code Light&quot;, &quot;LXGW WenKai Lite&quot;, monospace;
}

code[class*=&quot;language-&quot;],
pre[class*=&quot;language-&quot;] {
    white-space: pre-wrap;
    /* 或 pre-line */
    word-break: break-all;
}
</code></pre>
<p>现在改成：</p>
<pre><code class="language-css">code {
    font-family: &quot;Fira Code Light&quot;, &quot;LXGW WenKai Lite&quot;, monospace;
}

html .shiki,
html .shiki span {
    white-space: pre-wrap;
    word-break: break-all;
    overflow-wrap: break-word;
    font-family: &quot;Fira Code Light&quot;, &quot;LXGW WenKai Lite&quot;, monospace;
}

html.dark .shiki,
html.dark .shiki span {
    color: var(--shiki-dark) !important;
    white-space: pre-wrap;
    word-break: break-all;
    overflow-wrap: break-word;
    font-family: &quot;Fira Code Light&quot;, &quot;LXGW WenKai Lite&quot;, monospace;
}
</code></pre>
<p>大家照猫画虎即可。</p>
<h2 id="配置脚本命令">配置脚本命令</h2>
<p>在根目录的 <code>package.json</code> 下面添加这样的脚本命令：</p>
<pre><code class="language-json">&quot;scripts&quot;: {
    &quot;shiki&quot;: &quot;bunx rehype-cli public -o&quot;
}
</code></pre>
<p>大体而言改完之后你的文件应该看起来像是：</p>
<pre><code class="language-json">{
    &quot;dependencies&quot;: {
        &quot;@shikijs/rehype&quot;: &quot;^1.13.0&quot;,
        &quot;rehype-cli&quot;: &quot;^12.0.0&quot;,
        &quot;shiki&quot;: &quot;^1.13.0&quot;
    },
    &quot;scripts&quot;: {
        &quot;shiki&quot;: &quot;bunx rehype-cli public -o&quot;
    }
}
</code></pre>
<p>当然，shiki 这个名字你可以随便起，然后就可以在根目录下运行 <code>bun run shiki</code> 对构建产物进行替换了。如果报错，大概率是因为你使用了不支持的语言或者错误的语言代码（比方说，<code>html</code> 写成 <code>HTML</code>）。可以在<a href="https://shiki.style/languages">这里</a>查看标准化的代号表。</p>
<h2 id="vercel-构建命令">Vercel 构建命令</h2>
<p>GitHub Actions 版本的可以看上面蜗牛大神的教程。</p>
<pre><code class="language-bash">cd themes/efimero &amp;&amp; bun install &amp;&amp; bun run build &amp;&amp; cd ../.. &amp;&amp; hugo --gc --minify &amp;&amp; bun install &amp;&amp; (bun run shiki || true)
</code></pre>
<p>这大概就是完整的构建命令了。最后的 <code>|| true</code> 是为了防止报错导致的构建失败。</p>
<h2 id="自动化">自动化</h2>
<p>大家知道，小氯是个被 C++ <del>荼毒</del>熏陶过的计算机系学生，因此习惯使用 Makefile 整合所有构建过程。</p>
<p>不过 Makefile 有个致命的缺点：<strong>只能一步一步执行命令</strong>。而 <code>bun run shiki</code> 应该在 <code>hugo server -D</code> <strong>构建 public 文件夹完成，但是未结束（只有我们手动停止这个命令才能结束）</strong> 时执行。使用后台运行的指令的话，又没办法准确把控时机。唯一的方法可能就是使用 <code>fswatch</code> 了，但是这样又会造成不必要的性能开销。</p>
<p>对于不经常折腾主题，只是发布内容的老友来说，这其实不是问题，主要对于小氯这样的喜欢折腾主题的人比较麻烦。现在只能是每次手动执行下，或者干脆只 <code>make</code>，缺点就是高亮没了。</p>
<h2 id="去掉行号">去掉行号</h2>
<p>在本地测试的时候我发现 Hugo 代码块的行号变得非常抽象，具体来说，10 居然会换行变成 1 和 0。改 <code>hugo.toml</code> 不管用，于是采取最简单粗暴的方法：CSS 隐藏。</p>
<pre><code class="language-css">.custom-md code span.line:before {
    display: none;
}
</code></pre>
<h2 id="结语">结语</h2>
<p>又水了篇文章，内心毫无<del>波兰</del>波澜。</p>
<p>Shiki 的效果确实出挑，虽然会显著加长构建时间，但是也算可以接受。这样代码高亮看起来就好看多了。</p>
<p>以及一个新消息：我准备为主域名重新备案啦！这期间网站评论可能会关闭（看侧边栏的公告即可），但是其他功能不受影响。可以给我发邮件来互动~</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Lexer，即词法分析器或扫描器，是编译器的第一阶段。其任务是读取源代码文本，并将其分解成一系列的标记（tokens）。每个标记代表了源代码中的一个有意义的片段，比如关键字、标识符、字面量、运算符等。Lexer 的输出是源代码的抽象表示，它为后续的语法分析（parser）提供了基础。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Hello，SearXNG</title><link>https://chlor.me/hello-searxng/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-searxng/</guid><category>hello</category><category>折腾</category><description>本文讨论如何在内地服务器上使用 1Panel 和 OpenResty 搭建开源的 SearXNG 私有搜索引擎。SearXNG 是一个元搜索引擎，不收集用户数据，并支持本地偏好设置。只需一台服务器、代理和基本配置，便可顺利部署。一些设置包括修改访问密钥、环境变量和代理配置，最终可以将其设置为默认搜索引擎。总体来说，SearXNG 速度可接受，但搜索结果有时不够精准，建议与 DuckDuckGo 搭配使用。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-searxng-cover.webp" alt="Hello，SearXNG" />
        </figure>
        <p>各位老友们好，我是 Chlorine。今天继续水文。</p>
<p>其实本期正确的标题应该是：</p>
<p>《如何基于 1Panel 和 OpenResty 在内地服务器上搭建开源私有化的搜索引擎》</p>
<p>这样或许对 SEO 好点，但是小氯对于这件事一向是摆烂（<del>你对什么事情不摆烂啊喂</del>），所以直接加入 hello 宇宙就好了。</p>
<h2 id="前言">前言</h2>
<p>众所周知，全球的搜索引擎巨头们都对用户隐私有着非常高的尊重，从不收集你的历史记录、搜索记录、位置、时间、联系信息、联系人、使用数据、财务信息、健康状况、诊断信息、购买项目、设备标识符、敏感信息等你不希望它们收集的东西，也不会使用你的数据去分析你的偏好或者产出内容农场。同时它们对于广告也有着非常好的管控，每一次的搜索结果都不会含有任何广告，尤其是在中国大陆拥有最大影响力的百度，确保了你良好的搜索体验。而且它们也尊重竞争对手的权利，不会对竞争对手的搜索结果 SEO 做任何的打压。这种负责任的做法获得了全球计算机爱好者和广大用户的一致好评。好的，请还在笑的老友收一收，茶都洒到衣服上了。</p>
<p>在隐私保护方面，可能也就是 DuckDuckGo 能做得好点。不过 DuckDuckGo 在大陆地区因为某些原因访问并不顺畅，而且这毕竟还是把数据交给第三方，肯定会有老友感觉不大舒服的。</p>
<p>不过没关系，小氯曾经说：开源社区是万能的。如果所有搜索引擎的巨头都做不好这一点，那么我们自托管一个开源的就好了。那么，有请今天的主角——SearXNG。</p>
<h2 id="searxng">SearXNG</h2>
<p>我不大清楚 SearXNG 的名字是怎么来的，可能和 SearX 有关。</p>
<p><a href="https://docs.searxng.org">SearXNG</a> 是一个用 Python 写的<strong>元搜索引擎</strong>。That is，它自己并不提供搜索引擎的职能，而是通过分析和综合各大搜索引擎的结果来进行高效的查找（当然，用我们的小服务器去爬整个互联网也是不现实的）。SearXNG 不收集任何用户数据，一切的偏好全部以 Cookie 的形式存在于本地，同时采用各种方式来避免任何在搜索过程中暴露个人信息的行为。</p>
<p>如果各位老友没有条件自部署，也可以去 <a href="https://searx.space">https://searx.space</a> 找几个已经部署好的实例尝尝鲜。</p>
<h2 id="前置说明">前置说明</h2>
<p>请注意，如果您的已有条件和需求不满足下面所述，那小氯推荐您还是先别看文章了，还是先去紫荆公寓的公共空间喝杯茶更能体现对您生命的尊重。</p>
<p>条件：</p>
<ul>
<li>一台自己的服务器</li>
<li>一个能够顺利访问世界互联网的 endpoint</li>
<li>一台电脑</li>
<li>手，脑子</li>
</ul>
<p>需求：</p>
<ul>
<li>希望部署一个私有化的搜索引擎</li>
<li>不希望使用 SearXNG 原生的 Caddy 作为反代（本文使用 1Panel 面板和 OpenResty，其他反代服务器应该可以类推，但是这需要您自己来做）</li>
</ul>
<p>好的，我们开始。</p>
<h2 id="拉取-git-仓库">拉取 Git 仓库</h2>


<div class="my-6 rounded-lg border-l-4 p-4 border-green-500 bg-green-50/50 dark:bg-green-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-green-700 dark:text-green-300">
        <div class="w-5 h-5 i-carbon-idea">
        </div>
        <span>Tip</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>如果您有能够可视化上传的面板的话，在本地编辑也没问题。我就是这么干的。</p>
    </div>
</div>
<p>首先随便选个目录，比如 <code>/usr/local</code>。按理说在哪应该都无所谓，但是我推荐就在这里，防止出现什么奇奇怪怪的问题。</p>
<p>官方的仓库有点问题，小氯给大家准备了一个修复版的，具体改动是：</p>
<ul>
<li>删除了 Caddy 相关配置</li>
<li>创建了 <code>uwsgi.ini</code> 以避免 <code># cp: can't create '/etc/searxng/uwsgi.ini': Permission denied</code> 报错（官方居然把这个文件加到 <code>.gitignore</code> 了，难绷）</li>
<li>直接增加了出站代理设置</li>
<li>默认关闭 limiter 限制（个人实例一般不用，如果希望打开，修改 <code>settings.yml</code> 的 <code>limiter</code> 键为 <code>true</code>）</li>
</ul>
<pre><code class="language-bash">cd /usr/local # 或者你的目录
git clone https://github.com/chlorine3545/searxng-docker-fixed.git
</code></pre>
<p>如果访问不畅，可以使用 SSH 或者是我准备的国内镜像：</p>
<pre><code class="language-bash">cd /usr/local
git clone https://gitee.com/chlorine3545/searxng-docker-fixed.git
</code></pre>
<p>完事之后，用你喜欢的编辑器打开仓库，进行一点小小的编辑。</p>
<h3 id="设置访问密钥">设置访问密钥</h3>
<p>执行命令：</p>
<pre><code class="language-bash">sed -i &quot;s|ultrasecretkey|$(openssl rand -hex 32)|g&quot; searxng/settings.yml
</code></pre>
<p>如果出现报错就试一试：</p>
<pre><code class="language-bash">sed -i&quot;&quot; -e &quot;s|ultrasecretkey|$(openssl rand -hex 32)|g&quot; searxng/settings.yml
</code></pre>
<p>Windows 用户可以使用（官方的，我没试过）：</p>
<pre><code class="language-ps">$randomBytes = New-Object byte[] 32
(New-Object Security.Cryptography.RNGCryptoServiceProvider).GetBytes($randomBytes)
$secretKey = -join ($randomBytes | ForEach-Object { &quot;{0:x2}&quot; -f $_ })
(Get-Content searxng/settings.yml) -replace 'ultrasecretkey', $secretKey | Set-Content searxng/settings.yml
</code></pre>
<p>然后打开 <code>settings.yml</code>，如果发现原本的 <code>ultrasecretkey</code> 变成了一串乱七八糟的字符，那么就成功了。</p>
<h3 id="编辑环境变量">编辑环境变量</h3>
<p>编辑 <code>.env</code> 文件，将 <code># SEARXNG_HOSTNAME=&lt;host</code> 那一行取消注释，<code>&lt;host</code> 改为你希望绑定的域名。不需要带 HTTP 或者 HTTPS。</p>
<h3 id="修改-docker-composeyml">修改 <code>docker-compose.yml</code></h3>
<p>找到第 32 行，就是我写注释的那个位置。把左边的端口改成你喜欢的。</p>
<h3 id="增加代理">增加代理</h3>
<p>由于某些原因，境内服务器能访问的搜索引擎比较有限。为了让我们的信息获取渠道更加多样，我们需要配置一下代理。别问我哪来的代理，问就是光荣而伟大的孙哥。</p>
<p>在 <code>settings.yml</code> 中的第 32 行，把两个 <code>http://ip:port</code> 改成你的 endpoint 即可。</p>
<p>这里我照抄了官方配置，更多信息请参考这里。</p>
<h2 id="启动">启！动！</h2>
<p>编辑完文件后，就可以开始启动了。</p>
<p>在目录下以 <code>sudo</code> 模式执行：</p>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
<p>等待部署完成即可。友情提示，如果有代理推荐打开，可以避免一些问题，但是一般没事。</p>
<p>完成后打开你的部署地址，如果看到：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240816105021.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="566"  />
    
</figure></p>
<p>恭喜你，部署成功。现在试着搜索一下吧。可以在首选项那里进行各种配置。</p>
<p>不过有点难绷的一点是，我搜索我自己的站点没有任何结果，但是在 Google、Bing 和 DuckDuckGo 上页面的权重都是第一。而且我使用别的 SearXNG 实例搜索，结果是不一样的。我很难理解这一点。</p>
<h2 id="设置反代">设置反代</h2>
<p>略。</p>
<h2 id="设置密码">设置密码</h2>
<p>我们部署的是私人实例，为了防止被一些 unwanted visitor 使用，我们可以使用一个密码来进行保护。当然，不开也行。只要你不分享你的域名，同时禁止掉爬虫，基本上只可能通过 DNS 扫描来扫出来有这么个域名（还无法知道这个域名是干什么的）。</p>
<p>在 1Panel 上设置密码相当容易，在网站-网站设置-密码访问中设置就可以。</p>
<h2 id="设置默认搜索引擎">设置默认搜索引擎</h2>
<p>这么好的引擎，不用起来怎么能行。这里我只讲 Arc（Chrome 系，比如 Chrome、Edge 等基本同理）和 LibreWolf（Firefox 系基本同理）的方法。</p>
<h3 id="arc">Arc</h3>
<p>在地址栏键入 <code>arc://settings</code> 进入设置界面，点击「搜索引擎」选项卡。滑到「网站搜索」，按如下格式填写：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240816105428.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>添加后右面三个点，选择设为默认即可。</p>
<h3 id="librewolf">LibreWolf</h3>
<p>快捷键 <code>⌘ + ,</code> 进入设置界面，在搜索选项卡配置。方法与 Arc 基本一样。</p>
<p>小氯温馨提示：这种注重隐私的搜索引擎，和 LibreWolf 这种注重隐私的浏览器更配哦。</p>
<h2 id="总结">总结</h2>
<p>总体而言 SearXNG 还是相当不错的，我目前已经将它设置为全平台通用的默认引擎了。</p>
<p>大体响应速度是 2-3s，还算可以接受。不过感觉有时候结果不是很准，所以我现在把它和 DuckDuckGo 混用。</p>
<p>再次感谢伟大的开源社区。祝各位老友互联网之旅愉快。</p>

      ]]></content:encoded></item><item><title>Hello，Aria2</title><link>https://chlor.me/hello-aria2/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-aria2/</guid><category>下载</category><category>折腾</category><description>本文介绍了如何配置 Aria2 作为 macOS 下载工具，涉及安装、设置配置文件、开机自启与自动更新 BT tracker 的步骤，同时感谢了一些教程的贡献者。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>本期讲讲下载神器 Aria2 的配置。网上关于 Aria2 的配置教程已经极为丰富，所以本文主要起一个备份的作用，其教学内容大多还是拾人牙慧。</p>
<p>感谢 GitHub 上的各路大佬，特别感谢博主<a href="https://vccv.cc">月青悠</a>的教程 <a href="https://vccv.cc/article/aria2-mac.html">macOS系统配置Aria2</a>。</p>
<h2 id="前言">前言</h2>
<p>本段接近于自言自语，不想看的老友可以直接跳过。</p>
<p>小氯在用 Windows 时（那大概是半年前，但感觉似乎是很久很久以前了），使用<del>开心版的</del>IDM（<a href="https://www.internetdownloadmanager.com/">INTERNET DOWNLOAD MANAGER</a>）作为下载器，用着还挺舒服的。不过换到 macOS 了就没那个好事了，于是我选择了 IDM 的有力竞争者 FDM。</p>
<p>美好的日子就这样一天天过去。FDM 整体虽然看起来有一点点古老，但是用着还可以。不过随着时间的推移，<del>闲得发慌的</del>我又开始挑毛病了：感觉 FDM 的下载速度不够快，而且没办法用 Firefox 版本的扩展（更正：这个扩展是存在的，但是我的备用浏览器是 基于 Firefox 的 LibreWolf，似乎有适配性问题），而且不是开源的。</p>
<p>于是我接触到了 Motrix。不过 Motrix 很久不更新了，我使用的是 Motrix 的衍生品 Imfile。</p>
<p>Imfile 总体而言还可以，虽然启动时会报出一个莫名其妙的错误提一提我的血压（<del>开发者目前对此持摆烂态度</del>）。不过最近用 Imfile 的时候，经常动弹不了一点，让我很头痛。而且这软件应该是个 Electron 的，我对这类软件没什么好感（<del>但是你现在的主力软件 Obsidian 和 VSCodium 不就是 Electron 的吗</del>）。</p>
<p>于是我盯上了据说很出色的<del>狗屁下载器</del>够快下载器（Gopeed）。具体体验不说了，一言难尽。反正我是没找到正确的打开方式。</p>
<p>思前想后之下我还是决定用之前没搞明白的命令行版 Aria2，反正我不怕耍命令行。经过折腾，现在已经达到了比较良好的效果。</p>
<h2 id="aria2-简介">Aria2 简介</h2>
<p>不想看的老友依然可以跳过。</p>
<p>Aria2 是一个跨平台的命令行下载器，具有轻量级、多线程、高速度、多协议支持（HTTP、FTP、BT 等）和高度可定制性（命令行工具基本都这样:）等优点。</p>
<p>不过需要注意：Aria2 并不是 Aria 的第二代。没有叫 Aria 的工具。</p>
<p>（冷知识：aria 的含义是「咏叹调」）</p>
<h2 id="安装-aria2">安装 Aria2</h2>
<p>我们依然使用万能的 Homebrew。</p>
<pre><code class="language-bash">brew install aria2
</code></pre>
<p>一般来说 M 芯片的默认下载位置是 <code>/opt/homebrew/bin/aria2c</code>，记好这个路径。如果不确定，请使用：</p>
<pre><code class="language-bash">where aria2c
</code></pre>
<h2 id="设置-aria2conf">设置 <code>aria2.conf</code></h2>
<p>注意，以下所有配置，请将 <code>chlorine</code> 替换为你的用户名。</p>
<p>我们在你的用户根目录下创建一个配置文件夹 <code>.aria2</code>。注意，下面所有的 <code>&lt;user&gt;</code> 都需要替换为你的用户名，例如 <code>chlorine</code>。</p>
<pre><code class="language-bash">mkdir -p ~/.aria2 &amp;&amp; cd $_
touch aria2.conf aria2.session aria2.log
nano aria2.conf # 或者你的编辑器
</code></pre>
<p>我的配置文件主要是照抄了博主月青悠的，只不过修改了几个地方：</p>
<ul>
<li>修改端口为 7800：之前这样是因为 6800 被占用了，有可能是因为 Imfile 的缘故。奇怪的是，7800 下载比 6800 快很多。</li>
<li>配置了 <code>all-proxy</code>，适配某一只会科学技术的小猫的配置。</li>
<li>注释掉了通知 hook，因为我们不需要。</li>
</ul>
<p>为了文章不至于有太长的代码，请在<a href="https://gist.github.com/chlorine3545/b500eed051ca8d7f5977440bacd0aa1b">此处</a>自取。</p>
<p>你需要做的：</p>
<ul>
<li>将复制的配置粘到文件中。</li>
<li>修改 <code>rpc-secret</code> 为你自己的密钥。可以自己随便写，但是推荐生成一个长字符串，使用 <code>openssl rand -base64 32</code> 即可。</li>
<li>你其他的自定义。</li>
</ul>
<h2 id="配置开机自启">配置开机自启</h2>
<p>这里比较麻烦，所幸万能的开源社区已经替我们做好了一切。</p>
<pre><code class="language-bash">touch ~/Library/LaunchAgents/aria2.plist
nano ~/Library/LaunchAgents/aria2.plist
</code></pre>
<p>把这段粘进去：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;aria2&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/opt/homebrew/bin/aria2c&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;WorkingDirectory&lt;/key&gt;
    &lt;string&gt;/Users/chlorine/Downloads&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>如果一切顺利，系统会提示你已经添加了一个开机启动项。</p>
<p>然后检查文件语法：</p>
<pre><code class="language-bash">plutil ~/Library/LaunchAgents/aria2.plist
</code></pre>
<p>如果 OK，修改文件权限：</p>
<pre><code class="language-bash">chmod 644 ~/Library/LaunchAgents/aria2.plist
</code></pre>
<p>然后加载启动项并启动服务：</p>
<pre><code class="language-bash">launchctl load ~/Library/LaunchAgents/aria2.plist
launchctl start aria2
</code></pre>
<p>这样，系统会在后台替你料理好一切。</p>
<h2 id="自动更新-bt-tracker">自动更新 BT tracker</h2>
<p>这个事情我用不太到，但是还是写上吧。</p>
<pre><code class="language-bash">touch ~/.aria2/trackers-list-aria2.sh
nano ~/.aria2/trackers-list-aria2.sh
</code></pre>
<p>写入：</p>
<pre><code class="language-bash">#!/usr/bin/env zsh
# 如果你的电脑没有 Zsh，请把 zsh 改为 bash，但是我更推荐安装一个
# 文件名 trackers-list-aria2.sh
# aria2 设置文件路径
CONF=${HOME}/.aria2/aria2.conf

# 设置选择的 trackerlist （可选 all_aria2.txt, best_aria2.txt, http_aria2.txt）
trackerfile=all_aria2.txt
# downloadfile=https://raw.githubusercontent.com/ngosang/trackerslist/master/${trackerfile}
downloadfile=https://trackerslist.com/${trackerfile}

list=$(curl -fsSL ${downloadfile})
if ! grep -q &quot;bt-tracker&quot; &quot;${CONF}&quot; ; then
    echo -e &quot;\033[34m==&gt; 添加 bt-tracker 服务器信息......\033[0m&quot;
    echo -e &quot;\nbt-tracker=${list}&quot; &gt;&gt; &quot;${CONF}&quot;
else
    echo -e &quot;\033[34m==&gt; 更新 bt-tracker 服务器信息.....\033[0m&quot;
    sed -i '' &quot;s@bt-tracker.*@bt-tracker=${list}@g&quot; &quot;${CONF}&quot;
fi

## 重启 aria2 服务
echo -e &quot;\033[34m==&gt; 停止 aria2 服务......\033[0m&quot;
launchctl stop aria2
echo -e &quot;\033[34m==&gt; 启动 aria2 服务......\033[0m&quot;
launchctl start aria2
</code></pre>
<p>然后添加定时任务：</p>
<pre><code class="language-bash">(crontab -l 2&amp;&gt; /dev/null; echo &quot;0 18 * * * ~/.aria2/trackers-list-aria2.sh&quot;) | crontab
</code></pre>
<p>这会在每天 18 点更新列表。如果希望频率不那么高，可以修改配置，比如每周日一次：</p>
<pre><code class="language-bash">(crontab -l 2&gt;&amp;1 /dev/null; echo &quot;0 18 * * 0 ~/.aria2/trackers-list-aria2.sh&quot;) | crontab
</code></pre>
<p>如果你希望就算是关机了还能在开机期间执行任务，那可以用 <code>launchd</code>。不过这个我没测试过，谨慎使用。</p>
<p>创建服务文件：</p>
<pre><code class="language-bash">touch ~/Library/LaunchAgents/com.user.trackers-list.plist
nano ~/Library/LaunchAgents/com.user.trackers-list.plist
</code></pre>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.user.trackers-list&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/bin/sh&lt;/string&gt;
        &lt;string&gt;/Users/chlorine/.aria2/trackers-list-aria2.sh&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;StartInterval&lt;/key&gt;
    &lt;integer&gt;86400&lt;/integer&gt; &lt;!-- 每24小时执行一次 --&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>
<p>然后按照类似上面的方法加载服务。</p>
<h2 id="chrome-扩展">Chrome 扩展</h2>
<p>每次都打开命令行下载无疑很痛苦，所幸我们可以通过 Chrome 扩展自动接管浏览器下载事件。</p>
<p>我们选择广受好评的 <a href="https://chromewebstore.google.com/detail/aria2-explorer/mpkodccbngfoacfalldjimigbofkhgjn">Aria2 Explorer</a>。直接点击安装即可。</p>
<p>安装后需要进行一点配置，这是我的配置，大家可以参考。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240812213211.avif" alt="端口和密钥记得改成你填写的，比如 7800" title="端口和密钥记得改成你填写的，比如 7800" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        端口和密钥记得改成你填写的，比如 7800
    </figcaption>
    
</figure></p>
<p>然后打开扩展页面。如果显示 Aria2 已连接，那么就大功告成了。</p>
<h2 id="最终效果">最终效果</h2>
<p>我们家的宽带大概是百兆的，网络很一般，于是我测试速度的时候吓了一跳。我测试用的是飞书的 <code>.dmg</code>，Obsidian 的那个（测试系统代理）只用了两秒钟。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240812213600.avif" alt="Aria2 下载飞书安装包时速度达到了 18 M / s" title="你这速度疑似有点太城市化了" 
        class="mx-auto rounded-lg block" loading="lazy" width="495"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        你这速度疑似有点太城市化了
    </figcaption>
    
</figure></p>
<p>再次感谢伟大的开源社区。祝各位老友资源获取愉快。</p>

      ]]></content:encoded></item><item><title>近期折腾简记</title><link>https://chlor.me/recent-tinkering-summary/</link><pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/recent-tinkering-summary/</guid><category>博客</category><category>折腾</category><category>备案</category><description>本文分享了作者近期一些折腾的简记，包括使用 CloudFlare 的临时邮箱、DeepLX 翻译服务的搭建及使用，以及阿里云服务器的开荒笔记。临时邮箱可以保护隐私，DeepLX 提供免注册的 DeepL API，而阿里云则通过合租解决了服务器问题。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/recent-tinkering-summary-cover.webp" alt="近期折腾简记" />
        </figure>
        <p>各位老友们好，我是 Chlorine。继续水文章，讲讲最近摸鱼期间折腾的一些事情。</p>
<p>封面：用 AI 搓出来的（不太完善的）小氯酱</p>
<h2 id="临时邮箱">临时邮箱</h2>
<p>继续薅 CloudFlare 活佛的羊毛。</p>
<p><del>大善人：别薅了别薅了我一年都亏好几个小目标了</del></p>
<p>插句话：为什么没有发现 CloudFlare 娘？按理说 CloudFlare 作为广大站长的好朋友，应该会有喜欢 ACG 的老友们做一个娘化的形象啊。很奇怪。</p>
<p>临时邮箱，字面意思，临时的邮箱（废话）。有时候我们突然需要一个服务，欢欢喜喜地找到一个网站，却发现需要注册才能使用。那注册就注册吧，又害怕来一堆垃圾邮件，或者是泄露隐私。这个时候就可以使用一个临时邮箱，用完即丢的那种。</p>
<p>基于 CloudFlare 的临时邮箱很多，我选择的是这个：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/dreamhunter2333/cloudflare_temp_email" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>dreamhunter2333/cloudflare_temp_email</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        CloudFlare free temp domain email 免费收发 临时域名邮箱 支持附件 IMAP SMTP TelegramBot
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #41b883">
            </span>
            <span>Vue</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">3238</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-02-19</span>
        </div>
    </div>
</div>
<p>功能基本上没有缺失的。由于我没兴趣配置 telegram bot 和发件，还会更简单一点。</p>
<p>官方文档比较简略，可能需要多读几遍。所幸开发大佬很热心，遇到问题可以去 issue 里面搜下。</p>
<p>我只补充一点：<strong>记得添加电子邮件路由，不仅是 catch-all 规则，还有一个已经被你创建的邮件地址规则，不然会收不到邮件</strong>。</p>
<h3 id="其他项目">其他项目</h3>
<p>包括但是不限于 emactions、文件中转站……</p>
<h2 id="deeplx-翻译服务">DeepLX 翻译服务</h2>
<p>DeepL 大家都知道，非常出色的翻译提供商。虽然说可能比不上用 GPT-4 这种比较强的大模型去翻译，但是对付 Google 翻译、百度翻译这种厂商【一般情况下】还是手拿把掐的。</p>
<p>众所周知，如果想要在一些用户界面之外的地方（比如说第三方翻译软件、代码中）执行翻译，那么我们就需要 API。不过……API 需要注册账号，还需要绑卡，最难受的是还得是境外的银行卡，而且一个月只有 500k 的 token……</p>
<p>500k 听着还挺多，但是如果你经常翻译各种外语文章，比方说 BBC/Reuters/NYT 等外国媒体的报道，或者是英语的学术论文，那您就用吧，一用一个不吱声。</p>
<p>这时候就要再次求助万能的开源社区了。隆重请出今日主角——<strong>DeepLX</strong>。</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/OwO-Network/DeepLX" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>OwO-Network/DeepLX</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        Powerful Free DeepL API, No Token Required
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #00ADD8">
            </span>
            <span>Go</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">7206</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-02-10</span>
        </div>
    </div>
</div>
<p>简单来说，DeepLX 就是一个通过模拟 DeepL iOS 客户端/DeepL Pro/DeepL 官方 API 来把 DeepL 免费服务转换为 DeepL API 的开源服务，免费，无限量，可以自部署，非常舒适。</p>
<p>唯一的要求应该就是需要服务器（有一个 CloudFlare Worker 版本的，但是已经不能用了。我自己写的 Vercel 版本在后面）。不过好在 DeepL 在大陆是能够顺利访问的，而且我也有一台虚拟机（不是阿里云的服务器，来自<a href="https://clf3.org">我光荣而伟大的孙哥</a>），可以支持我部署这样的业务。</p>
<h3 id="部署">部署</h3>


<div class="my-6 rounded-lg border-l-4 p-4 border-purple-500 bg-purple-50/50 dark:bg-purple-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-purple-700 dark:text-purple-300">
        <div class="w-5 h-5 i-carbon-star">
        </div>
        <span>Important</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>以下内容需要一台 Linux 机器，以及 docker 和 docker-compose 环境等。</p>
    </div>
</div>
<p>随便找你个你喜欢的目录（比如 <code>/home/yoghurtlee/deeplx</code>，如果没有喜欢的就 <code>mkdir yourdir &amp;&amp; cd $_</code> 创建一个），编辑 <code>docker-compose.yml</code> 文件：</p>
<pre><code class="language-bash">nano docker-compose.yml
# 使用你喜欢的编辑器，例如 Vim 也没问题
</code></pre>
<p>把下面的内容粘贴进去：</p>
<pre><code class="language-yaml">services:
    deeplx:
        image: ghcr.io/owo-network/deeplx:latest
        container_name: deeplx
        restart: always
        logging:
            options:
                max-size: 10m
        ports:
          - &quot;1188:1188&quot; # 如果端口被占用了就换个空闲的

        environment:
          # - AUTHKEY=your_offical_deepl_api_key # 如果你有 DeepL 官方的 key
          - TOKEN=your-token # 设置一个你喜欢的 token，防止被人滥用
</code></pre>
<p>然后启！动！</p>
<pre><code class="language-bash">docker-compose up -d
</code></pre>
<p>如果一切顺利，在启动完成后访问 <code>https://your-ip:1188(or your custom port)</code> 应该可以看到：</p>
<pre><code class="language-json">{
    &quot;code&quot;: 200,
    &quot;message&quot;: &quot;DeepL Free API, Developed by sjlleo and missuo. Go to /translate with POST. http://github.com/OwO-Network/DeepLX&quot;
}
</code></pre>
<p>我们的 API 接口就是 <code>&lt;your IP and port/translate</code>。使用方法大概是：</p>
<pre><code class="language-bash">curl --location 'your-API' \
--header 'Content-Type: application/json' \
--header 'Authorization: Bearer your-key' \
--data '{
    &quot;text&quot;: &quot;你的内容&quot;,
    &quot;source_lang&quot;: &quot;你的源语言&quot;,
    &quot;target_lang&quot;: &quot;你的目标语言&quot;
}'
</code></pre>
<p>由于我的虚拟机只有 IPv6 地址，还是动态的，每次都输入一串又臭又长的地址实在是难绷，所以我就用 DDNS-Go 和 Nginx Proxy Manager 绑定了个域名。这个事情应该难不倒各位老友，我就不赘述了。</p>
<h3 id="绑定到翻译服务">绑定到翻译服务</h3>
<p>这个事情简单，直接把你的 API 地址和 key 填进去就完事。像沉浸式翻译（Immersive Translate）和简约翻译（Kiss Translate）都可以用。</p>
<p>这个服务的稳定性还是不错的，不过有时候会 429，正常现象。</p>
<h3 id="faas-版本">FaaS 版本？</h3>
<p>我去翻了一下，感觉这个东西的原理很简单，那看起来完全可以用 Vercel 或者 Netlify 一类的部署。</p>
<p>找来找去只找到这个项目：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/LegendLeo/deeplx-serverless" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>LegendLeo/deeplx-serverless</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        DeepLX Free API for Serverless
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #f1e05a">
            </span>
            <span>JavaScript</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">143</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-01-21</span>
        </div>
    </div>
</div>
<p>不过这个是凉心云云函数版本的。于是我秉持着自己动手丰衣足食的理念，改了个 Vercel 版本的：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/chlorine3545/deeplx-faas" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>chlorine3545/deeplx-faas</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        可在 Vercel/Netlify 部署的 DeepLX API。DeepLX Free API for FaaS like Vercel and Netlify.
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #f1e05a">
            </span>
            <span>JavaScript</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">1</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2024-08-12</span>
        </div>
    </div>
</div>
<p>用法和普通版一样，不过 API 是 <code>/api/translate</code>。</p>
<p>如各位所知，我是真不懂前端，连需要在 <code>package.json</code> 里面加 Vercel 的 dependency 都不知道。这个版本可用，不过也只保证基本可用性，连 Key 的功能都没有。等以后我知识丰富了慢慢加好了。我还写了个 Workers 版本，但是还不能用。没办法，菜就多练。</p>
<p>此外，如果有现成的项目已经实现了这个功能，请一定要在评论区嘲笑我。</p>
<h2 id="阿里云服务器">阿里云服务器</h2>
<h3 id="前言">前言</h3>
<p>上次我分享我备案注销的经历后，有许多热心的老友都建议我：把一个子域名解析到阿里云的服务器上，然后保证其至少有一些流量，这样阿里云就不会把域名识别为未接入了。</p>
<p>我首先花了一点时间弄明白了这条建议是什么意思 🤣 然后我找到阿里云的售后工程师咨询了一下，得到了肯定的答复。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240811160225.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>这倒是个好方法，不过这里还有一个关键的问题：<strong>我没有服务器</strong>。当时备案的服务器是用高校优惠白嫖的，而阿里云正常的服务器是什么价格大家应该都清楚。作为一个穷学生，我是断然不会花这么多钱只挂一个网站的。</p>
<p><del>服务器你唯唯诺诺，买域名你重拳出击</del></p>
<p>于是，我想到了合租。偶然的机会，我联系到了大一上写沟课的一位同学（无系的）。在经过沟通后，我们达成了合租的协议。具体细节就不多说了，反正今天上午，我购入了一台阿里云的 ECS，2H2G 配置，经典的 99 元款。希望能以这个价格多续费几年。</p>
<h3 id="开荒">开荒</h3>
<p>然后需要简单开一下荒。</p>
<h4 id="重置密码">重置密码</h4>
<p>99 元的服务器默认不能远程登录（应该是），需要在 ECS 控制台重置密码。</p>
<p>随后就可以通过 SSH 命令进行登录了。</p>
<h4 id="创建-sudo-用户">创建 sudo 用户</h4>
<p>由于我的机器有两个人用，我们需要创建两个用户。</p>
<pre><code class="language-bash"># 在 root 模式下
adduser xxx
# 输入相关信息
usermod -aG sudo xxx
# 另一个同理
</code></pre>
<h4 id="安装-ufw">安装 ufw</h4>
<p>ufw 是我们 Ubuntu server 用户的好朋友。不过注意，由于云服务器的特殊性，光是用 ufw 开放端口是不够的，还得在云服务器控制台的安全组里面编辑规则。也可以一次性打开所有端口，但是不推荐，有亿点危险。</p>
<pre><code class="language-bash">sudo apt update # 以后这个步骤我就不写了
sudo apt install ufw
sudo ufw enable
# 假设你要开放 114514 号端口——当然实际上没有这个端口
sudo ufw allow 114514
</code></pre>
<p>可能是因为阿里云服务器的缘故，已经配置好了阿里云镜像源。速度极其可观，我就没动。</p>
<h4 id="更改默认-ssh-端口">更改默认 SSH 端口</h4>
<p>改 SSH 端口这个事情我是从光荣而伟大的孙哥那里学来的。据说可以有效防止一部分宵小之辈的攻击。</p>
<p>编辑器选一个你喜欢的：</p>
<pre><code class="language-bash">sudo nano /etc/ssh/sshd_config
</code></pre>
<p>把 <code>Port 22</code> 那一行取消注释，再改成你喜欢的端口，比方说 20022。</p>
<p>注意此处有被锁在外面的风险，建议开两个终端同时 SSH。以及别忘记添加防火墙放行。</p>
<h4 id="免密-ssh">免密 SSH</h4>
<p>又是来自光荣而伟大的孙哥。</p>
<p>在<strong>本机</strong>执行：</p>
<pre><code class="language-bash">ssh-copy-id -p your-ssh-port username@address
</code></pre>
<p>（如果没有 SSH 密钥记得生成一个）</p>
<h4 id="安装-1panel">安装 1Panel</h4>
<p>1Panel，著名的开源 Linux 服务器面板，界面清爽，功能全面，非常推荐大家用。我知道可能有老友认为自己命令行耍得贼 6，完全不需要面板。没关系，我之前也是那么觉得的。</p>
<p>直接一键安装：</p>
<pre><code class="language-bash">curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; sudo bash quick_start.sh
</code></pre>
<p>跟随向导安装即可。</p>
<p>安装完成，进入面板后，就可以随意发挥了。</p>
<h4 id="配置反代服务器">配置反代服务器</h4>
<p>这件事情让我几乎红温。原因是，我之前用的是 Nginx Proxy Manager，但其功能似乎和我的这个要求不太吻合，考虑到 Nginx 实在是太抽象了，我打算用 Caddy。</p>
<p>没想到的是 Caddy 更抽象，一直给我报 403，怎么调都没用。</p>
<p>于是我放弃了 Caddy。想到之前有个老哥用宝塔面板完成的配置，那我有 1Panel，是不是可以照猫画虎？</p>
<p>于是我去下载了应用商店的 OpenResty，一次通过。</p>
<p>赞美可视化界面。</p>
<h3 id="配置网站">配置网站</h3>
<p>我们接着上面的 OpenResty 说。</p>
<p>由于我只是想挂一个网站，因此直接把 Hugo 构建出来的产物扔到一个文件夹下就可以了。</p>
<p>先复制一份文件夹，把大部分多余的东西删掉，然后用我写好的 Makefile 跑一下得到 <code>public</code> 文件夹。记得把 <code>http://localhost:1313</code> 替换成你的域名（血的教训 qaq）。</p>
<p>1Panel 默认在一个挺长的地方创建网站文件夹：</p>
<pre><code class="language-bash">/opt/1panel/apps/openresty/openresty/www/sites
</code></pre>
<p>所以在 1Panel 的主机-文件选项卡中找到这个地方，创建一个文件夹，名字推荐就写网站的域名。然后把 <code>public</code> 上传上去，并更名为 <code>index</code>。然后创建 <code>logs</code> 文件夹并在其中创建 <code>access.log</code> 文件即可。</p>
<p>做好 DNS 解析后点击网站-创建网站-静态网站，选择你的目录，创建即可。</p>
<p>然后还可以申请个 SSL 证书，和 Nginx Proxy Manager 一样是可视化、自动续期的。不过需要 DNS 服务商的 API token。</p>
<p>然后访问域名，就可以看到一个纯静态网站了。可以设置个定时任务，隔一段时间访问下。这样就会有流量了。</p>
<h2 id="虚拟机改造">虚拟机改造</h2>
<p>在尝到了 OpenResty 的甜头后，我打算把我日用的虚拟机也改成 OpenResty。不过这里有一个问题：OR 需要通过 1Panel 安装，而 1Panel 不能通过 IP 直接访问，需要 Nginx Proxy Manager 的反代。这就成了死循环了。</p>
<p>然后我发现只要这样就可以了：</p>
<pre><code class="language-bash">1pctl listen-ip ipv6
</code></pre>
<p>因为我的虚拟机是纯 IPv6，所以默认不能访问（<code>小碘-认清现实の小曲.mp4</code>）。</p>
<p>然后的事情就没什么新意了。由于我的网站不多，手动迁移就完事。</p>
<p>现在我的虚拟机大概跑了这么几个容器：</p>
<ul>
<li>OpenResty（建站工具、反代服务器）</li>
<li>Stirling PDF（PDF 处理）</li>
<li>Memos（备忘录）</li>
<li>DeepLX（翻译接口）</li>
<li>DDNS Go（DDNS）</li>
<li>AList（网盘）</li>
<li>Domain Admin（域名控制台）</li>
</ul>
<p>里面 Stirling PDF 内存占用最大（大概 8%），但是用得却是最少的。</p>

      ]]></content:encoded></item><item><title>我的备案没了</title><link>https://chlor.me/my-icp-gone/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/my-icp-gone/</guid><category>博客</category><description>本文讲述了作者因网站备案问题而引发的一系列事件和感想。起初，作者利用优惠券在境内服务器上完成网站备案，但是网站实际托管在Vercel上。但后来收到阿里云的核查和整改通知。面对这一情况，作者选择了注销备案，并分享了这一过程中的无奈和继续网站运营的打算。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。紧急加更一期。</p>
<h2 id="起因">起因</h2>
<p>之前<a href="https://dusays.com">杜老师</a>曾经在评论区问：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>才注意到，境外平台也能做备案吗？</p>
</blockquote>
<p>我回复说：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>其实是不能的，但是当时用优惠券白嫖了一台境内的服务器，所以就可以拿来备案了</p>
</blockquote>
<p>颇有些扬扬自得。</p>
<p>事情是这样的：我为网站搞备案的时候，由于备案要求必须有境内服务器，<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>因此我用阿里云高校合作计划的优惠券白嫖了一点服务器时长，然后在失败一次后，成功备案。同时又做了公安备案和安全评估，得到了官方的交互式许可，可以光明正大地开评论了。</p>
<p>不过，如果大家去看我的关于页面，会发现我明明白白地写着：本网站托管在 Vercel 上。</p>
<p>这是怎么回事？</p>
<h2 id="是钻空子吗">是钻空子吗？</h2>
<p>一个不难注意到的事实是：<strong>ICP 备案只核查你的域名是否关联一个内地服务器，甚至都不需要你接入这个服务器</strong>（当然，没完成的时候也不能接入）。而在备案之后如何怎样，似乎没有硬性要求。</p>
<p>那么我是不是可以用境内服务器备案，而实际上运行的时候都解析到境外服务器或者托管平台？</p>
<p>理论上没问题。但是，我们能想到的，管理者也能想到。各大运营商都有一个机制——备案核查，定期对备案信息位于阿里云的域名进行检查，如果发现其没有接入阿里云，会通知其整改。如果没有动作，轻则取消接入，重则注销备案。这样可以很有效地防止那些不怀好意的「钻空子」行为。</p>
<p>——<strong>比如我，虽然我完全没有不怀好意。</strong></p>
<p>是的，我根本没想过将网站转移到境内服务器去。我白嫖的那个阿里云服务器根本无法承担起网站运行的重任，而 Vercel 对于托管我这种静态网站已经尽善尽美了。借助各方大佬提供的优化线路等方式，速度虽然比不上国内 CDN，但是也已经完全够用。我想要的，其实除了刚开始吃饱了撑着想要的 CDN 外，其实想要的就是一个「合规性」——希望我的网站能被国家认可为符合规定的网站，希望老友们无论到了将来的什么时候，都能方便地来到园子里，一起围炉煮茶，而不至于运用各种各样的科学技术手段。</p>
<p>当时备案的时候，我就是怀着这样一种带有侥幸的心理的。而在公安交互式备案完成、域名转出阿里云后，我天真地认为：事情已经结束了。我可以一直这样享受着境外平台的便捷服务，同时手握国家认可的合规性的「旗籍」。</p>
<h2 id="梦醒了">梦醒了</h2>
<p>然而我早该意识到，只要你希望获得认可，你就不应该有任何一点的侥幸心理，不要去钻任何的空子，即使你并无任何的恶意，只是一个遵纪守法、热爱祖国的普通大学生。</p>
<p>今天上午，我们还在大巴车上时，我收到了一封让我眼前一黑的邮件：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240806190831.avif" alt="该来的总是要来" title="该来的总是要来" 
        class="mx-auto rounded-lg block" loading="lazy" width="379"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        该来的总是要来
    </figcaption>
    
</figure></p>
<p>于是我紧急咨询了阿里云的工程师和海淀网安的警察同志。其实也没什么可以紧急咨询的，我心里对解决方案心知肚明：要么接入阿里云的服务器，要么取消接入或者注销备案。取消接入就意味着需要寻找下一个接入商，但是这就是一个同样的问题；而我白嫖来的小服务器根本无法支持我运行我的网站。于是，解决方案只剩了一个：如果我不希望被体面，那就只能自己体面了。</p>
<p>郁郁地前往阿里云备案控制台和公安网备控制台，提交了注销申请，然后去编辑网站的源码，把备案信息去掉。只等管局审核通过，我网站只坚持了一个月多的「旗籍」就彻底无了。</p>
<h2 id="一点碎碎念">一点碎碎念</h2>
<p>我没有任何的抱怨和不满，只是有点伤心。毕竟是我努力了好久才拿到的「旗籍」。</p>
<p>不过这其实对我的网站也不会有太大影响：我的网站没有套任何国内 CDN；缤纷云图床可以直接用源站，VSCodium 做全局替换就完事。唯一的问题可能就是我不确定我心爱的域名 <a href="https://yoghurtlee.com">https://yoghurtlee.com</a> 会不会出现访问问题，如果答案是肯定的，我将会启动我的备用域名 <a href="https://pursuing.me">https://pursuing.me</a>（或者再注册一个，比方说 <a href="https://yuanzi.org">https://yuanzi.org</a>？），并以正式邮件的形式通知各位老友。这样会有一些麻烦的事情，比如说搜索引擎的收录问题，但是我必须处理。</p>
<p>无论如何，太阳都会照常升起。园子当然不会因为这个事情就停止运营，欢迎各位老友继续来园子围炉煮茶。</p>
<p>而我相信我的网站依然可以在大陆地区正常访问。毕竟就如前文所说，我是一个遵纪守法、热爱祖国的大学生。</p>
<hr>
<p>花了点时间写这篇有点混乱的速报，愿各位老友一切安好。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>这里有一个问题：<strong>「境内」（「内地」、「大陆」）这个概念一般单指中国大陆地区，而「国内」则还包含港澳台等</strong>。但是在谈及备案时，这两个词有时候会混用。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>园子装修日志</title><link>https://chlor.me/yuanzi-decorating/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/yuanzi-decorating/</guid><category>博客</category><category>邮箱</category><category>折腾</category><category>Info酱</category><description>本文讲述了作者对博客进行的一系列创意改进，包括将友链页面重塑为「紫荆公寓」、设计有趣的入住须知、配置域名邮箱、创建名为Info酱的评论通知小助手等。作者以轻松幽默的口吻分享了装修过程中的思考和经验,展现了对博客优化的热情，同时也为读者提供了一些有关博客个性化的实用建议和灵感。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/yuanzi-decorating.webp" alt="园子装修日志" />
        </figure>
        <p>各位老友们好，我是 Chlorine。Hello from ShenZhen.</p>
<p>本期唠唠闲磕，讲讲最近给园子装修的事情。</p>
<h2 id="友链页面重写">友链页面重写</h2>
<p>起因是我看到了<a href="https://www.wikimoe.com">广树大佬</a>和<a href="https://www.chitudexiaozhi.com/">小智大佬</a>的友链页面，感觉很有意思。这个友链页面叫作「女子寮」（中文：女生宿舍）。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>更正：事实上应该是从广树大佬的友链一路看过去的，感谢广树大佬的更正 OωO</p>
</blockquote>
<p>嗯，友链嘛，不就是赛博邻居吗？很合理啊（只是我很好奇，这样男生还能申请友链吗？）。</p>
<p>下面这张图是<a href="https://blog.beixibaobao.com/page/link">北熙大佬</a>的友链页面申请须知的一部分，我看完觉得更有意思了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240804230255.avif" alt="还有房间类型" title="还有房间类型" 
        class="mx-auto rounded-lg block" loading="lazy" width="578"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        还有房间类型
    </figcaption>
    
</figure></p>
<p>正好我这几天对于独博有了一些别的不成熟的感触（见<a href="/weekly-4/">我的上一期周报</a>），于是我动了借（chāo）鉴（xí）的念头。</p>
<h2 id="装修友链页面">装修友链页面</h2>
<p>我打算直接照抄大佬们的创意。当然不能叫女子寮，既然我的博客叫「园子里的日光」，园子就是清华园，那么干脆就叫紫荆公寓好了。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>然后我在高铁上花了一点时间，写了一个新的友链界面须知。由于当时的精神状态也不是很健康，偶尔也会有一些《不是那么合理》的句子，比方说：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>请勿将电动车电池、集束炸弹、氢氧化钠、火星、混凝土搅拌机、王水、数据结构、沈阳大街、3-甲基吲哚、钋 210、某些互联网大厂、蘑菇蛋、波尔布特等危险物品带入公寓。</p>
</blockquote>
<p>大家可以在紫荆公寓的公示板（<a href="https://www.yoghurtlee.com/links">这里</a>）查看完整的公示内容，另外，也欢迎老友们入住紫荆公寓 OωO</p>
<h3 id="房间号">房间号</h3>
<p>紫荆公寓的所有房间都是相同的，因此不存在房间种类的问题。不过房间号倒是可以搞一个。</p>
<p>目前列出来的老友们的房间号大都是随机写的，如果有老友希望换房间，请尽管留言。</p>
<p>此外我在想，等将来友链多了，是不是可以做一个页面，展示为一个楼层示意图，在每一个「房间」真的放上老友们的头像？我觉得是个不错的主意，但是目前友链还太少了。</p>
<h3 id="申请">申请</h3>
<p>目前友链的申请依赖于 Twikoo 评论区（叫 Twikoo 娘也不是不行 OωO）或者直接发邮件。我在想能否做一个在线表单？直接填写即可，每收到一个就给我发邮件。</p>
<p>理论上完全可行，用 CloudFlare 一把梭（Pages+Workers+D1+R2+KV+Turnstile）应该不需要费很大力气。很不幸，我不会 JavaScript，也不熟悉前端。</p>
<p><del>那你还在这不需要费很大力气</del></p>
<h2 id="配置域名邮箱">配置域名邮箱</h2>
<p>其实我一直对域名邮箱没什么大兴趣。主要原因是即使是域名邮箱，大部分都也是依靠免费的企业邮箱服务的，本质上除了彰显个性之外似乎也没什么好的地方。至于自建邮件服务器，我目前还没那个资源。</p>
<p><del>才不会告诉你们是因为我不知道前缀用哪个</del></p>
<p>事情的转机完全是因为一个毫不相干的事情：Twikoo 邮件通知模板。洪哥（<a href="https://zhheo.com">张洪Heo大佬</a>）分享了一个 Twikoo 评论的模板（看<a href="https://blog.zhheo.com/p/169a1abb.html">这里</a>），于是我也动了 DIY 的念头。在 ChatGPT 的帮助下，我写了一个还算好看的模板。</p>
<p>写完模板之后我的思路开始活跃：那通知的口吻是不是也可以改一改？不用那么冰冷的口气？</p>
<p>于是在一顿 brainstorm 后，园子的提醒小助手——可爱的 Info 酱（Infochan）诞生了。之所以叫 Info 酱，是因为带清内网的信息聚合网站就叫清华信息门户（THU Info）<del>薅母校的命名羊毛薅到底了属于</del>。</p>
<p>目前 Info 酱还没有一个准确完整的人设，欢迎各位喜欢 ACGN 的老友们提出您的高见（拜托了 qaq）。</p>
<p>顺便放一下我的代码，大家自行取用，想看详细 DIY 信息的可以去看洪哥的博文。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;zh-CN&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Info！「${SITE_NAME}」 评论通知&lt;/title&gt;
    &lt;style&gt;
        body {
            font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f4f8;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            padding-bottom: 20px;
            border-bottom: 1px solid #e1e5e9;
        }
        .header img {
            width: 100px;
            height: auto;
            border-radius: 50%;
            border: 2px solid #007bff;
            padding: 5px;
            background: #ffffff;
        }
        .header h1 {
            font-size: 28px;
            color: #333;
            margin: 15px 0;
            font-weight: 600;
        }
        .content {
            padding: 20px;
        }
        .content h2 {
            font-size: 20px;
            color: #007bff;
            margin: 0;
            font-weight: 600;
        }
        .content p {
            font-size: 16px;
            color: #555;
            line-height: 1.6;
            margin: 15px 0;
        }
        .comment-section {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            border: 1px solid #e1e5e9;
        }
        .comment-section h3 {
            font-size: 18px;
            color: #333;
            margin: 0 0 10px;
            font-weight: 500;
        }
        .comment-section p {
            font-size: 15px;
            color: #666;
            margin: 5px 0;
        }
        .button {
            display: inline-block;
            padding: 12px 25px;
            font-size: 16px;
            color: #ffffff;
            background: #007bff;
            border-radius: 25px;
            text-decoration: none;
            text-align: center;
            font-weight: 600;
            margin-top: 20px;
        }
        .button:hover {
            background: #0056b3;
        }
        .footer {
            text-align: center;
            padding-top: 20px;
            font-size: 14px;
            color: #888;
        }
        .footer a {
            color: #007bff;
            text-decoration: none;
        }
        .footer a:hover {
            text-decoration: underline;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class=&quot;container&quot;&gt;
        &lt;div class=&quot;header&quot;&gt;
            &lt;img src=&quot;https://your.img.link&quot; alt=&quot;Site Logo&quot;&gt;
            &lt;h1&gt;「${SITE_NAME}」 评论通知&lt;/h1&gt;
        &lt;/div&gt;
        &lt;div class=&quot;content&quot;&gt;
            &lt;h2&gt;Hi there!&lt;/h2&gt;
            &lt;p&gt;这里是 「${SITE_NAME}」 的小助手 Info 酱。您在园子里的评论收到了新的回复！下面是一些细节：&lt;/p&gt;
            &lt;div class=&quot;comment-section&quot;&gt;
                &lt;h3&gt;${PARENT_NICK} 说：&lt;/h3&gt;
                &lt;p&gt;${PARENT_COMMENT}&lt;/p&gt;
                &lt;hr style=&quot;border: 1px solid #e1e5e9; margin: 15px 0;&quot;&gt;
                &lt;h3&gt;${NICK} 回复：&lt;/h3&gt;
                &lt;p&gt;${COMMENT}&lt;/p&gt;
            &lt;/div&gt;
            &lt;a href=&quot;${POST_URL}&quot; class=&quot;button&quot;&gt;查看评论&lt;/a&gt;
        &lt;/div&gt;
        &lt;div class=&quot;footer&quot;&gt;
            &lt;p&gt;本邮件由 Info 酱自动发送，请勿进行回复！&lt;/p&gt;
            &lt;p&gt;&lt;a href=&quot;${SITE_URL}&quot; target=&quot;_blank&quot;&gt;去园子里看看&lt;/a&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>效果大概是：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240804234219.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="425"  />
    
</figure></p>
<p>然后我就想：那是不是应该给可爱的 Info 酱一个有标识性的邮箱？（<code>无止境的折腾.avif</code>）</p>
<p>行。我觉得，<code>infochan</code> 这个前缀应该不会很抢手，我只需要又双叒叕注册一个邮箱就可以了。</p>
<p>但是我不想了。我觉得，是时候给这个园子一个真正的域名邮箱了。</p>
<p>我首先相中的是 Lark（飞书国际版）。没有发现成员数目限制（也有说是 50 人的，反正是肯定够了），每天邮件上限 450 封/人，成员共享 200G 的邮箱空间。最重要的，我对这个<del>破</del>软件的印象还可以。</p>
<p>注册过程还算顺利，注意配置全局网络就可以。然后按部就班地加 DNS 记录就可以了。不过邮箱设置需要下载飞书客户端，有点难绷，毕竟一个软件就有 1.2G（macOS）。</p>
<p>然后这个故事就不出意外地出意外了。我的 Twikoo 邮件通知始终无法配置，一直显示 535，非常难绷。</p>
<p>然后我只能放弃。毕竟我现在还在神圣清华帝国深圳自治领（bushi）实地调研，也没时间和这个东西硬刚。</p>
<p>后来我又试了下阿里云的免费企业邮箱，支持 50 个用户，每个用户 5G 空间。<del>没想到套路云还有这种羊毛可以薅</del>这次的体验倒是很好，没有出任何岔子。只需要注意一点：在配置 Twikoo 评论的时候，「用户名」一定要把后缀也带上，不然又会报错。（不知道之前飞书的报错能不能用这个方法解决）</p>
<p>现在我用阿里云的企业邮箱注册了我的个人邮箱（me）、Info 酱的邮箱（infochan）和一个 Git 提交邮箱（git），由于服务器在国内，速度非常可观。cons 可能就是需要绑定手机号，以及国内大厂对于用户隐私的良好尊重了。</p>
<p>反正目前我用着还行，这个羊毛能薅一天是一天，实在不行转战飞书+Mailgun 或者 Mail Ru，天下这么大，总会有白嫖怪的容身之地的（bushi）。</p>
<p>以后大家就可以使用 <code>me#yoghurtlee.com</code>（请把 <code>#</code> 替换为 <code>@</code>）联系我了。我的 GPG 公钥是 <code>96359FF161D5E8BC</code>，已上传至 <a href="https://pgp.mit.edu"> MIT 公钥服务器</a>。</p>
<p>此外，多说一句，之前我用的是 <code>clmoe.top</code>，结果在 Mail Tester 检测满分的情况下在我测试的时候被认定为垃圾邮件了 qaq 就欺负 <code>.top</code> 钓鱼邮件多呗<del>Info 酱那么可爱你是怎么舍得的啊</del></p>
<h2 id="结语">结语</h2>
<p>兜兜转转也算是简单把园子装修了一下。以后再继续慢慢装，反正我离敲不动键盘还剩好多年呢。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>紫荆公寓是带清的一个宿舍区，也是我常住的地方。<del>尽管说紫荆的条件也就那样</del>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（4）：缝隙之间</title><link>https://chlor.me/weekly-4/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-4/</guid><category>博客</category><category>周报</category><category>RSS</category><description>浮生散记第四期。作者回顾了自己的假期和工作情况，还介绍了RSS和独立博客的意义。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-4-cover.avif" alt="Ephemeralis-Weekly（4）：缝隙之间" />
        </figure>
        <h1 id="ephemeralis-weekly4缝隙之间">Ephemeralis-Weekly（4）：缝隙之间</h1>
<p>各位老友们好，我是 Chlorine。</p>
<p>现在其实不是写周报的时间，但是考虑到下面几天的经历几乎一定会和这几天严重割裂，所以提前（延后）写一下周报，总结一下这几天令人一言难尽的小假期。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第四期，日期范围为公历 2024 年 7 月 23 日至 7 月 2 日。祝食用愉快。</p>
<h2 id="缝隙中的假期">缝隙中的假期</h2>
<p>如上期 <a href="/weekly-3/">Ephemeralis-Weekly（3）：执笔衔书</a>所说，我前段时间的任务就是忙 Java 大作业。我们的大作业验收在 27 日上午。在闯关（铜人音）后，我就提着行李箱，头也不回地坐上了回家的高铁。</p>
<p>其实这次回家有点无厘头。我几乎是在前一天晚上才定下来我要回去的，甚至由于这几天北京恶劣的天气，我原本定的高铁票还被取消了，搞得我差点红温。所幸后来递补上了一张票，还是直达的，还不错。</p>
<p>说起来这也是我第一次主要使用公共交通工具去朝阳站（其实我一共也没去几次）。说起来也相当顺利，在清华东路西口站坐 15 号线到望京，然后换乘 14 号线到东风北桥，再坐公交车（我是打车）就到了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240802134352.avif" alt="奥地利画家（警觉）" title="奥地利画家（警觉）" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        奥地利画家（警觉）
    </figcaption>
    
</figure></p>
<p>由于时间比较充裕，就在朝阳站吃的午饭。吃的是金拱门（麦当劳），性价比嘛，emmm，他明明可以直接抢我 50r 的，却还要送我一份午饭。他真的，我哭死。</p>
<p>朝阳站的人多得离谱，很可惜忘记拍照了。</p>
<p>下面就是漫长的旅行了。路上无聊，我提前下了部电影，卓别林的《大独裁者》（B 站热心网友修复版）。这部片子之前看过一次，非常推荐。</p>
<p>很可惜，到家之后，沟槽的天气依然在追我。我有幸见证了东北罕见的梅雨天，我的被褥全天都是湿漉漉的。</p>
<h2 id="写报告的人">写报告的人</h2>
<p>我一直认为，我算是个「天生报告圣体」。只要是涉及到写报告的项目，我都能在很短的时间内拿出让你瞠目结舌的报告。这应当得益于我<del>信口开河</del>出口成章的能力，以及 Typora Theme Lapis 的美观。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240802135217.avif" alt="喜欢我一百页的大作业报告吗？" title="喜欢我一百页的大作业报告吗？" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        喜欢我一百页的大作业报告吗？
    </figcaption>
    
</figure></p>
<p>但是我并不想在假期还要整天赶报告。很不幸，这件事由不得我。</p>
<p>如各位所见，带清会在大一升大二的暑假组织同学们进行小学期和思政实践。牢针的调研地点是深圳，而我是专业调研组的组长（调研组分专业调研组和思政调研组），同时还是预调研报告的主理人。</p>
<p>听起来似乎还挺好，但是当你听完那些任务的时候可能就不会这么觉得了。</p>
<p>中间的过程我也不和大家细讲了，我害怕影响大家心情。总而言之就是反反复复改需求，常常是写到快结束了突然改要求。我写了好多个整天，更要命的是那几天我还在发烧，我现在都难以想象我是怎么活下来的。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240802135757.avif" alt="把我们各个组的同学都搞破防了" title="把我们各个组的同学都搞破防了" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        把我们各个组的同学都搞破防了
    </figcaption>
    
</figure></p>
<p>反正最后终于是搞出来了，我们都累得够呛。当然，这并不算是抱怨，无论是老师还是同学还是对接方都在很努力很用心地做，只是大部分时候天不遂人愿罢了。</p>
<h2 id="v2rss">V2RSS</h2>
<p>本节标题来自 V2EX（Way to Explore）。</p>
<p>先做个科普（from Wikipedia）：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>RSS（英文全称：RDF Site Summary 或 Really Simple Syndication），中文译作简易信息聚合，也称聚合内容，是一种消息来源格式规范，用以聚合多个网站更新的内容并自动通知网站订阅者。使用 RSS 后，网站订阅者便无需再手动查看网站是否有新的内容，同时 RSS 可将多个网站更新的内容进行整合，以摘要的形式呈现，有助于订阅者快速获取重要信息，并选择性地点阅查看。</p>
</blockquote>
<p>RSS 基于 XML 语言，是一种标准化的数据格式（由于我 OOP 的大作业写的就是 TinyXML2，Java 大作业更是天天用 XML 写布局，我对这个货相对还比较熟悉。简单来说相当于自定义标签和属性的 HTML）。 RSS Feed 文件包含了一系列的 <code>&lt;item&gt;</code> 元素，每个 <code>&lt;item&gt;</code> 代表一篇更新内容。RSS 阅读器可以解析 XML 文件，提取其中的关键信息并展示给用户。</p>
<p>简单来说，RSS 就像是一个网站的新闻推送，让你不用访问网站就能知道它更新了什么。RSS 的原理可以简单理解为以下几个步骤：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240802141229.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>RSS 的好处大概就是（没错是用 AI 总结的\逃）：</p>
<ul>
<li><strong>及时获取最新信息:</strong>  订阅 RSS 后，网站更新的内容会自动推送到你的阅读器，无需反复访问网站查看。</li>
<li><strong>高效阅读:</strong>  RSS 阅读器会将多个网站的更新内容聚合到一起，方便你集中阅读。</li>
<li><strong>节省时间:</strong>  不用浪费时间浏览无关信息，直接获取你感兴趣的内容。</li>
</ul>
<p>对于我本人而言，在很长（其实也不长。我的网络生活应该是从我上大学开始分界的）一段时间内，RSS 在我眼里就是一个完全没有什么实际影响的「光锥之外」的技术概念。而且，都 4202 年了欸，电子邮件我几乎都不看了，还指望我看 RSS？开什么玩笑捏。</p>
<p>然后当然就是大家喜闻乐见的打脸时刻。今天（2024.8.2）我光速下载了在 Apple 生态下久负盛名的 NetNewsWire，然后把自己平时喜欢逛的几个博友的网站和技术周刊都加了进去。</p>
<p>为什么呢？</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我不到啊！</p>
</blockquote>
<p>没错，我还真不怎么知道。大家就姑且认为我精力过剩了吧。反正我现在觉得 RSS 是个蛮好的东西。</p>
<p>如果大家希望通过 RSS 订阅我的博客：<a href="https://www.yoghurtlee.com/index.xml">https://www.yoghurtlee.com/index.xml</a>。</p>
<h2 id="缝隙中的人">缝隙中的人</h2>
<p>我们接着 RSS 讲。在今天刚刚搞好 RSS 的时候，我突然想起了当初和<a href="https://clf3.org">孙哥</a>的对话：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240802142447.avif" alt="IMG-20240802142447.avif" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>孙哥是个技术人，并不怎么在乎博客折腾来折腾去这些事情。不过有一点是对的：RSS 确实是个很老的东西了。RSS 首次发布于 1999 年 3 月 15 日，最新版本的 RSS 2.0 也是 15 年前的事情了（RSS3 和传统的 RSS 很不一样，是去中心化技术的一部分）。现在还在用 RSS 读文章，就像是还在用老式收音机听广播一样。</p>
<p><strong>不过话又说回来，做独立博客这件事本身，不就是一件「老旧且过时」的事情吗？</strong></p>
<p>技术门槛高（相对于直接在现成的平台上写而言），时间投入大，即时互动少，没有推荐算法，没有依托平台的推流，盈利困难……怎么看，独立博客都是一项费力不讨好的小众爱好。</p>
<p>事实也的确如此。独立博客就像是数字汪洋中的孤岛，用自己的声嘶力竭演绎着什么叫作沧海一粟。</p>
<hr>
<p>独博圈的大佬<a href="https://dusays.com">杜老师</a>前些天发了一篇文章：<a href="https://dusays.com/730/">杜老师说稿件征集</a>，向博友们征集感兴趣的素材和话题。</p>
<p>我感觉很有趣，下滑看看评论区，不同的博友们都开开心心地提着自己的见解。我忍不住也打了条应景的评论：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>感觉独立博客做到杜老师这么出色，已经是整个博友圈的共同宝藏了。</p>
</blockquote>
<p>是啊，共同的宝藏。就我有限的认识，独立博客的读者许多（甚至可以说是大部分？）也是独立博主，不同的见解、知识、经历和体验以 Hypertext Transfer Protocol 为载体在不同的个体之间流动，形成一个小众、冷清但又热闹的圈子。大家的身份不同、生活不同、喜好不同，但是既然都在做这些事情，那至少是有一部分共鸣的。那么，组成一个汪洋大海中的群岛，平时各自打理，时常互通有无，不好吗？</p>
<p>这应该也是我开始努力「对外航行」的原因。从「开往」的友链接力项目，到友链的扩列，到开始积极地「走街串巷」，去赛博拜访同样做着独立博客的老友们（老友是我的一个习惯用语，即使我们只认识了一分钟，如果灵魂相通，那也都是 friends that haven&rsquo;t met before）。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我的岛屿之上，荒无人烟。<br>
我捡拾山石的苔藓，<br>
焚烧风干的枯枝落叶，<br>
燃起火焰。</p>
<p>有时候有人登岛，<br>
有时候一个人狂欢。</p>
</blockquote>
<p>海平面淹没不了岛屿，无论网络如何变迁，我始终相信，独立博客作为一群「小众、过时、老派」的人的精神家园，会且始终会存在。</p>
<p><strong>毕竟，我们都是「活在世界缝隙中的人」</strong>。</p>
<h2 id="其他">其他</h2>
<ul>
<li>写了个 Python 脚本，基本上解决了 Obsidian 图片压缩的问题，只是上传还有点麻烦。</li>
<li>奇怪的烤肉串，味道还不错。</li>
<li>最近开始重拾 TypeScript，不得不说 JavaScript 和 Java 是真挺像的。此外 <code>Bun.js</code> 真是宝藏运行时。</li>
<li>马上要飞去深圳了……祝我旅途愉快！</li>
</ul>

      ]]></content:encoded></item><item><title>Hello，Sink</title><link>https://chlor.me/hello-sink/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-sink/</guid><category>CloudFlare</category><description>本文介绍了 Sink 项目的部署过程。Sink 是一个基于 CloudFlare 的短链接项目，支持数据分析和链接截止日期等功能。本文详细介绍了使用 CloudFlare 部署 Sink 的过程。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-sink-cover.webp" alt="Hello，Sink" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>最近在重拾 TypeScript（<del>小氯你到底还要开多少个语言的坑啊</del>），同时热衷于薅带善人 CloudFlare 的羊毛，于是盯上了 CloudFlare Workers&amp;Pages，然后找到了一个有趣的项目：<a href="https://sink.cool">Sink</a>。</p>
<h2 id="简介">简介</h2>
<p>Sink 是一个完全基于 CloudFlare 的短链接（shortURL）项目，支持数据分析和链接截止日期等多种功能。</p>
<p>啥是短链接？简单来说，如果你觉得小氯的文章<a href="https://www.yoghurtlee.com/swup-modifying">解决Swup导致的JavaScript加载失效问题</a>写得不错（<del>行了我知道你并不这么觉得</del>），希望分享给朋友，你很可能会把这个链接直接粘贴给你的朋友：</p>
<pre><code class="language-txt">https://www.yoghurtlee.com/swup-modifying
</code></pre>
<p>看着还行，不是吗？但是假如小氯的链接是：</p>
<pre><code class="language-txt">https://ameaninglessprefix.averylongurlforyoghurtlee.ameaninglesstldthatdoesntevenexist/ameaninglessdirthatstandsformyposts/anothermeaninglessprefix/2024/07/26/qwertyuiopasdfghjklzxcvbnm1234567890/swup-modifying
</code></pre>
<p>我敢打赌你的朋友看到这个链接就会汗流浃背。</p>
<p>但是如果现在你贴心地告诉朋友，这个链接也是一样的：</p>
<pre><code class="language-txt">https://s.clmoe.top/fmf94q
</code></pre>
<p>我相信你们之间的友谊会得到相当程度的强化。</p>
<p>概括一下，就是说有时候一个链接实在是太长了，不便于分享和发送，我们就想办法造出一个短链接来，使得这个短链接指向原本长链接一样的位置。</p>
<p>市面上的短链接服务有很多，Sink 是其中能自部署的服务中比较出色的一个。</p>
<h2 id="what-do-i-need">What do I need?</h2>
<ul>
<li>一个 CloudFlare 账户</li>
<li>一个托管在 CloudFlare 的域名，短点最好</li>
<li>一个 GitHub 账户</li>
<li>一台能顺畅访问互联网的设备</li>
<li>手，脑子</li>
</ul>
<h2 id="准备工作">准备工作</h2>
<h3 id="获取-cloudflare-account-id">获取 CloudFlare Account ID</h3>
<p>在 CloudFlare 仪表板中随便点击一个域名，进入概览页面，向下滑，在 API 一栏中就能看到【账户 ID】了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/202407292145948.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="426"  />
    
</figure></p>
<h3 id="创建-cloudflare-account-api">创建 CloudFlare Account API</h3>
<p>在仪表板的右上角点击账户图标-我的个人资料-API 令牌，然后点击创建 API 令牌。</p>
<p>滑动到最下方，选择【创建自定义令牌】，配置如下所示：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240729215335.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="584"  />
    
</figure></p>
<h3 id="创建-cloudflare-kv">创建 CloudFlare KV</h3>
<p>在侧边栏-Workers 和 Pages-KV 创建即可，名字随便起。</p>
<h2 id="启动">启动！</h2>
<p>首先进入 GitHub，fork <a href="https://github.com/ccbikai/sink">这个仓库</a>（别忘记给作者点 star~）。然后进入 CloudFlare，在侧边栏点击【Workers 和 Pages】，新建一个 page，选择【通过导入现有 Git 存储库创建】（如果还没绑定 CloudFlare Pages APP 到 GitHub，按要求操作即可），仓库选择刚刚克隆的仓库。</p>
<p>进入配置界面，项目名称随便起，框架预设选择 <code>Nuxt.js</code>，然后点击【环境变量（高级）】，增加如下几个环境变量：</p>
<ul>
<li><code>NUXT_SITE_TOKEN</code>：这个随便起，但是<strong>长度需要超过 8，且不能是纯数字</strong>！</li>
<li><code>NUXT_CF_ACCOUNT_ID</code>：你的账户 ID</li>
<li><code>NUXT_CF_API_TOKEN</code>：你的 API token</li>
</ul>
<p>然后点击部署，随即取消（<del>CloudFlare：你是真的苟</del>）。进入项目管理界面-设置-函数，添加以下的绑定：</p>
<ul>
<li>KV：键就是 <code>KV</code>，值是你刚才的 KV namespace。</li>
<li>Workers AI（Optional）：键为 <code>AI</code>，值会自动给你生成为 <code>Workers AI Catalog</code>。</li>
<li>Analytics Engine：键为 <code>ANALYTICS</code> ，值为 <code>sink</code>（需要启动 CloudFlare 分析引擎，照做即可）。</li>
</ul>


<div class="my-6 rounded-lg border-l-4 p-4 border-purple-500 bg-purple-50/50 dark:bg-purple-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-purple-700 dark:text-purple-300">
        <div class="w-5 h-5 i-carbon-star">
        </div>
        <span>Important</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>注意这几个绑定的【生产】和【预览】选项卡是不同步的，需要分别创建！</p>
    </div>
</div>
<p>然后重新部署即可。</p>
<h2 id="绑定自定义域名">绑定自定义域名</h2>
<p>这个是可选的，但是 CloudFlare Pages 的域名很容易访问不畅，而且也太长了，违背了 short 的初衷。</p>
<p>绑定域名的步骤略过。剩下的时间，各位老友自由发挥吧。</p>

      ]]></content:encoded></item><item><title>解决Swup导致的JavaScript加载失效问题</title><link>https://chlor.me/swup-modifying/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/swup-modifying/</guid><category>博客</category><category>折腾</category><description>本文记录了作者修复 Swup 下 JavaScript 加载问题的过程。作者发现页面功能如评论和代码复制无法正常加载，经过排查发现 Swup 仅替换页面的 HTML 内容，而未加载新页面的 JavaScript。作者随后找到了解决方案，使用 Swup 的 Script Plugin 来确保 JavaScript 被正确加载。最后，作者针对评论功能做了额外处理，确保 Twikoo 评论系统可以正常工作。虽然该方案还未完全完善，但已基本解决问题。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。本期又是前端小白的魔改历险记。</p>
<h2 id="前言">前言</h2>
<p>我目前使用的主题 Efímero 是我基于 <a href="https://github.com/kkbt0/Hugo-Landscape">Hugo Landscape</a> 的魔改版本。Landscape 使用 Swup 作为页面的过渡，平滑的效果深得我心。</p>
<p>但是在我的网站使用过程中遇到了一个很烦人的问题：有一些功能常常加载不出来，比方说说说页面、代码一键复制、评论等等。奇怪的是，刷新一次就好了。</p>
<p>之前我并没怎么在意这件事。但是由于今天太闲且强迫症作祟，我就想着修复一下。</p>
<h2 id="踩坑">踩坑</h2>
<p>我的切入点是我的说说页面 <code>whisper.html</code>。我相当肯定问题在 JavaScript 部分（毕竟 HTML 和 CSS 能有什么坏心思捏），然而凭借我有限的知识看了半天还是无果，AI 也不行。</p>
<p>我打开了控制台，发现在初次加载的时候，报出了错误：</p>
<pre><code class="language-bash">Hooks.ts:435 Error in hook 'page:view': ReferenceError: init is not defined
    at VM35:6:36
    at index.ts:37:2
    at new Promise (&lt;anonymous&gt;)
    at Hooks.ts:433:8
    at index.ts:37:31
    at Hooks.ts:435:26
    at t (Hooks.ts:438:6)

whisper/:1385 Uncaught ReferenceError: init is not defined
    at HTMLDocument.&lt;anonymous&gt; (whisper/:1385:101)
</code></pre>
<p>看起来有一个神秘的 <code>init</code> 没有定义。我相当肯定我的 <code>whisper</code> 中没有什么 <code>init</code>，但是问题都摆在眼前了，总不能摆烂（<del>还真能</del>）。</p>
<p>前往定义，在挖呀挖呀挖了半天后，终于发现了一个所谓的 <code>init</code>：</p>
<pre><code class="language-js">const swup = new Swup({
        plugins: [new SwupPreloadPlugin()]
    });
document.readyState === &quot;complete&quot; ? init() : document.addEventListener(&quot;DOMContentLoaded&quot;, ()=&gt;init()),
swup.hooks.on(&quot;page:view&quot;, ()=&gt;init())
</code></pre>
<p>嘶，好像有点熟，但是也就是有点熟，然后就没有然后了。</p>
<p>试着在项目里搜索这段代码，还真有，在 <code>baseof.html</code> 中。这看起来是创建了一个 JavaScript 的 <code>swup</code> 实例。把 <code>init</code> 去掉，发现不报错了，但是还是不行；随便写一个 <code>init</code>，发现还是没用。</p>
<p>中间经过了多少稀奇古怪的尝试我已经忘了。不过我是一点不慌，别问，问就是 Git 配享太庙。</p>
<h2 id="福至心灵">福至心灵</h2>
<p>一筹莫展之际，我又仔细翻了翻代码，发现了个正常到不能再正常的事情，就是 <code>document.addEventListener</code>。我不太了解 JavaScript，但是前几天写 Java+XML 的经验让我大致能猜出其意思。二者的绑定方式还有点像。</p>
<p>嗯？既然 <code>document.addEventListener</code> 是在页面加载完的时候进行，<strong>那如果页面没加载完呢？更进一步，如果根本没加载呢？</strong></p>
<p>听上去荒谬，但是我瞬间来精神了。Swup 能做到切换这么丝滑，难道是根本没加载新的页面，只是做了点替换？</p>
<p>说干就干，我在我的 HTML 顶端加了条测试语句：</p>
<pre><code class="language-html">&lt;script&gt;
    console.log(&quot;whisper.html&quot;);
&lt;/script&gt;
</code></pre>
<p>然后重启本地服务器，打开控制台……果然没打印！</p>
<p>破案了家人们，这个 Swup 根本没加载新的页面——至少是没加载新页面的 JavaScript。而刷新会强制加载这个页面，所以就好使了；而前面的 <code>baseof</code> 的代码，就是让 Swup 接管这些加载活动。</p>
<p>那下面就想办法解决好了。我翻了半天，在<a href="https://swup.js.org/getting-started/reloading-javascript/">这里</a>找到了解决方法（准确来说是被 issue 引过去的）。琢磨了一会儿，我决定采取省事的 Script Plugin。至于内存泄漏，算了先不管了。</p>
<pre><code class="language-html">&lt;script src=&quot;https://unpkg.com/@swup/scripts-plugin@2&quot;&gt;&lt;/script&gt;
{{/* ... */}}
&lt;script data-swup-ignore-script&gt;
    document.addEventListener('DOMContentLoaded', function() {
        const swup = new Swup({
            plugins: [
                new SwupPreloadPlugin(),
                new SwupScriptsPlugin()
            ]
        });
    });
&lt;/script&gt;
</code></pre>
<p>速度慢的话可以自己去找镜像。</p>
<h2 id="评论">评论</h2>
<p>其他部分都好了，就是这个评论还是不行。找了半天，发现是按钮本身绑定的 JavaScript 的事情。</p>
<p>首先把 Twikoo 的 CDN JavaScript 单独拎出来加载，然后再加一个钩子：</p>
<pre><code class="language-js">swup.hooks.on('page:view', () =&gt; {
    const loadCommentsBtn = document.getElementById('load-comments-btn');
    if (loadCommentsBtn) {
        loadCommentsBtn.addEventListener('click', function () {
            const container = document.getElementById('comments-container');
            if (container) {
                container.style.display = 'block'; // 显示评论容器
                this.style.display = 'none'; // 隐藏按钮
            }
        });
    }
});
</code></pre>
<p>目前这个方案虽然还不完善，但是已经可以用了。</p>
<h2 id="结语">结语</h2>
<p>本来打算明天在高铁上写的，但是太过激动，今天就写出来了。</p>
<p>明天大作业验收啦……祝我好运！</p>

      ]]></content:encoded></item><item><title>macOS配置GPG签名Git提交</title><link>https://chlor.me/macos-gpg-sign-git-commit/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/macos-gpg-sign-git-commit/</guid><category>Git</category><category>折腾</category><category>GPG</category><description>本文详细介绍了如何在macOS上使用GPG签名来验证提交者身份的过程。作者从GPG的历史和功能开始，讲述了其加密和签名的重要性，接着指导读者如何在Mac上安装和配置GPG，包括生成密钥对、在GitHub上设置GPG密钥，以及如何配置Git和VS Code以支持GPG签名。文章还提到了Obsidian Git的配置，并分享了一些解决常见问题的经验。通过这些步骤，用户可以确保他们的Git提交是经过验证的，增强了提交的安全性和可信度。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/macos-gpg-sign-git-commit-cover.webp" alt="macOS配置GPG签名Git提交" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>闲来无事水篇文章，记录一下我刚刚解决的一个心头大患。</p>
<h2 id="前言">前言</h2>
<p>在咱们看 GitHub 上的 commit 的时候，往往会看到这样的情景：</p>
<p><figure class="my-8">
    <img src="https://static.quail.ink/media/d2ng6hm25r.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>那边那个好看的绿色 badge 是怎么来的捏？咱们可以猜一下。Verified，经过验证的，那验证的是什么？自然是提交者的身份，标明这个提交是由仓库的作者亲笔所为，而不是由路边的哪个路人甲或者是不怀好意有 bear 来的攻击者提交的。</p>
<p>那怎么做这种「我是我」的证明呢？方法就是通过咱们今天要讲的 GPG signing。</p>
<h2 id="whats-gpg">What&rsquo;s GPG？</h2>
<p>以下内容来自 <a href="https://zh.wikipedia.org/wiki/GnuPG">Wikipedia</a>：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>GNU Privacy Guard（GnuPG 或 GPG）是一个密码学软件，用于加密、签名通信内容及管理非对称密码学的密钥。GnuPG 是自由软件，遵循 IETF 订定的 OpenPGP 技术标准设计，并与 PGP 保持兼容。</p>
</blockquote>
<p>嗯，好像懂了，又好像没懂，听君一席话，如听一席话。</p>
<p>简单来说吧。这个故事要从 1991 年开始讲起。那个时候有一个程序员大神，名叫Phil Zimmermann。PZ 这人呢，是个极其看重隐私的「偏执狂」（注：这个词没有贬义）。为了躲避烦人的监管，他自己写了一个名叫 PGP 的东西。PGP，全称是Pretty Good Privacy，是一个用来给 Email 和各种信息加密的东西。</p>
<p>这玩意有什么用呢？比方说，你给你的朋友写了一封邮件并且使用 GPG 进行了加密，内容是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>今天下午天气不错，要不一起去紫荆园吃个饭？听说三楼的酸菜鱼出了新的番茄锅底！</p>
</blockquote>
<p>有了加密，即使是你的邮件被截获了，截获者打开一看，由于没有「钥匙」，只能看到里面写的是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>玛卡，巴卡，阿卡，哇卡，米卡，玛卡，呣！ 玛卡， 巴卡，阿巴，雅卡，伊卡，阿卡，噢！ 哈姆，达姆，阿卡嗙，咿呀呦~ 玛卡，巴卡，阿卡，哇卡，米卡，玛卡，呣！</p>
</blockquote>
<p>监管者：？（<code>黑人问号.webp</code>）</p>
<p>但是你拥有「钥匙」的朋友，却能完整地读到你的邮件。这样就保证了隐私的安全。</p>
<p>那这个功能难道不能破解吗？理论上当然可以，但是难度基本相当于让你一粒一粒捡完现在撒哈拉沙漠的沙子。</p>
<p>听起来是个好东西，对吧？很可惜，PGP 是个商业软件。</p>
<p>这就有点坑爹了。所幸，万能的开源社区早就帮我们搓出来了一个完美的替代品，那就是 GNU Privacy Guard，简称 GNUPG 或者 GPG。这中间还有很多困难，但是已经被我们伟大的前辈们一一克服了。咱们这群后辈只要坐享其成就可以了。</p>
<p>GPG 的应用极其广泛，包括但是不限于邮件加密、文件完整性验证等。当然了，今天我们只讲 Git commit signing。</p>
<h2 id="安装-gpg">安装 GPG</h2>
<p>OK，废话讲完了，咱们正式开始配置 GPG。</p>
<p>首先我们需要安装 GPG，自然还是用万能的 Homebrew：</p>
<pre><code class="language-bash">brew update
brew install gpg
brew install pinentry-mac
</code></pre>
<p>（如果您连 Homebrew 都没安装，或者都不知道是啥，我合理怀疑您是否真的是 Mac 的持有者以及用得到 GPG Git 的人。）</p>
<p>安装完成之后，检测一下安装是否成功：</p>
<pre><code class="language-bash">gpg --version
# 别的命令也行
</code></pre>
<h2 id="修改配置文件">修改配置文件</h2>
<p>下面的内容实际上就是写入文件，大家大可以各显神通。</p>
<pre><code class="language-bash">echo &quot;pinentry-program $(brew --prefix)/bin/pinentry-mac&quot; &gt;&gt; ~/.gnupg/gpg-agent.conf
echo &quot;use-agent&quot; &gt;&gt; ~/.gnupg/gpg.conf
echo 'export GPG_TTY=$(tty)' &gt;&gt; ~/.zshrc # 如果你用的不是 Zsh，请根据你的终端修改
</code></pre>
<p>然后重启电脑。</p>
<h2 id="生成-gpg-密钥对">生成 GPG 密钥对</h2>
<p>GPG 的工作需要一对公私钥。重启之后，我们来生成我们所需的密钥。</p>
<p>键入命令：</p>
<pre><code class="language-bash">gpg --full-generate-key
</code></pre>
<p>会出现一些交互式命令行选项，大部分按照默认即可。姓名、邮箱和备注按照自己的情况填写（邮箱推荐填写自己用于 Git 提交、且在相关平台——如 GitHub 上绑定过的邮箱）。</p>
<p>注意！关键来了！下一步应该是输入密码，但是你应该看见的是一个<strong>类似这样的 GUI</strong>：</p>
<p><figure class="my-8">
    <img src="https://static.quail.ink/media/3869lueyn0.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>而不是一个命令行 UI！</p>
<p>密码随便写，记得一定要勾选「存储在钥匙串中」的选项！</p>
<p>生成密码后，我们键入：</p>
<pre><code class="language-bash">gpg --list-secret-keys --keyid-format LONG
</code></pre>
<p>然后应该会输出一串类似这样的东西：</p>
<pre><code class="language-bash">/Users/chlorine/.gnupg/pubring.kbx
----------------------------------
sec   ed25519/xxxxxxxxx 2024-07-23 [SC]
      yyyyyyyyyyyyyyyyyyyyyyy
uid                   [ 绝对 ] （你的相关信息）
ssb   cv25519/zzzzzzzzzzz 2024-07-23 [E]
</code></pre>
<p>把 <code>xxxxxxxxxx</code> 对应的那一串字符复制下来，这就是你的 Key。</p>
<p>然后键入：</p>
<pre><code class="language-bash">gpg --armor --export &lt;你的 Key，不带两边的尖角括号，下同&gt;
</code></pre>
<p>把输出的东西复制一下，注意，<code>-----BEGIN PGP PUBLIC KEY BLOCK-----</code> 和 end 的也要复制。</p>
<p>在<a href="https://github.com/settings/keys">这里</a>配置你的 GPG 密钥，名字随便起，把刚才那一堆粘进去就行。Gitee 和 Codeberg 同理。</p>
<h2 id="配置-git">配置 Git</h2>
<p>生成密钥后，我们略略配置一下 Git：</p>
<pre><code class="language-bash">git config --global commit.gpgsign true
git config --global user.signingkey &lt;你的 Key&gt;
git config --global gpg.program /opt/homebrew/bin/gpg
</code></pre>
<h2 id="配置-vs-code">配置 VS Code</h2>
<p>VS Code 内置了方便的 Git GUI，但是如果不合理配置，就无法对 Git commit 进行签名，从而出现各种奇奇怪怪的问题。</p>
<p>说来也简单，如果你严格地按照我们上面的步骤走的话，直接在设置中搜索 <code>git.enableCommitSigning</code> 并启用即可。</p>
<h2 id="obsidian-git">Obsidian Git</h2>
<p>不需要任何配置，直接用就行了。因为我们刚在 Git 里面配置了 GPG 程序的位置，应该不会出现找不到 GPG 的错误。</p>
<h2 id="结语">结语</h2>
<p>GPG 这个事我配了不知道多少次，经常出现 GPG failed to sign the data。我知道应该是在图形界面没法配置密码输入，但是不知道怎么解决，心很累。所幸是搞好了。作文以记之，</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://github.com/microsoft/vscode/wiki/Commit-Signing">https://github.com/microsoft/vscode/wiki/Commit-Signing</a></li>
<li><a href="https://github.com/Vinzent03/obsidian-git/issues/21">https://github.com/Vinzent03/obsidian-git/issues/21</a></li>
</ol>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（3）：执笔衔书</title><link>https://chlor.me/weekly-3/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-3/</guid><category>博客</category><category>周报</category><category>开源</category><category>日常</category><description>本文是作者周报的第三期，作者分享了他参与小学期课程的大作业开发新闻客户端的经历。他通过学习教程、魔改代码，克服了时间紧迫和自身知识短缺的困难，最终成功完成了作业。此外，作者还谈到了他的梦想是成立一个自己的开源基金会，并介绍了自己最近想学习的新的编程语言Rust以及他喜欢的美食烤冷面。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-3-cover.webp" alt="Ephemeralis-Weekly（3）：执笔衔书" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第三期，日期范围为公历 2024 年 7 月 15 日至 7 月 21 日。祝食用愉快。</p>
<h2 id="衔书">「衔书」</h2>
<p>这个标题听起来蛮有诗意的，但是实际过程没那么有诗意。</p>
<p>简单来说，我们的「小学期」课程——《程序设计训练》的大作业，要求是使用 Java 开发一个新闻客户端，要求实现新闻爬取、列表展示、详情页面、图片/视频展示、AI 摘要、历史记录、收藏功能、上拉获取、下拉刷新、本地缓存和搜索等功能。</p>
<p>听上去有那么亿点可怕，更何况我们从结课到交作业只有十天左右的时间，而课程本身也只有十天。十天，要讲明白最受欢迎的企业级编程语言之一，谈何容易？就算是老师尽力输出，也只能带我们浮光掠影地看个大概。</p>
<p>更何况，我是个上课从来不听的摆子人。</p>
<hr>
<p>一开始我基本上毫无头绪，有一种即将入土为安的美感。我甚至连 Android Studio 都不会用。所幸，我的一位同学告诉我：可以去 B 站上找相关的教程（B 站真的是个学习网站呐 :D）。然后我就去找了，嘿，您猜怎么着？真找到了，而且是手把手的教程！（这里感谢一下教程的作者 <a href="https://space.bilibili.com/492354901">@浩宇软件开发</a>，如果没有他的教程我必 4 无疑）。</p>
<p>事实证明：面对一门你完全不熟悉的语言的时候，照葫芦画瓢加魔改永远是最好的方法。就像我们写 C++ 代码的时候：</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;

int main()
{
    cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>刚开始谁又能说清楚什么是预处理指令、命名空间、流运算符？还不是先「当成八股文写下来」（来自我的程序设计基础课程老师），然后再一点点理解？</p>
<p>继续。我照着教程的代码一点点敲下来，中间不断地魔改，来适应作业的要求和我自己的审美。随着作业进程的推进，我写得越发得心应手，常常一天更新四五个功能，很多部分实际上已经完全是自己在独立开发了。用我报告的话来说，就是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>从看着什么都没有的用户界面直龇牙，到开始细致地考虑美工和设计；从什么都需要翻 CheatSheet、查教程、问 AI，到能为别人解惑答疑；从「做出来就行」到「做个还行的就行」到「必须得做个好的」</p>
</blockquote>
<p>最终，我花了六天左右的时间，完成了这份看起来极其恐怖的作业，以及用心到让人无法直视的报告（上万字，导出为 PDF 整整一百页，这个长度在整个 Java 课程历史上应该可以空前绝后了）。我将最终的产品取名为「衔书」（Xianshu 或 Tsira News）。</p>
<p>不过其实我最想说的还不是产品开发的过程本身，而是我这几天的状态。</p>
<p>刚开始时，为了学习效率，我尝试去三教自习。找了一圈没找到空教室，只好随便找了个人少的地方。此后几天，如果没有特殊情况，我一直都在这个位置。</p>
<p>架好电脑，戴上耳机，平心静气地不停地敲着。一个功能，一个功能，又是一个功能。我就这么一点点解决遇到的问题，兵来将挡，水来土掩，顺滑得行云流水，道法自然。</p>
<p>这种美好的学习状态，上次还是在我高中的时候。我感觉那个工作效率爆表的我又回来了。</p>
<p>口说无凭。在这六天的时间里，我写完了包含几千行（估计的）代码的 Android 应用，完成了数万字的报告，还顺带着帮班级的思政实践写好几千字的预调研报告，还顺带着帮几个同学答了下疑。</p>
<p>有人可能会将这看成「DDL 是第一生产力」，但是就我个人的感觉来看，这就是这几天的状态的优越。</p>
<p>总而言之，这几天是卷得神清气爽，果然我的学习血脉还是在的~</p>
<h2 id="i-have-a-dream">I Have A Dream</h2>
<p>「I have a dream」，我有一个梦想，简单的英语句子，因美国黑人平权运动先驱马丁·路德·金（Martin Luther King Jr.）于 1963 年在华盛顿特区林肯纪念堂前发表的演讲而举世闻名。</p>
<p>金是一位杰出的社会活动家，他的梦想就是实现社会的正义与平等。我没有如此的社会责任、胸怀与热忱，但是我也有一个梦想：成立一个自己的开源基金会。</p>
<p>容我多说几句吧。</p>
<p>我一直是一个典型的「没什么理想」的人，具体来说，我没有什么明确的目标和方向。就连当初选择计金，也可以算是一个「一时兴起」的决定。</p>
<p>但是我也做过梦，一个听起来挺中二的梦——「追逐人类心智的荣耀」。</p>
<p>我对科研的兴趣应当起源于我初三和高一的时候。我们初三开始学化学，至少在考试方面，我展现出了相当出色的化学天赋，以至于初三后期老师开始明令禁止我听课（她认为这样是在浪费我的时间 LOL）。高中时期，我的班主任就是化学老师。我曾经在刚开学的时候——他刚刚注意到我的时候对他说，我想学化学。他说，好，那就报北大的化学系（准确来说应该是「化学与分子工程学院」，我对北大许久的好感就是从这一刻开始的。当然，那是另一个故事了）。</p>
<p>于是乎我有了自己的第一个梦——化学，做最顶尖的化学家。我当时不在乎什么冷门热门，只是感觉自己喜欢（毕竟，清北的学生——我当时多少是带点自傲的，觉得自己能在三年后稳拿清北——还能饿死不成？多天真的想法啊）。有喜欢的事情，就是幸福啊。</p>
<p>请允许我省略中间的故事。我的梦几度变易，从化学，到物理，到数学，到统计。唯一没变的，就是我那份中二的科学家的心。</p>
<p>后来，我的中二又有了新的高度。我不再满足于「做科研就完事了」，我希望我能「追逐人类心智的荣耀」——用自己的努力，为人类知识的边界开疆拓土，将有限的一生奉献于无限的探索中。</p>
<p>听上去……确实挺好的。</p>
<p>然后这么梦在高考后醒了。</p>
<p>不是说我发挥失常，我考得还不错，已经可以在清北随便选专业了。我曾经一度想报考我梦想的地方——北大元培，但是最终我去了清华电子，后来又去了计金，读了两个我曾经最不喜欢的专业。</p>
<p>个中曲折，我也不希望在此细说了。总而言之，我收获了许多，唯独把我曾经中二而热烈的梦想丢掉了。</p>
<p>一件事如果不喜欢，又没有长久的目的，是很难做下去的。我在计金的学业并不突出，可能也有这个原因（<del>不要把自己的弱鸡归因于其他</del>）。</p>
<p>然而，作为一个从没接触过计算机的小镇做题家，在我高强度（迫真）写了一年代码后，我反而感觉这门学科还是蛮有意思的。以及在不断的不务正业中，我接触到了另一个奇妙的世界——开源宇宙。</p>
<p>开源宇宙确实是个奇妙的地方。各路精英大佬各显神通，做出令人惊艳的产品，然后把源代码交给社区。而开源社区的精神，也是极为具有感染性的：自由，开放，协作，探索，行动。</p>
<p>恍惚之间，我感觉当年离我而去的梦，又以另一种形式回来了。</p>
<p>一个是贡献理论知识，一个是贡献代码和产品，都是崇高的事业，值得人奉献一生的事业。</p>
<p>于是，我想着，将来是否有这个机会，成立一个自己的开源基金会？</p>
<p>这个设想基本和成为世界级科学家一个难度，而且我对开源团体的运作机制完全不了解。可能我更想表达的是一个社团，一群志同道合的人合作开发令人惊艳的产品，依靠社区的支持完成运作和对成员生活的补益。</p>
<p>但是我就是这么想了，甚至还给「基金会」起了一个名字，叫「青若」（Tsira）。这个词汇没什么特别的含义，就是我一拍脑袋想出来的。硬要说，就是致敬我的母校清华大学（Tsinghua University）。</p>
<p>这个新闻客户端，也是第一个还算能叫「产品」的产品。我为它冠上了 Tsira 的词头，并且在签名证书的单位上郑重地写下：Tsira Open Source Foundation。</p>
<p>我不知道这是不是又会成为我无数个胎死腹中的梦想之一，咱们暂且先看着吧。</p>
<h2 id="学门新语言">学门新语言？</h2>
<p>最近相对比较闲，就想着学门现代化的语言，来满足自己开（zhē）发（teng）的欲望。环顾一圈，现代化，高性能，还能写美观的跨平台应用，那首选应该就是开源世界的新宠——Rust 了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/weekly-3.avif" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>于是我准备试一试 Rust。然后我就疯了。</p>
<p>都说 Rust 在所有权、生命周期这块难，但是从一开始我就觉得，Rust 的语法怎么看怎么别扭……</p>
<p>都变量了，为什么还要显式声明可变？为什么打印是宏？这导入用的什么格式？为什么变量可以自动类型推导常量就不行？为什么……</p>
<p>行吧，Rust 有自己的美，但是目前我是理解不了一点。</p>
<p>所以现在还剩下 Swift（需要烦人的 Xcode）、Go、Dart、Kotlin 等这些。要是各位知道什么语法和 C++ 相似（但是更简单），同时还比较优雅的现代语言，可以给我推荐一下。</p>
<h2 id="烤冷面">烤冷面</h2>
<p>作为辽宁人，烤冷面属于一个我不常吃但是挺喜欢的美食。来了北京之后很少吃，一般都是去 C 楼地下买。后来尊敬的崔博士（我在协和读临床本博八年的同学）带我去桃李园吃了一次，只能说过得去，但是胜在便宜实惠。</p>
<p>最近我在饿<del>似</del>了么发现了一家烤冷面，做得相当好吃，于是这周点了好几份。虽说贵了点，但是人家好吃啊~</p>

      ]]></content:encoded></item><item><title>新域名（4）</title><link>https://chlor.me/new-domain-4/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/new-domain-4/</guid><category>域名</category><category>折腾</category><description>本文介绍了作者受到朋友文章的启发购买新域名的经历。作者对一个特殊的数字进行了一些变换得到前缀在Spaceship平台上寻找并选择了这个价格合适的域名。购买时遇到了 PayPal 付款失败的问题，但通过分步购买解决了。作者计划将域名用于个人服务，并已将其配置在 CloudFlare 上。</description><content:encoded><![CDATA[
        <p>没错，我又又买了个域名（</p>
<p>起因是看到<a href="https://blog.sdnie.fun/archives/domian1.html">楼长老友的文章</a>，发现似乎有低价域名可以薅羊毛。</p>
<p>数字位数的 <code>.xyz</code> 域名我很早就听过了，虽然看起来挺……垃圾的，但是如果是自己堆服务就无所谓了。之前我堆服务用的是 <code>chlorinechan.top</code>，但是这个域名已经被我备案了（备案名称：小氯酱的活页本 =w=）。都有旗籍了，再这么乱堆服务确实不大好。</p>
<p>去 Spaceship 上看了下。不同的数字前缀价格不一样，有的是超低价，有的是普通价格。试了几次后，我选定了 <code>2776655.xyz</code>。</p>
<p>为什么是这个数字呢？</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240712133241.webp" alt="（逃）" title="（逃）" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        （逃）
    </figcaption>
    
</figure></p>
<p>买的时候出了点问题，使用 PayPal 付款失败了。后来经过尝试，先买一年再追加就可以了。</p>
<p>继续挂到互联网活菩萨 CloudFlare 上，然后堆服务就完事。</p>

      ]]></content:encoded></item><item><title>Twikoo更新惊魂</title><link>https://chlor.me/twikoo-update-shock/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/twikoo-update-shock/</guid><category>Twikoo</category><description>本文介绍了Twikoo评论系统更新导致评论丢失，作者尝试重新部署并成功恢复评论，但未备份数据。作者决定重新创建数据库并导入新的评论，并增加多数据库备份。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/twikoo-update-shock-cover.webp" alt="Twikoo更新惊魂" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>今天讲一个挺抽象的事，就是关于 Twikoo 评论的更新。请做好血压飙升的准备。</p>
<h2 id="前言">前言</h2>
<p>Twikoo 这个评论系统我从建站开始就开始用，美观，功能强大，（大部分时候）省心，而且开发者 <a href="https://www.imaegoo.com/">iMaeGoo 大佬</a>也一直在尽心尽力地维护。这大半年下来，也攒了一百多条评论了，也是我这个小破站的珍贵回忆呐。</p>
<p>我的 Twikoo 有两个云函数，一个在 Vercel 上，一个在 Netlify 上。本来用的是前一个，后来秉持着服务都堆到副域名的原则换成了后一个。反正数据库都是那一个，换个域名有什么大不了的。</p>
<p><em>记住这句话（咬牙切齿）</em></p>
<h2 id="左思">左思</h2>
<p><em>注：这个标题是谐音</em></p>
<p>今天看到 Twikoo 更新了，于是打算更新一下。只不过 Twikoo Netlify 的更新实在是有点抽象，不管是把 <code>package.json</code> 的版本号改成 <code>latest</code> 还是 <code>1.6.38</code> 都不好使。我甚至顺手去提了个 issue。</p>
<p>然后，我就想到了一个让我想打自己的主意：那我重新部署不就行了？</p>
<p>火速删除项目，导入仓库重新部署……</p>
<p>我记得 Twikoo 得有个环境变量 <code>MONGODB_URI</code> 来着？应该填多少呢？</p>
<p>坏了，我不知道。刚才删除得太着急，忘记复制了。我记得 Vercel 的那个似乎和这个不是一个数据库？应该存的是旧版的数据，没有用。</p>
<p>这应该不是什么大逝，去 MongoDB 重新创建一个 user 就完事。期间顺带着喜提几个 function crash，经过检测是 MongoDB 的 Network Access 没配置泛播可见。</p>
<p>然后 redeploy，云函数运行正常，美滋滋。</p>
<p>喜滋滋地去网站上看一圈……这怎么需要注册？重设密码了？</p>
<p>行吧，重设就重设。点进去……</p>
<p><strong>不是，我评论呢？怎么全没了？！</strong></p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-pom_shocked.webp" alt="震惊.webp" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h2 id="抢救">抢救</h2>
<p>这属实是吓了我一跳。这怎么换个字符串啥也没有了？</p>
<p>注：后来看到了 Twikoo 官网的备注：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>连接字符串包含了连接到 MongoDB 数据库的所有信息，一旦泄露会导致评论被任何人添加、修改、删除，并有可能获取你的 SMTP、图床 token 等信息。请妥善记录这一字符串，之后需要填入到 Twikoo 的部署平台里。</p>
</blockquote>
<p>好像有点合理，但是又不合理……</p>
<p>事不宜迟，赶紧想招。我没有 <code>twikoo_comment.json</code> 的备份，唯一可能的方式就是通过 MongoDB 直接导出。我有导出 MongoDB 数据的经验，但是现在 Windows 备用机不在手中，只能硬着头皮用 MacBook 导出。</p>
<p>看一下 MongoDB 的数据量，看起来很正常，一百多兆呢（我真傻，真的。Twikoo 的数据基本都是文本，怎么可能有这么大的数据量？后来我看了新的 MongoDB 后端面板，我这些评论加在一起只有 156kb，那也就是说我需要十几万条评论才可能达到这个量……这都是后话了）。这也使我成功地忽略了侧边栏显示的那一堆奇怪的 collection。</p>
<p>然后，自然是没有然后啊。MongoDB Compass 啥也导不出来，MongoDB Atlas CLI 倒是一次成功了，但是导出的是空的（我真傻，真的，我早该想到的，前端面板都看不见，MongoDB 怎么可能有有效数据？）。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>事已至此，先吃席吧。——我的微积分助教 PWK 学长</p>
</blockquote>
<p>然后我就摆烂了。算了，丢了就丢了吧。大不了从头再来，还可以趁机换个评论系统（此处容我吐槽一下，Twikoo 的加载慢得不像人）。</p>
<p>然后我又回到了我忠诚的本地环境。想着反正都丢了，不如试着把 envID 换成原本那个域名，里面还留着一些评论，还能损失最小化。反正情况也不可能再糟糕了。</p>
<p><code>make</code> 构建，在浏览器里面预览……然后，奇迹发生了：<strong>我的评论全回来了</strong>。</p>
<p>原来，事实上，我的两个云函数共享着同一份数据库。言语已经不能形容我此刻的心情了。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>多中心备份配享太庙！</p>
</blockquote>
<h2 id="后续">后续</h2>
<p>其实到这里故事已经可以结束了，我只需要把 Vercel 云函数的环境变量扒下来就完事。但是我打算再走一步。</p>
<p>我重新开了一个 project，创建了一个新的数据库。这次的字符串我拷贝了下来，存到了我的 <code>tokens.csv</code> 里面。然后部署 Netlify 云函数（顺带着又喜提几个 function crash）。然后打开前端面板，导入我新下载的 JSON。</p>
<p>这一方面算是多数据库备份，另一方面，我希望调几个数据，而 Twikoo 的前端导入功能有时候不太好使，不能覆盖。所以干脆导入一个白板里面。</p>
<p>由于 Twikoo 的面板配置存在连接字符串里面，因此我需要再配一遍。这倒不是麻烦事。期间我还注册了新的机器人邮箱 <code>yoghurtlee_bot@126.com</code>，以后大家就可以接到这个小助手的邮件通知啦（我本来想用 outlook，奈何实在是不给力，一直 SMTP error，一点招没有）。</p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（2）：生日快乐</title><link>https://chlor.me/weekly-2/</link><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-2/</guid><category>周报</category><description>本文是作者周报的第二期，这是非常值得记录的一周，作者过了自己的19岁生日，并分享了在农历生日和公历生日的庆祝活动。他还提到博客迎来了200天的生日，给博客接入了Quail作为Newsletter，并谈到备案和其他一些想法。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-2-cover.webp" alt="Ephemeralis-Weekly（2）：生日快乐" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>本文为园子周报——Ephemeralis Weekly（浮生散记）的第二期，日期范围为公历 2024 年 7 月 1 日至 7 月 7 日。</p>
<p>这是非常值得记录的一周，祝食用愉快。</p>
<h2 id="生日">生日</h2>
<p>本周的标题叫作「生日快乐」，很大一部分原因是因为，这周我过了我的 19 岁生日。</p>
<p>我的农历生日是五月廿九，今年的 7 月 4 日；公历生日是 7 月 5 日。很巧。</p>
<h3 id="农历生日">农历生日</h3>
<p>按照我家乡的风俗，我喜欢过农历生日。因此，妈妈为我订了一个生日蛋糕，刚好在我下课的时候送来。我送了帮我保管的宿管阿姨一块，留了一块给同宿舍的学长，剩下的，我吃了好几顿。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/weekly-2-1.webp" alt="生日蛋糕" title="拍照技术不好，见谅" 
        class="mx-auto rounded-lg block" loading="lazy" width="421"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        拍照技术不好，见谅
    </figcaption>
    
</figure></p>
<p>宿舍不允许用明火，我也没有打火机和火柴，因此我只是把蜡烛插上了蛋糕，没有吹，默默地许了个愿望。生日帽有点短，系不上，被我卡在眼镜下勉强固定住。</p>
<p>我在空空荡荡的宿舍中吃了一大块蛋糕。</p>
<h3 id="公历">公历</h3>
<p>在旁人眼中，这才是我的生日。</p>
<p>按照计金的传统，每位同学都会有一个生日推。我选了我个人认为最好看的照片，发给了宣委。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/weekly-2-2.webp" alt="生日推" title="为了防止被开盒，还是打码吧（）虽然用处不大" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        为了防止被开盒，还是打码吧（）虽然用处不大
    </figcaption>
    
</figure></p>
<p>许多师长、同学和朋友祝我生日快乐。</p>
<p>正巧，我的朋友来清华找我玩，于是说什么也要给我再过一次生日。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/weekly-2-3.webp" alt="朋友们的蛋糕" title="蛋糕有些变形了" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        蛋糕有些变形了
    </figcaption>
    
</figure></p>
<p>谢谢我的朋友们，让我过了一个有人陪的生日。</p>
<h3 id="一点碎碎念">一点碎碎念</h3>
<p>在我看来，「生日」和平常的一天，实际上没有什么区别，其所有的特别之处，其实都在于「别人知道今天是我的生日，所以他们会觉得今天特别」。</p>
<p>这实际上是一种外向的认知，将自己的认知依托于别人。一般来说我并不完全赞成这种认知方式，但是由于这次并没有影响到我的 routine，同时朋友和家人的祝福也给我带来了很高的情感收获，所以似乎也不错。</p>
<p>过生日的那个我，和现在在这里不知所云的我，在精神层面应当不是一个我吧。</p>
<h2 id="博客-200-天">博客 200 天</h2>
<p>没错，这周不仅是我的生日，也是博客的 200 天「生日」啊。</p>
<p>一般来说，百天好像会很隆重地庆祝，但是 200 天……我没听过。</p>
<p>反正也是个整数就是了呢。</p>
<h2 id="故人来">故人来</h2>
<p>如上文所述，我高中时代的一位好兄弟来了北京，希望逛一逛清华。</p>
<p>但是平心而论，我这个导游当得极其不称职。没有提前做什么规划，去了许多地方都发现没有开门（例如校史馆），招待也算不上很热情，甚至有几次还没能成功抢单请客。</p>
<h2 id="备案">备案</h2>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>打今儿个起，咱也有了旗籍了！</p>
</blockquote>
<p>兜兜转转，备案终于是批下来了。实际上也没用几天，办事效率还是可以的。毕竟我这就是一个个人网站，遵纪守法，态度良好，没有不通过的理由不是（Doge）。</p>
<p>据说好多博主不希望备案，是害怕实名信息一查，被人爆了。我还好。</p>
<p>兴高采烈地用了一下 CDN，但是发现问题有点多，罢了，先放着。</p>
<p>ICP 备案之后还有公安备案。为了方便我选的非交互式的，看看后期能不能转交互式，或者直接不管不顾地评论（逃）。</p>
<p>下面准备备案一下我的副域名兼服务域名 <a href="https://chlorinechan.top">https://chlorinechan.top</a>，方便后续提供各种服务。没错，备案备上瘾了。</p>
<h2 id="quail">Quail</h2>
<p>最近给博客接入了 Quail 作为 Newsletter，详情见 <a href="/hello-quail/">Hello，Quail</a>。</p>
<h2 id="其他">其他</h2>
<p>口口声声说着「这是值得记录的一周」，但是在笔上却是持之以恒地摆烂呢。</p>
<ul>
<li>想画一些意识形态的拟人，可惜手残，画不了一点，只能口嗨。</li>
<li>对开源基金会的运作有一点兴趣。不知道我这个菜鸡有没有机会成立一个真正的开源开发组织呢？</li>
<li>Windows 11 娘好可爱！&gt;w&lt;</li>
<li>当你选择遵循版权法时，生活就会变得艰难许多。</li>
</ul>

      ]]></content:encoded></item><item><title>Hello，Quail</title><link>https://chlor.me/hello-quail/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-quail/</guid><category>Newsletter</category><category>Quail</category><category>博客</category><category>周报</category><description>Quail是一个免费且对大陆友好的Newsletter服务，帮助作者与读者保持联系并筹集资金。它支持多种推送方式，具有优秀的编辑器和后台，并计划支持更多功能。作者对Quail表示满意，并将在Quail上发布文章。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-quail-cover.webp" alt="Hello，Quail" />
        </figure>
        

<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>《期末考试后的报复式更新》</p>
</blockquote>
<p>芜湖，各位老友们好啊，我是 Chlorine。</p>
<p>有眼尖的老友应该已经发现了，在侧边栏的社交图标中，多出了一个订阅的图标……</p>
<p>没错，万众瞩目的 Newsletter 服务，它来力（喜）</p>
<h2 id="什么是-newsletter">什么是 Newsletter？</h2>
<p>伟大的数学家柯西（Cauchy）曾指出，在研究积分或原函数的各种性质以前，应先证明它们的存在。</p>
<p>在我们讨论哪家 Newsletter 服务更好时，我们也应该先明确，什么是 Newsletter。</p>
<h3 id="定义">定义</h3>
<p>简单来说，Newsletter（新闻订阅/电子报）就是通过电子邮件形式推送新闻、文章等内容。对于个人博客来说，就是通过邮件，向你的订阅者们推送你的更新文章。这种推送可以是定时的（例如每一周推送本周文章合集，或者推送周报），也可以是不定时的（例如每更新一次都推送，以及不推荐的想起来就推一次）。</p>
<h3 id="好处">好处</h3>
<p>Newsletter 的好处是很多的，以下内容使用 Claude 3.5 概括：</p>
<p>在个人博客中配置newsletter（电子通讯）有许多好处。以下是一些主要优势：</p>
<ol>
<li>
<p>建立直接联系：</p>
<ul>
<li>与读者建立直接的沟通渠道</li>
<li>增强与受众的互动和联系</li>
</ul>
</li>
<li>
<p>提高访问量：</p>
<ul>
<li>定期提醒订阅者访问你的博客</li>
<li>分享新内容，吸引读者重复访问</li>
</ul>
</li>
<li>
<p>增加内容曝光：</p>
<ul>
<li>将博客内容直接发送到订阅者的收件箱</li>
<li>扩大内容的传播范围</li>
</ul>
</li>
<li>
<p>培养忠实读者：</p>
<ul>
<li>通过定期沟通建立长期关系</li>
<li>提供独家或额外内容，增加订阅者的价值感</li>
</ul>
</li>
<li>
<p>收集受众数据：</p>
<ul>
<li>了解订阅者的兴趣和行为</li>
<li>通过分析数据改进内容策略</li>
</ul>
</li>
<li>
<p>潜在的收入来源：</p>
<ul>
<li>可以通过newsletter投放广告</li>
<li>提供付费订阅选项</li>
</ul>
</li>
<li>
<p>提高品牌认知度：</p>
<ul>
<li>定期出现在订阅者的收件箱中，增加品牌曝光</li>
<li>建立个人或博客的专业形象</li>
</ul>
</li>
<li>
<p>分享额外内容：</p>
<ul>
<li>发布博客文章以外的独家内容</li>
<li>分享个人见解、行业动态等</li>
</ul>
</li>
<li>
<p>引导流量到其他平台：</p>
<ul>
<li>推广社交媒体账号</li>
<li>宣传新项目或产品</li>
</ul>
</li>
<li>
<p>获取反馈：</p>
</li>
</ol>
<ul>
<li>直接从订阅者那里获得意见和建议</li>
<li>了解读者需求，改进内容质量</li>
</ul>
<ol start="11">
<li>SEO优势：</li>
</ol>
<ul>
<li>增加网站的回访率，可能对搜索引擎排名有积极影响</li>
</ul>
<ol start="12">
<li>建立社区：</li>
</ol>
<ul>
<li>通过newsletter培养一个围绕你的博客的社区</li>
<li>增强读者之间的联系和互动</li>
</ul>
<p>通过配置newsletter，你可以更好地管理和发展你的博客受众，提高参与度，并可能为未来的项目或机会打下基础。</p>
<p>其实呢，在我看来，（以我的地位看）最主要的好处就是三个：<strong>让读者更方便，让作者更认真，让双方更有感觉</strong>。</p>
<h2 id="曾经考虑过">曾经考虑过？</h2>
<p>像 WordPress、Ghost 这样的动态博客大部分有自己的 Newsletter 服务，但是像 Hugo 这样的静态博客就没这个福气了。</p>
<h3 id="mailchimp">Mailchimp</h3>
<p>chimp 是黑猩猩的意思，Mailchimp 的 logo 也是猩猩，不知道意思是不是「猩猩都会用」。</p>
<p>Mailchimp 是 NotionNext <a href="https://docs.tangly1024.com/article/notion-next-mailchimp">官方推荐</a>的订阅服务，也是目前为止应用最广泛的邮件营销服务之一。不过，由于我当初没有配置成功（因为当初没有订阅者。我真傻，真的，我单知道订阅列表是空的时候需要等读者订阅，我不知道可以自己订阅自己）让我对这个平台印象不是太好，再加上这个平台的免费额度是越来越低，我直接放弃了。</p>
<h3 id="tinyletter">Tinyletter</h3>
<p>我第一个接触的静态博客—— <a href="https://lillianwho.com/">夜猫日记</a>采用的订阅服务，是 Mailchimp 家的。完全免费，大陆可以访问，可惜……没了。</p>
<h3 id="substack">Substack</h3>


<div class="my-6 rounded-lg border-l-4 p-4 border-purple-500 bg-purple-50/50 dark:bg-purple-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-purple-700 dark:text-purple-300">
        <div class="w-5 h-5 i-carbon-star">
        </div>
        <span>Important</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>注意，从下面开始，就是另外一条赛道了。</p>
    </div>
</div>
<p>Substack 实际上<strong>并非是邮件营销平台，而是一个类似微信公众号的创作平台</strong>。这个服务是免费的，只有在你盈利（如付费订阅）的时候才收费。只不过，Substack 在大陆的访问并不顺畅，而且当初我也并不是很想考虑这种平台式服务，所以，过。</p>
<h3 id="revue">Revue</h3>
<p>仅仅是在<a href="https://irithys.com/blog-newsletter/">这里</a>听过名字。Twitter 家的，应该在大陆访问也不顺畅。</p>
<h3 id="竹白">竹白</h3>
<p>看名字就知道，是一个国内适配的平台。在国内的 Newsletter 中名声不小，不过听说并不是很好用（注：只是听说！各有所爱，请不要抬杠 qaq）。</p>
<h3 id="listmonk">Listmonk</h3>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>万物皆可开源。——小氯酱</p>
</blockquote>
<p>没错，一个 Newsletter 服务，自托管，免费，开源。</p>
<p>听上去很好，不是吗？</p>
<p>但是我对着我那个不知道发什么癫部署什么都 502 的虚拟机的时候，我就戴高（乐不出来）了。</p>
<p>至于部署到 Railway 这类平台？算了吧。就那么点免费额度，还不知道什么时候就碰线了。</p>
<h3 id="自己写">自己写</h3>
<p>没错，在刚开始开发 Hugo Theme Efímero 的时候，我的第一想法真的就是自己写一个。</p>
<p>我当时的想法是：GitHub Actions 可以执行自动化任务，那为什么不让其读取新的文章，根据特定模板生成邮件，然后发出去？</p>
<p>想法一点问题没有，Python 和其他语言也早就有相应的邮件库了（我甚至实验成功了）。</p>
<p>问题是：<strong>你有这本事吗？</strong></p>
<p>答案很显然：没有。于是，我遗憾地放弃了。如果有大佬能写出来，请一定要告诉我一声。</p>
<h2 id="quail">Quail</h2>
<p>好了，啰里八唆这么一堆，终于到了我们今天的主角了——<strong><a href="https://quail.ink/">Quail</a></strong>。</p>
<p>什么是 Quail？援引官网的 First Line：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>建立一个会员社区，与你的追随者保持连接，为你的创作筹集资金。</p>
</blockquote>
<p>简单来说，和 Substack 有点像，但是对大陆友好，且对 Obsidian 兼容。</p>
<p>Quail 的优点如下：</p>
<ul>
<li>Chinese-mainland-friendly</li>
<li>免费，仅在有付费订阅时收费</li>
<li>支持电子邮件之外的推送方式（目前仅支持 Telegram 和 Discord，计划支持 LINE、WhatsApp、Slack 和微信等）</li>
<li>完善的 Markdown 支持</li>
<li>优秀的编辑器和后台</li>
<li>Obsidian native support（通过 Quail 插件）</li>
<li>数据分析</li>
<li>Atom feed</li>
<li>支持去中心化代币支付</li>
<li>数据导入和导出</li>
<li>简单易用</li>
<li>开源</li>
<li>……</li>
</ul>
<p>缺点：反正我目前没发现，每天只能推送三篇文章算吗？</p>
<p><del>小声：什么肝帝一天更新这么多啊</del></p>
<p>当然，Quail 目前还在开发中，一些功能还不完善，例如文档汉化不完全（应该是为了推广所以优先国际化了？），有一些文档中提到的功能（例如自定义邮件格式，订阅商黑名单等）都没找到。这也算是缺点吧。</p>
<h2 id="流程">流程</h2>
<h3 id="注册-quail-并创建频道">注册 Quail 并创建频道</h3>
<p>略，太简单了。</p>
<h3 id="生成-api">生成 API</h3>
<p>在<a href="https://quail.ink/dashboard/profile/apikeys">这里</a>创建就行。记好，下面要用。</p>
<h3 id="安装-obsidian-quail">安装 Obsidian Quail</h3>
<p>在 Obsidian 插件市场搜索 Quail 安装即可。这个是作者<a href="https://blog.lyric.im/">歌词经理</a>分支出来的插件，放心安装。无法访问 Obsidian 的老友可以借助 PKMer。</p>
<p>安装启用后在插件设置界面填写自己的 API 密钥和 List ID 即可。</p>
<h3 id="开写">开写</h3>
<p>然后，拿出你最爱的 Obsidian，写就可以了。Quail 贴心地提供了 AI 摘要功能。不过尴尬的是，我习惯在 <code>summary</code> 字段写一些俏皮话，<code>description</code> 写正经的摘要（用来 SEO），不知道怎么处理。</p>
<p><a href="https://docs.quail.ink/zh/">这里</a>是 Quail 的官方文档，有问题可以查一查。</p>
<h3 id="efímero-主题适配">Efímero 主题适配</h3>
<p>我本来想写一个漂亮的弹出式订阅窗口，可惜没那能耐，只能选一个最简陋的方式了。</p>
<p>直接在 <code>hugo.toml</code> 里加入配置：</p>
<pre><code class="language-toml">[[params.social]]
    name = &quot;Newsletter&quot;
    url = &quot;https://quail.ink/yoghurtlee&quot;
    icon = &quot;i-mdi-email-newsletter&quot;
    enable = true
</code></pre>
<p>完事。就是吧……有那么亿点点不太显眼……</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/EMJ-lemmeexcuse.webp" alt="镜座：你听我狡辩.webp" title="镜座：你听我狡辩.webp" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        镜座：你听我狡辩.webp
    </figcaption>
    
</figure></p>
<h2 id="总结">总结</h2>
<p>总体而言 Quail 还是很令我满意的，以后我的文章也会在 Quail 更新一份，兼具 Newsletter 和备份平台的作用。</p>
<p>最后，再放下我的订阅链接~</p>
<hr>
<p><em>下面的文字是在我用 Quail 发布后添加的</em></p>
<p>Quail 的发布很省心，直接 publish 就行。不过不知道为什么没能 deliver，有可能是因为列表是空的。</p>
<p>老友们快来订阅啊 qaq</p>
<p>总体而言 Quail 还是蛮不错的，甚至可以直接当博客用。</p>
<p>以及，冷知识：Quail 的本意是鹌鹑 🤣</p>

      ]]></content:encoded></item><item><title>Hugo博客迁移日志（4）</title><link>https://chlor.me/migrating-to-hugo-4/</link><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/migrating-to-hugo-4/</guid><category>Hugo</category><category>博客</category><category>Efímero</category><category>折腾</category><description>本文详细介绍了Hugo主题定制过程中的四个主要组件：公告、目录、简历和糖果雨特效。通过具体的代码示例和配置方法，文章指导读者如何实现这些组件的添加和功能扩展。包括了HTML模板的编辑、TOML配置文件的编写、CSS样式的调整以及JavaScript特效的实现。适合希望深入了解Hugo主题开发和自定义功能的读者。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/migrating-to-hugo-4-cover.webp" alt="Hugo博客迁移日志（4）" />
        </figure>
        <p>芜湖，各位老友们好啊，我是 Chlorine。接着上一回，继续为您说。</p>
<h2 id="公告组件">公告组件</h2>
<p>下面的目标是为主题添加侧边栏组件。经过观察，这部分代码位于 <code>主题/layouts/partials/sidebar</code> 和 <code>主题/layouts/partials/sidebar.html</code> 中。不过使用循环来简化代码似乎有那么亿点点麻烦，所以还是先不管可扩展性，直接硬上吧。</p>
<p>在 <code>sidebar</code> 文件夹下添加一个 <code>announcement.html</code>：</p>
<pre><code class="language-html">{{ $announcement := .Site.GetPage &quot;announcement&quot; }}
{{ with $announcement }}
&lt;div class=&quot;markdown-body text-neutral-900 dark:text-neutral-100 text-center&quot;&gt;
    {{ .Content | safeHTML }}
&lt;/div&gt;
{{ end }}
</code></pre>
<p>在 <code>sidebar.html</code> 下添加：</p>
<pre><code class="language-html">{{ if .Site.Params.Basic.announcement }}
&lt;widget-layout id=&quot;announcement-widget&quot; class=&quot;pb-4 card-base&quot;&gt;
    &lt;div
        class=&quot;font-bold transition text-lg text-neutral-900 dark:text-neutral-100 relative ml-8 mt-4 mb-2 before:content-[''] before:w-1 before:h-4 before:rounded-md before:bg-[var(--primary)] before:absolute before:left-[-16px] before:top-[5.5px]&quot;&gt;
        公告
    &lt;/div&gt;
    &lt;div id=&quot;announcement-content&quot; class=&quot;collapse-wrapper px-4 overflow-hidden&quot;&gt;
        {{ partial &quot;sidebar/announcement.html&quot; . }}
    &lt;/div&gt;
&lt;/widget-layout&gt;
{{ end }}
</code></pre>
<p>这样直接编辑 <code>announcement.md</code> 就可以编辑公告了。当然，还需要配置 <code>.Site.Params.Basic.announcement</code> 参数。</p>
<h2 id="目录组件">目录组件</h2>
<p>目录和公告大差不差：</p>
<pre><code class="language-html">&lt;div id=&quot;toc-container&quot; class=&quot;
    toc text-neutral-900 dark:text-neutral-100 
    p-4 rounded-lg shadow-lg overflow-auto max-h-96 
    transition-all duration-300 ease-in-out hover:shadow-2xl
&quot;&gt;
    &lt;div id=&quot;toc-content&quot; class=&quot;transition-all duration-500 ease-in-out&quot;&gt;
        {{ .Page.TableOfContents }}
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>就是这个样式不大好看，凑合用吧。</p>
<h2 id="简历组件">简历组件</h2>
<p>这个相对麻烦。我不想在 HTML 里硬编码，于是想了半天后，决定使用 TOML 配置，大概就是：</p>
<pre><code class="language-toml">[[params.social]]
    name = &quot;Home&quot;
    url = &quot;&quot;
    icon = &quot;i-carbon-home&quot;
    enable = true
[[params.social]]
    name = &quot;Email&quot;
    url = &quot;mailto:your@email.com&quot;
    icon = &quot;i-carbon-email&quot;
    enable = true
</code></pre>
<p>然后改一下 profile 的逻辑：</p>
<pre><code class="language-html">&lt;div class=&quot;card-base&quot;&gt;
    &lt;a aria-label=&quot;Go to About Page&quot; href=&quot;{{ relURL &quot;about/&quot; }}&quot; class=&quot;group block relative mx-auto mt-4 lg:mx-3 lg:mt-3 mb-3
       max-w-[240px] lg:max-w-none overflow-hidden rounded-xl active:scale-95&quot;&gt;
        &lt;div class=&quot;absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50
        w-full h-full z-50 flex items-center justify-center&quot;&gt;
            &lt;div
                class=&quot;transition opacity-0 group-hover:opacity-100 text-white text-5xl i-mdi-card-account-details-outline&quot;&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;mx-auto lg:w-full h-full lg:mt-0 overflow-hidden relative&quot;&gt;
            &lt;div class=&quot;transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none&quot;&gt;&lt;/div&gt;
            &lt;img src=&quot;{{ relURL &quot;/img/avatar.webp&quot; }}&quot; alt=&quot;Profile Image of the Author&quot;
                class=&quot;w-full h-full object-center object-cover mx-auto lg:w-full h-full lg:mt-0&quot; /&gt;
        &lt;/div&gt;
    &lt;/a&gt;
    &lt;div class=&quot;font-bold text-xl text-center mb-1 dark:text-neutral-50 transition&quot;&gt;{{ .Site.Params.Author.name }}&lt;/div&gt;
    &lt;div class=&quot;h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;text-center text-neutral-400 mb-2.5 transition&quot;&gt;{{ .Site.Params.Author.description }}&lt;/div&gt;
    {{/* &lt;div class=&quot;flex gap-2 mx-2 justify-center mb-4&quot;&gt;
        &lt;a aria-label=&quot;Home&quot; href=&quot;&quot; target=&quot;_blank&quot; class=&quot;btn-regular rounded-lg h-10 w-10 active:scale-90&quot;&gt;
            &lt;div class=&quot;i-carbon-home text-xl&quot;&gt;&lt;/div&gt;
        &lt;/a&gt;

    &lt;/div&gt; */}}
    &lt;div class=&quot;icons-container&quot;&gt;
        {{ range .Site.Params.social }}
        {{ if .enable }}
        &lt;a aria-label=&quot;{{ .name }}&quot; href=&quot;{{ .url }}&quot; target=&quot;_blank&quot;
            class=&quot;btn-regular rounded-lg h-10 w-10 active:scale-90&quot;&gt;
            &lt;div class=&quot;{{ .icon }} text-xl&quot;&gt;&lt;/div&gt;
        &lt;/a&gt;
        {{ end }}
        {{ end }}
    &lt;/div&gt;

&lt;/div&gt;
</code></pre>
<p>再写点美化的 CSS：</p>
<pre><code class="language-css">.icon svg {
    height: 1em;
    width: 1em
}

.icons-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.icons-container a {
    margin: 5px;
    /* 调整图标之间的间距 */
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* 移动端样式 */
@media (max-width: 600px) {
    .icons-container a {
        margin: 4px;
        width: 30px;
        height: 30px;
    }
}

@media (max-width: 600px) {
    .card-base {
        flex-direction: column;
        padding: 0 1rem;
        gap: 0.5rem;
    }
}
</code></pre>
<p>就可以渲染社交图标了。</p>
<p>当初整这个的时候费了不少劲，主要的问题居然是我不知道图标不经过重新 UnoCSS 构建是不生效的（因此我安装了 UnoCSS 🤣）。以及，UnoCSS 不能检测没有在 HTML 中直接使用的图标，因此开了个 <code>utility.html</code> 来专门引入图标。</p>
<h2 id="糖果雨特效">糖果雨特效</h2>
<p>这个我在网上找了许多代码，最终在 Claude 等 AI 伙伴的帮助下写了出来。</p>
<p>新建一个 <code>candy.js</code>：</p>
<pre><code class="language-js">// 糖果雨效果，一定要在 footer 中引入，否则由于页面未加载完成，无法获取到 body 元素

class Circle {
    constructor ({ origin, speed, color, angle, context }) {
        this.origin = origin
        this.position = { ...this.origin }
        this.color = color
        this.speed = speed
        this.angle = angle
        this.context = context
        this.renderCount = 0
    }

    draw() {
        this.context.fillStyle = this.color
        this.context.beginPath()
        this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)
        this.context.fill()
    }

    move() {
        this.position.x = (Math.sin(this.angle) * this.speed) + this.position.x
        this.position.y = (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)
        this.renderCount++
    }
}

class Boom {
    constructor ({ origin, context, circleCount = 10, area }) {
        this.origin = origin
        this.context = context
        this.circleCount = circleCount
        this.area = area
        this.stop = false
        this.circles = []
    }

    randomArray(range) {
        const length = range.length
        const randomIndex = Math.floor(length * Math.random())
        return range[randomIndex]
    }

    randomColor() {
        const range = ['8', '9', 'A', 'B', 'C', 'D', 'E', 'F']
        return '#' + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)
    }

    randomRange(start, end) {
        return (end - start) * Math.random() + start
    }

    init() {
        for (let i = 0; i &lt; this.circleCount; i++) {
            const circle = new Circle({
                context: this.context,
                origin: this.origin,
                color: this.randomColor(),
                angle: this.randomRange(Math.PI - 1, Math.PI + 1),
                speed: this.randomRange(1, 6)
            })
            this.circles.push(circle)
        }
    }

    move() {
        this.circles.forEach((circle, index) =&gt; {
            if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) {
                return this.circles.splice(index, 1)
            }
            circle.move()
        })
        if (this.circles.length == 0) {
            this.stop = true
        }
    }

    draw() {
        this.circles.forEach(circle =&gt; circle.draw())
    }
}

class CursorSpecialEffects {
    constructor () {
        this.computerCanvas = document.createElement('canvas')
        this.renderCanvas = document.createElement('canvas')

        this.computerContext = this.computerCanvas.getContext('2d')
        this.renderContext = this.renderCanvas.getContext('2d')

        this.globalWidth = window.innerWidth
        this.globalHeight = window.innerHeight

        this.booms = []
        this.running = false
    }

    handleMouseDown(e) {
        const boom = new Boom({
            origin: { x: e.clientX, y: e.clientY },
            context: this.computerContext,
            area: {
                width: this.globalWidth,
                height: this.globalHeight
            }
        })
        boom.init()
        this.booms.push(boom)
        this.running || this.run()
    }

    handlePageHide() {
        this.booms = []
        this.running = false
    }

    init() {
        const style = this.renderCanvas.style
        style.position = 'fixed'
        style.top = style.left = 0
        style.zIndex = '999999999999999999999999999999999999999999'
        style.pointerEvents = 'none'

        style.width = this.renderCanvas.width = this.computerCanvas.width = this.globalWidth
        style.height = this.renderCanvas.height = this.computerCanvas.height = this.globalHeight

        document.body.append(this.renderCanvas)

        window.addEventListener('mousedown', this.handleMouseDown.bind(this))
        window.addEventListener('pagehide', this.handlePageHide.bind(this))
    }

    run() {
        this.running = true
        if (this.booms.length == 0) {
            return this.running = false
        }

        requestAnimationFrame(this.run.bind(this))

        this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)
        this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)

        this.booms.forEach((boom, index) =&gt; {
            if (boom.stop) {
                return this.booms.splice(index, 1)
            }
            boom.move()
            boom.draw()
        })
        this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)
    }
}

const cursorSpecialEffects = new CursorSpecialEffects()
cursorSpecialEffects.init()
</code></pre>
<p>再添加 CSS：</p>
<pre><code class="language-css">.candy {
    position: absolute;
    width: 20px;
    height: 20px;
    background-color: #f00;
    border-radius: 50%;
    pointer-events: none;
}
</code></pre>
<p>引入即可。以及，点名批评 Hugo 奇葩的构建机制，JavaScript 就摆在那，愣是不加到 <code>public</code> 里，我也是没招了。</p>
<h2 id="代码一键复制">代码一键复制</h2>
<p>这个属实是给我整得心力交瘁。好在最后在强大的 Claude 3.5 的帮助下写出来了。</p>
<p>开一个 <code>clickcopy.js</code>：</p>
<pre><code class="language-js">(function () {
    'use strict';
    if (!navigator.clipboard) {
        return;
    }

    function createSVGIcon(iconName) {
        const svgNS = &quot;http://www.w3.org/2000/svg&quot;;
        const svg = document.createElementNS(svgNS, &quot;svg&quot;);
        svg.setAttribute(&quot;viewBox&quot;, &quot;0 0 32 32&quot;);

        const path = document.createElementNS(svgNS, &quot;path&quot;);
        if (iconName === &quot;copy&quot;) {
            path.setAttribute(&quot;d&quot;, &quot;M28,10V28H10V10H28m0-2H10a2,2,0,0,0-2,2V28a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V10a2,2,0,0,0-2-2Z&quot;);
            const path2 = document.createElementNS(svgNS, &quot;path&quot;);
            path2.setAttribute(&quot;d&quot;, &quot;M4,18H2V4A2,2,0,0,1,4,2H18V4H4Z&quot;);
            svg.appendChild(path2);
        } else if (iconName === &quot;checkmark&quot;) {
            path.setAttribute(&quot;d&quot;, &quot;M13 24L4 15 5.414 13.586 13 21.171 26.586 7.586 28 9 13 24z&quot;);
        }
        svg.appendChild(path);
        return svg;
    }

    function flashCopyMessage(el, msg, iconName) {
        var iconContainer = el.querySelector('.copy-icon');
        var msgContainer = el.querySelector('.copy-msg');

        // 更新图标
        iconContainer.innerHTML = '';
        iconContainer.appendChild(createSVGIcon(iconName));

        // 更新消息
        msgContainer.textContent = msg;

        setTimeout(function () {
            // 2秒后清除消息文本和图标变化
            msgContainer.textContent = '';
            iconContainer.innerHTML = '';
            iconContainer.appendChild(createSVGIcon('copy'));
        }, 2000);
    }

    function addCopyButton(containerEl) {
        if (containerEl.querySelector('.highlight-copy-btn')) {
            return;
        }

        var copyBtn = document.createElement(&quot;button&quot;);
        copyBtn.className = &quot;highlight-copy-btn&quot;;
        copyBtn.setAttribute(&quot;aria-label&quot;, &quot;Copy to clipboard&quot;);
        copyBtn.innerHTML = '&lt;span class=&quot;copy-icon&quot;&gt;&lt;/span&gt;&lt;span class=&quot;copy-msg&quot;&gt;&lt;/span&gt;';
        copyBtn.querySelector('.copy-icon').appendChild(createSVGIcon('copy'));
        copyBtn.style.display = &quot;none&quot;;

        var codeEl = containerEl.querySelector('code') || containerEl;
        copyBtn.addEventListener('click', function () {
            navigator.clipboard.writeText(codeEl.innerText).then(function () {
                flashCopyMessage(copyBtn, 'Copied!', 'checkmark');
            }, function (err) {
                console.error('Unable to copy: ', err);
                flashCopyMessage(copyBtn, 'Failed :\'(', 'copy');
            });
        });

        containerEl.appendChild(copyBtn);
        containerEl.style.position = 'relative';

        containerEl.addEventListener('mouseenter', function () {
            copyBtn.style.display = &quot;block&quot;;
        });
        containerEl.addEventListener('mouseleave', function () {
            copyBtn.style.display = &quot;none&quot;;
        });
    }

    // 添加复制按钮到所有代码块
    var codeBlocks = document.querySelectorAll('pre');
    Array.prototype.forEach.call(codeBlocks, addCopyButton);
})();
</code></pre>
<p>写 CSS：</p>
<pre><code class="language-css">.highlight-copy-btn {
    position: absolute;
    top: 7px;
    right: 7px;
    border: 0;
    border-radius: 4px;
    padding: 5px;
    font-size: 0.8em;
    line-height: 1;
    background-color: transparent;
    /* 移除背景色 */
    color: inherit;
    /* 继承父元素的颜色 */
    cursor: pointer;
    opacity: 0.6;
    transition: opacity 0.3s;
}

.highlight-copy-btn:hover {
    opacity: 1;
}

.copy-icon {
    display: inline-flex;
    /* 使用 flex 布局以更好地控制图标 */
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
}

.copy-icon svg {
    width: 16px;
    height: 16px;
    fill: currentColor;
    /* 使用当前文本颜色填充SVG */
}

.copy-msg {
    margin-left: 5px;
    font-size: 12px;
}
</code></pre>
<p>然后引入就完事了。不过这个功能有时候需要刷新才能启动。</p>
<p>以及复制之后的按钮和文本有点偏移，但是我没力气调了。</p>

      ]]></content:encoded></item><item><title>Ephemeralis-Weekly（1）：总要启程</title><link>https://chlor.me/weekly-1/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/weekly-1/</guid><category>周报</category><category>备案</category><category>学习</category><description>本文是作者的博客周报「浮生散记」（Ephemeralis Weekly）的第一期，内容是作者重开周报的考虑、作者本周的生活情况，包括写各种大作业的过程、重启 Hugo 博客的过程，以及与家人分别的不舍和思考。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/weekly-1-cover.webp" alt="Ephemeralis-Weekly（1）：总要启程" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<p>本文是沉寂已久的周报——Ephemeralis Weekly（浮生散记）重启后的第一期，日期范围为公历 2024 年 6 月 24 日至 6 月 30 日。</p>
<p>祝食用愉快。</p>
<h2 id="为什么重启">为什么重启？</h2>
<p>这件事，说来话长。</p>
<p>许多博客都有「周报」或者是其他时间周期的文章，于是在我刚刚建成博客不久后，我也兴冲冲地开了一个周报栏目，并且起了一个很矫情的名字——浮生散记（Ephemeralis Weekly）。</p>
<p>当时的我是怀着怎样的一番热血，现在我早已经忘却了。剩下的唯有令人尴尬的事实——「浮生散记」只更新了一期，就陷入了「先帝创业未半而还剩大半」的摆烂状态，后面更的一期根本算不上什么「周报」，连流水账都不是，只能算是「为写而写」的垃圾文字。明日复明日，明日何其多。恢复身体的努力，学业的压力，再加上摆复摆之的躺平心态，「浮生散记」无疑成了园子里荒草最多的一块土地。</p>
<p>之后的整个大一下学期，我都是在一个浑浑噩噩的状态中度过的。直接的结果就是期末考试大寄特寄（从而导致了我现在比以往许多次都要严重的口腔溃疡）。优秀的绩点与我有缘无分，徒留我一个人喊着「悟已往之不谏，知来者之可追」的口号麻痹自己，怀着无知者无畏的心态像堂吉珂德挑战风车一般一头撞向瘟锌铀耗的大作业和小学期。</p>
<p>而现在，大作业终于被我急急忙忙地赶完了，无 DDL 一身轻的第二（或者说是第三）天，我就坐上了回北京的高铁，去面对从未学过的 Java。</p>
<p>就是在这个节骨眼，我突然就有些迷茫了：我的生活，到底留下了什么？</p>
<p>毫无记录，精神的和物理的都没有，只有手机上的日期变动提醒我又过了一天，一周，一月，一学期，一年。或许用不了多久，他人口中「美好的大学生活」就将结束，我就会懵懵懂懂地离开我的象牙塔，我的园子，走上一个连我自己也不知道是什么的工作岗位，干着连我自己都不知道是什么的工作，写着连我自己都不知道是什么的文章（也可能不写），走过宏观经济学家和政治家口中「失落」抑或是「繁荣」的年代，最终归于尘土或字节。</p>
<p>这太可怕了。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Stay Dreaming, Stay Lucid.</p>
</blockquote>
<p>清醒地痛苦，也比糊涂地幸福要好得多。</p>
<p>所以我总归还是「想进步」的，心里的那团火，总归还是没有完全熄灭的。</p>
<p>所以，我感觉，我还是应该写点什么，向我自己证明我生活过。</p>
<p>于是我重启了我的周报。名字没换，因为我想不到什么更好的名字。如果你觉得「浮生散记」这个名字太拗口抑或是书卷气，叫它「园子周报」也没问题。我不保证会持续更新，但是有感悟了我一定会写。</p>
<p>以及，由于我没有<a href="https://immmmm.com/">木木老师</a>那样庞大而丰富的友链（以及强大的能力），我的周报不会过度涉及我的老友们。</p>
<p>祝愉快。</p>
<p>Chlorine</p>
<h2 id="大作业">大作业</h2>
<p>我一位因病休学，今年高考的初中同学最近找我吃饭，言语间不无好奇地问：DDL 是什么？</p>
<p>我一时语塞。</p>
<p>其实 ddl 就是 deadline（截止日期）的意思，代指有截止日期的任务。想要逼疯一个带学牲，最好用的办法就是问 TA：你还剩几个 DDL/你期末考试怎么样了？</p>


<div class="my-6 rounded-lg border-l-4 p-4 border-red-500 bg-red-50/50 dark:bg-red-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-red-700 dark:text-red-300">
        <div class="w-5 h-5 i-carbon-warning-alt">
        </div>
        <span>Caution</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>请谨慎使用此类问题，尤其是在考试季。我不为您的生命安全负责。</p>
    </div>
</div>
<p>大概是从什么时候开始学会赶 ddl 的？我也忘了，就像我在吃饭的时候跟娘亲打趣的一样：谈恋爱就像赶 ddl，没赶过 ddl 的人怎么才能学会赶 ddl？到时候就会了。</p>
<p>言归正传。其实考完试我的 ddl 也不算多（指数量），也就三个：图论的 Final Project，中国文明的期末论文，以及 OOP 的阅读报告。</p>
<h3 id="图论">图论</h3>
<p>计金有一门课程——「面向计算机科学的离散数学」，算是贵系离散数学的超级阉割版本。图论正是这门课的两部分之一。</p>
<p>图论有一个有趣的 Final Project，就是从给定的三个主题中选一个，用图论知识解决（另外有奇思妙想也可以）。这个可以在期末考试上加分，最多 10 分。由于我期末实在不怎么样（88），于是我决定做一下，垂死挣扎（那些考了 95+ 还来卷 proj 的人我不评价）。</p>
<p>我原本有一个想法——「如何吃遍清华所有食堂」，对应旅行商问题。后来我改主意了，选了给定主题的第一个——「北京 985 的公交线路」，知识点就是最小生成树（其余两个是最佳匹配和 GCN）。</p>
<p>项目本身不难，代码很好写，只不过数据很难收集，我和往届的学长学姐要了好几次也没要到，好在我万能的娘亲帮我用缺德地图测出来了 (≧▽≦)。</p>
<p>然后的事情就毫无难度了，照着写就行。我还想了几个延伸方向，像多参数权函数、中心点和 Steiner 树之类的，可惜没找到好的数据源拟合公式。</p>
<p><em>PS：图论的加分作业还有一个供题。我写了几道题交上去，包括但不限于特布尔波的城市化建设和铁山靠简笔画的平面性判断之类的（逃）。</em></p>
<h3 id="中国文明">中国文明</h3>
<p>中国文明的期末论文主题是「XXX 的 XX 思想及其在中国文明中的意义与贡献」。不算是很刁钻的主题，可惜我知识不够，还是得靠学术 AI 帮忙搜集资料。以及，我这个废话大王第一次感受到了凑字数的痛苦 qaq</p>
<p>以及，点名表扬 Typora 的 PDF 导出，非常美观，我整洁漂亮的报告在我的同学们中绝对属于前列水平。</p>
<h3 id="oop">OOP</h3>
<p>终于到 OOP 了。由于我 OOP 考试寄了以及这个作业实在是太难等原因，我把它放到了最后一个。</p>
<p>OOP 的作业是阅读开源项目并且做报告 PPT。给的几个项目都挺阴间的，比方说什么 LiquidFun、Eigen（线性代数库）、glog 之类的。我选的是 TinyXML-2，因为它最小，而且 XML 嘛，也和我的 RSS 有关系。</p>
<p>TinyXML-2 一共两个文件（一个 <code>.h</code> 和一个 <code>.cpp</code>），加起来四五千行代码吧。由于水平太菜，我看的是挺痛苦的。具体过程就不和大家说了，防止影响大家心情。简而言之就是看完代码用 Marp 和 WPS 做 PPT，用 Obsidian 画白板，再写几个测试样例、Makefile 和 README 就可以交了。最终在 28 号晚上（ddl 的前一天晚上）送走了这尊瘟神。</p>
<h2 id="hugo-博客重启">Hugo 博客重启</h2>
<p>最近我一直在高强度更新我的 Hugo 迁移日志，因为我从 NotionNext 搬回到 Hugo 了。具体的迁移过程大家可以看迁移日志，我就不多说了。</p>
<p>反正也是挺麻烦的，从 shortcode、homepage 到评论系统、搜索这一堆，遇到不会的只能 Google 或者问 AI。从期末考试前折腾到考试后，所幸最终效果还可以。</p>
<p>我对这个主题还是挺喜欢的，后续可能再完善一下，开源成一个完整的主题。</p>
<h3 id="备案那些事">备案那些事</h3>
<p>在期末考试前，我曾经尝试过备案，但是失败了。在期末后，得知备案期间可以不用暂停 DNS 解析，不肯安分的我又走上了备案之路。</p>
<p>这次备案的流程和上次差不多，由于接到了备案专员的电话，阿里云初审很快过了。</p>
<p>但是吧，在我调查了后续的公安备案流程后，我顿时就不淡定了。非交互式备案简单，但是不能开评论；交互式备案则比较繁琐。</p>
<p>我当初备案就是为了让国内访问更方便，要是起了反作用，我还备个什么案啊……</p>
<p>很可惜，备案订单提交到管局后就不能撤回了，联系了阿里云的工作人员，他们说可以试着处理。算了，大不了就换域名，或者老老实实走流程。</p>
<h2 id="聚少离多">聚少离多</h2>
<p>下面的内容可能有点煽情，谨慎观看。</p>
<p>或许是时候和各位老友说说我过去的一些经历了。我在准高三那年暑假摔了一跤，导致左股骨颈骨折，在病床上过了大半个高三。在大一上学期的寒假，我和家人深思熟虑后，决定立即做第二次手术，取出当初打在骨头里面的钢钉（事后证明这个决定还是明智的，因为根据手术情况，如果等到这个暑假取钉，很可能就取不出来了）。</p>
<p>二次手术的恢复时间比第一次短，但是也足以让我躺着过了整个寒假，以及在再次开学的时候拄着拐杖。在休学和带病上学之间，我选择了后者。我的娘亲也决定前往北京，照顾我的生活。这一照顾，就是一个学期。</p>
<p>这一个学期的事情不多说了，我从上学期「独自一人」的生活状态，也慢慢重新适应了「有人陪伴」的生活状态。在期末考试后，我和娘亲一起坐车回了家。</p>
<p>但是，随着我身体的好转，我也应该再次脱离照顾，独自面对小学期、暑期实践以及后续的学习生活。这是个很自然的过程，但是实际转换起来，没那么容易。</p>
<p>我们一家人其实都不善言辞。但是在我爹下班回家，和我们闲聊的时候，他说，刚开始还没怎么样，但是就在（原谅我该死的记忆力）的时候，上完夜班回到家，房子空荡荡的，心里特不是滋味。</p>
<p>我听完心里也不是滋味——能让我爹——一个兢兢业业认真负责的班主任，一个沉默寡言到有一点笨嘴拙舌的男人都这么说……</p>
<p>我不是什么坚强的人。刚上大学时，军训的时候，根本没有人教我，作为一个身体不佳半训的学员应该怎么做。和学院持续不断协调宿舍的过程让我们疲于奔命，每天心里都堵得慌。每晚累得半似地回到空荡荡的宿舍，一闭上眼就是在家里的幸福时光。那时候我的泪点低到夸张，随便哪一个刺激，甚至是毫无来由的内心回味都能让我直接破防。我一坐下来就去发微信，看着自己刚印出来的全家福出神，根本不敢听自己以前经常听的歌……现在说起这些也许显得可笑，但是当时的我就是这样的。</p>
<p>转机是什么时候呢？大概是在军训接近尾声的时候，我们的辅导员（科普：清华的辅导员和其他学校不大一样，是学生，例如博士）带着我们几个凑巧在一起的同学（甚至不是一个班级的），拿着偶然找到的吉他，在紫操（紫荆操场）的夜幕下一起唱歌。一首接着一首，想到哪个就现场查谱现场弹唱。记得那天我回去得异常的晚，心里是说不出的快乐和充实，就好像某些东西一下子被填满了。宿舍在我的眼中，也成了微信消息中「温馨的小窝」。</p>
<p>然后，事情就慢慢好起来了。我从高中生到大学生，从不相信自己能上台的社恐分子到一袭正装对着 PPT 侃侃而谈的清华学子，从生活不能自理到生活基本自理，几个月，像梦一样。</p>
<p>我记得，我在刚刚启程上大学的时候，发了一条朋友圈：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/weekly-1-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>这是一句歌词，出自我很喜欢的一首歌——《向告别飞驰吧》。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我躺在忧伤的黄昏</p>
<p>看光明，正分神</p>
<p>看每个恍惚的路人</p>
<p>为虚构，而狂奔</p>
<p>我经过的地方</p>
<p>曾看见末日寄来了</p>
<p>新灵魂</p>
<p>废墟上的世界</p>
<p>用它的方式告别你</p>
<p>的青春</p>
<p>再见了，爱的人</p>
<p>再见歌声，你曾经唱起风尘</p>
<p>再见神的指纹</p>
<p>我已去往，在未来，新的旅程</p>
<p>当时光的羽毛落向</p>
<p>宇宙的，那道门</p>
</blockquote>
<p>所以，当我在十一假期第一次自己回家，我会对来接站的泣不成声的妈妈微笑着说：「哭什么？我这不是回来了吗？」在这次临出发之前，我会对家里人说：「别想我，好好玩你们的啊！」</p>
<p>——<strong>因为，即使聚少离多，即使依依不舍，我们也总要启程。</strong></p>

      ]]></content:encoded></item><item><title>Hugo博客迁移日志（3）</title><link>https://chlor.me/migrating-to-hugo-3/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/migrating-to-hugo-3/</guid><category>博客</category><category>Hugo</category><category>浮光</category><category>折腾</category><description>作者对于从NotionNext迁移到Hugo的具体过程的简要叙述，包含GitHub、GitLab、Codeberg短代码的构建与Callout块的处理。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/migrating-to-hugo-3-cover.webp" alt="Hugo博客迁移日志（3）" />
        </figure>
        <p>芜湖，各位老友们好啊，我是 Chlorine。接着上一回，继续为您说。</p>
<h2 id="githubgitlabcodeberg-短代码">GitHub/GitLab/Codeberg 短代码</h2>
<p>Blowfish 有一个很好的短代码，就是 GitHub/GitLab/Codeberg 项目卡片。本着拿来主义的原则，直接拿过来。</p>
<p>Blowfish 的短代码需要使用 icon 短代码和 SVG 图标，但是我表示根本不需要。用 carbon icons 就可以。</p>
<p>大手一挥改完，然后加载本地服务器……</p>
<p>不是，我图标呢？！</p>
<p>连夜查了一下，中间也不知道怎么改的，反正折腾了半天，可算是搞出来了。</p>
<p>然后……怎么 403 了？</p>
<p>再去查。哦，这个短代码用的 GitHub API 获取信息，而匿名的 API 有调用限制。所以如果有高频的调用需求，可能需要去 GitHub 申请个 API，反正不花钱。</p>
<p>最终效果如下：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/kkbt0/Hugo-Landscape" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>kkbt0/Hugo-Landscape</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        Hugo Theme Unocss &#43; Swup
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #563d7c">
            </span>
            <span>CSS</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">14</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2024-07-09</span>
        </div>
    </div>
</div>
<p>GitLab 和 Codeberg 也差不多。</p>
<h2 id="callout-块">Callout 块</h2>
<p>Callout 块是一个很难办的事情。</p>
<p>其实如果不考虑使用的便利性，最好的办法就是使用 Shortcode。甚至 GitHub 上已经有现成的 notice 短代码了。</p>
<p>但是，作为强迫症的我，希望能够直接使用 GitHub 风格（Obsidian 风格）的语法进行书写，也就是：</p>
<pre><code class="language-md">&gt; [!Callout-type]
&gt; Content
</code></pre>
<p>去给 Hugo 官方提了 issue，但是官方表示，他们感觉这并不是一个好的实现，推荐我使用这样的语法，然后写 Markdown render hook：</p>
<pre><code class="language-txt">callout {level=&quot;warning&quot; }
This is a warning.
</code></pre>
<p>……行吧。</p>
<p>那我还不如写 shortcode 呢！</p>
<p>于是我决定，使用 shortcode 加上 GitHub publisher 的正则替换。很可惜，由于我不会写正则，还是得用 shortcode 的原始语法，就很难评。</p>
<p>下面是一个例子：</p>


<div class="my-6 rounded-lg border-l-4 p-4 border-green-500 bg-green-50/50 dark:bg-green-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-green-700 dark:text-green-300">
        <div class="w-5 h-5 i-carbon-idea">
        </div>
        <span>Tip</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>这是一段 Callout。</p>
    </div>
</div>

      ]]></content:encoded></item><item><title>Hugo博客迁移日志（2）</title><link>https://chlor.me/migrating-to-hugo-2/</link><pubDate>Sat, 29 Jun 2024 21:30:00 +0800</pubDate><author>Chlorine</author><guid>https://chlor.me/migrating-to-hugo-2/</guid><category>博客</category><category>Hugo</category><category>浮光</category><category>折腾</category><description>本文介绍了作者对于从NotionNext迁移到Hugo的具体过程的简要叙述，包含对项目的总览、友链页面的构建、说说页面的构建等</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/migrating-to-hugo-2-cover.webp" alt="Hugo博客迁移日志（2）" />
        </figure>
        <p>芜湖，各位老友们好啊，我是 Chlorine。接着上一回，咱们开始讲我从 NotionNext 迁移到 Hugo 的旅程。</p>
<h2 id="项目整体结构">项目整体结构</h2>
<p>Hugo Landscape 的项目结构没有什么佶屈聱牙的地方，很正常的 Hugo 主题结构……除了 <code>layouts</code> 下面有一个单独的 <code>posts/single.html</code>？我也不知道这个算不算特别。</p>
<p>这个主题最经典的地方在于：<strong>它使用的是 UnoCSS</strong>。啥是 UnoCSS？行吧我也不是很懂，似乎就是一个高度原子化、依赖于 HTML 对象的 CSS。反正挺 OOP 的。</p>
<p>那就先安装个 UnoCSS 吧。直接在主题文件夹下：</p>
<pre><code class="language-bash">npm install
</code></pre>
<p>完事。就安装好了一大堆依赖。</p>
<p><em>其实我一开始的时候没有做这个，后续我会讲具体经过。</em></p>
<p>为了后续开发方便，我使用 OOP 课程的知识，写了个简单的 Makefile：</p>
<pre><code class="language-makefile"># 默认目标
all: theme hugo

# Hugo构建
hugo:
hugo server -D

# 主题构建
theme:
cd themes/efimero &amp;&amp; npm run build &amp;&amp; cd ../..

# 清理构建文件
clean:
rm -rf public
rm -rf resources/_gen
cd themes/efimero &amp;&amp; rm -rf node_modules
cd ../..

# 帮助信息
help:
@echo &quot;可用的make目标：&quot;
@echo &quot;  all: 默认目标，构建 Hugo 和主题&quot;
@echo &quot;  hugo: 构建 Hugo&quot;
@echo &quot;  theme: 构建主题&quot;
</code></pre>
<p>这样每次更新功能要预览的时候，直接 <code>make</code> 就完事了。</p>
<h2 id="友链页面">友链页面</h2>
<p>没错，在不细品项目的情况下，直接开冲，主打一个勇。</p>
<p><del>就算是品了我也品不懂，毕竟我对前端一窍不通。</del></p>
<p>友链页面是我的必需品。还是老办法，用一个 <code>JSON</code> 文件存储信息，放在 <code>主题/static/jsons/friends.json</code>。格式大概是：</p>
<pre><code class="language-json">{
    &quot;name&quot;: &quot;名字&quot;,
    &quot;note&quot;: &quot;注释&quot;,
    &quot;url&quot;: &quot;网址&quot;,
    &quot;md5&quot;: &quot;邮箱的 MD5 值，用来从 Cravatar 获取头像&quot;,
    &quot;des&quot;: &quot;描述/签名&quot;,
    &quot;ava&quot;: &quot;/avatars/头像.webp，在没有 MD5 的情况下用这个&quot;
}
</code></pre>
<p>然后搬出我的祖传 shortcode：</p>
<pre><code class="language-html">{{ $friends := getJSON &quot;themes/efimero/static/jsons/friends.json&quot; }}
&lt;div class=&quot;friend-link-container&quot;&gt;
    {{ range $friends.friend}}
    &lt;div class=&quot;friend-link&quot; style=&quot;background-image: url('{{ .avatar }}');&quot;&gt;
        &lt;a href=&quot;{{ .url }}&quot; target=&quot;_blank&quot;&gt;
            &lt;img src=&quot;{{ with .ava }}{{ if ne . &quot;&quot; }}{{ . }}{{ else }}https://cravatar.cn/avatar/{{ .md5 }}{{ end }}{{ else }}https://cravatar.cn/avatar/{{ .md5 }}{{ end }}&quot;
                alt=&quot;{{ .name }}&quot; class=&quot;friend-link-avatar&quot;&gt;
        &lt;/a&gt;
        &lt;div class=&quot;friend-link-content&quot;&gt;
            &lt;h3&gt;&lt;a href=&quot;{{ .url }}&quot; target=&quot;_blank&quot;&gt;{{ .note }}（{{ .name }}）&lt;/a&gt;&lt;/h3&gt;
            &lt;p&gt;{{ .des }}&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    {{ end }}
&lt;/div&gt;
</code></pre>
<p>既然是换新主题了，肯定得写个好看的样式。<code>主题/assets/css</code> 下新建一个 <code>addon.css</code>，扔进去：</p>
<pre><code class="language-css">.friend-link-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
}

.friend-link {
    width: calc(50% - 10px);
    border: 1px solid #ccc;
    border-radius: 10px;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    padding: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    height: auto;
    max-height: 150px;
    background-size: cover;
    background-position: center;
}

@media screen and (max-width: 768px) {
    .friend-link {
        width: 100%;
    }
}

.friend-link-avatar {
    width: 70px;
    height: 70px;
    border-radius: 50%;
    margin-right: 10px;
}

.friend-link-content {
    display: flex;
    flex-direction: column;
}

.friend-link-content h3 {
    margin: 0;
    padding: 0;
    font-size: 20px;
    color: #333;
}

.friend-link-content p {
    margin: 0;
    padding: 0;
    font-size: 16px;
    color: #666;
    word-wrap: break-word;
}
</code></pre>
<p>当然，不能忘了包含这个 CSS。Landscape 采用的是 <code>css.html</code> 专门包含 CSS，嗯，我很喜欢。</p>
<p>最终出来的效果还是很好看的，详见我的友链页面。哦，别忘了新建一个 Markdown 文件，包含这个短代码。</p>
<h2 id="说说">说说</h2>
<p>关于怎么搞说说，我属实是折腾了 N 多天，最终还是靠着<a href="https://www.ftls.xyz/">恐咖兵糖</a>大佬的方案，经过一顿折腾之后得到的还算满意的 solution。</p>
<p>首先，让我们科普一个概念：<strong>联邦宇宙</strong>。</p>
<p>搬运 Wiki：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>联邦宇宙（英语：Fediverse，简称Fedi）在英文中是“联邦”（Federation）和“宇宙”（Universe）的混成词。联邦宇宙由一系列自由软件组成，有一组互联的服务器（用户自建或第三方托管），一起提供网络发布（如社交媒体、微博、博客或者网站）或者文件托管功能。虽然各个服务器是独立运行的，且各个实例繁多，内容多样， 但服务器之间可以彼此互通。在不同的服务器（实例）上，用户可以创建不同帐号。这些帐号能够跨越实例边界而通信，因为服务器上运行的软件支持一种或多种遵循开放标准的通信协议。 用户通过联邦宇宙中的帐号，可以发布文本或者其他媒体文件，也可以关注其他用户。在某些情况下，用户可以公布或分享数据（如音频、视频、文本文件等），使其对所有或部分人开放并允许他们共同编辑内容（例如日历和黄页）。</p>
<p>联邦宇宙的目的是建立在网络社交巨头公司之外， 提供另一种交流方式。与在单一服务器上运行的传统社交网络相比，联邦宇宙的运行方式更开放。 其服务器的分散性，使联邦宇宙更安全可靠。</p>
</blockquote>
<p>简单来说，就是一系列去中心化（准确来说应该算是联邦化或者多中心化）的自由软件组成的庞大社交网络。我对去中心化网络非常感兴趣，后续如果系统学习，会把心得分享出来（<code>画大饼.webp</code>）。</p>
<p>联邦宇宙主要由四大通讯协议支持：</p>
<ul>
<li>ActivityPub</li>
<li>Diaspora Network</li>
<li>OStatus</li>
<li>Zot &amp; Zot/6</li>
</ul>
<p>我们要用的是第一个。ActivityPub 协议的代表软件是 <a href="https://mastodon.social/">Mastodon</a>（中文名：长毛象/乳齿象），简单来说就是联邦宇宙的 Twitter（𝕏）。Mastodon 虽然成熟，但是比较笨重，不利于自托管（虽然说咱们也不用自托管就是了），而且国内可用的实例比较少。所以，我们选择 ActivityPub 协议的另外一个实践者—— <a href="https://gotosocial.org/">GoToSocial</a>。</p>
<p>GoToSocial 不多介绍。直接上解决方案：</p>
<ol>
<li>注册一个国内的 GTS 实例，例如我用的 <a href="https://scg.owu.one">https://scg.owu.one</a>。</li>
<li>获取鉴权 Token，直接在<a href="https://takahashim.github.io/mastodon-access-token/">这里</a>操作即可。</li>
</ol>
<p>好的，下面开始爆改。具体的操作步骤等我专门写一个说明文档（或许是主题的说明文档？）。</p>
<p>上一个 shortcode：</p>
<pre><code class="language-html">&lt;style&gt;
    .toots-container {
        margin: 0 auto;
        max-height: fit-content;
    }

    .toot {
        margin-bottom: 10px;
    }

    .toot .avatar {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .toot-info {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .toot-stats {
        display: flex;
        justify-content: flex-end;
        /* 将元素靠右对齐 */
    }

    .toot-stats i {
        margin-right: 3rem;
    }

    .basic-field-status {
        border: 1px solid #2d97bd86;
        border-radius: 30px;
        background-color: rgba(255, 255, 255, 0.05);
    }

    .basic-avatar img {
        position: absolute;
        z-index: 2;
        object-fit: cover;
        width: 100px;
        height: 100px;
        left: calc(50% - 50px);
    }

    .basic-avatar img {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
        z-index: 1;
        overflow: hidden;
        object-fit: cover;
    }

    .basic-avatar img:hover {
        position: absolute;
    }

    .basic-avatar {
        height: 120px;
    }

    /* Media Query for Mobile Devices */
    @media only screen and (max-width: 600px) {
        .header {
            height: 150px;
            padding: 10px;
        }

        .toots-container {
            padding: 10px;
        }

        .toot .avatar {
            width: 40px;
            height: 40px;
        }

        .avatar {
            width: 100px;
            height: 100px;
        }

        .basic-info {
            margin-left: 2px;

        }
    }

    @media only screen and (max-width: 430px) {

        .basic-avatar::before,
        .basic-avatar::after {
            display: none;
        }

        .basic-text {
            margin-top: 100px;
            margin-left: -25px;
        }

        .basic-avatar img {
            margin-right: 10px;
            display: none;
        }
    }

    .mdi--reply {
        display: inline-block;
        width: 1.3em;
        height: 1.3em;
        --svg: url(&quot;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M10 9V5l-7 7l7 7v-4.1c5 0 8.5 1.6 11 5.1c-1-5-4-10-11-11'/%3E%3C/svg%3E&quot;);
        background-color: currentColor;
        -webkit-mask-image: var(--svg);
        mask-image: var(--svg);
        -webkit-mask-repeat: no-repeat;
        mask-repeat: no-repeat;
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
    }

    .mdi--star {
        display: inline-block;
        width: 1.3em;
        height: 1.3em;
        --svg: url(&quot;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.62L12 2L9.19 8.62L2 9.24l5.45 4.73L5.82 21z'/%3E%3C/svg%3E&quot;);
        background-color: currentColor;
        -webkit-mask-image: var(--svg);
        mask-image: var(--svg);
        -webkit-mask-repeat: no-repeat;
        mask-repeat: no-repeat;
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
    }

    .mdi--twitter-retweet {
        display: inline-block;
        width: 1.3em;
        height: 1.3em;
        --svg: url(&quot;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M6 5.75L10.25 10H7v6h6.5l2 2H7a2 2 0 0 1-2-2v-6H1.75zm12 12.5L13.75 14H17V8h-6.5l-2-2H17a2 2 0 0 1 2 2v6h3.25z'/%3E%3C/svg%3E&quot;);
        background-color: currentColor;
        -webkit-mask-image: var(--svg);
        mask-image: var(--svg);
        -webkit-mask-repeat: no-repeat;
        mask-repeat: no-repeat;
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
    }
&lt;/style&gt;

&lt;body&gt;
    &lt;br&gt;
    &lt;div id=&quot;toots-content&quot; class=&quot;toots-container&quot;&gt;
        &lt;div class=&quot;toot&quot; id=&quot;toots&quot;&gt;
        &lt;/div&gt;
        &lt;i id=&quot;toots-loading&quot; class=&quot;fa fa-spinner fa-pulse fa-3x fa-fw&quot; style=&quot;display: none;place-items: center;&quot;&gt;
            &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;5em&quot; height=&quot;5em&quot; viewBox=&quot;0 0 256 256&quot;&gt;
                &lt;path fill=&quot;currentColor&quot;
                    d=&quot;M128 24a104 104 0 1 0 104 104A104.11 104.11 0 0 0 128 24m39.11 25.19C170.24 83.71 155 99.44 135 113.61c-2.25-24.48-8.44-49.8-38.37-67.82a87.89 87.89 0 0 1 70.5 3.4ZM40.18 133.54c28.34-20 49.57-14.68 71.87-4.39c-20.05 14.19-38.86 32.21-39.53 67.11a87.92 87.92 0 0 1-32.34-62.72m136.5 67.73c-31.45-14.55-37.47-35.58-39.71-60c12.72 5.86 26.31 10.75 41.3 10.75c11.33 0 23.46-2.8 36.63-10.08a88.2 88.2 0 0 1-38.22 59.33&quot; /&gt;
            &lt;/svg&gt;
        &lt;/i&gt;
        &lt;button id=&quot;toots-moreButton&quot; onclick=&quot;tootsShowMore()&quot;&gt;&lt;a&gt;更多&lt;/a&gt;&lt;/button&gt;
    &lt;/div&gt;
&lt;/body&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/js/time-fmt.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    let maxId = null; // 初始值为 null，表示第一页
    let isFirst = true; // 首次加载
    const tootsDiv = document.getElementById('toots');
    const tootsMoreButton = document.getElementById('toots-moreButton');
    const tootsLoading = document.getElementById('toots-loading');
    const urlObject = new URL(window.location.href);
    const idValue = urlObject.searchParams.get(&quot;id&quot;);

    // 获取 Mastodon 用户公开Toots 限制条数 默认5 排除回复 toot
    async function getPublicToots() {
        let limit = &quot;{{ .Get 2 | default 5 }}&quot;;

        if (idValue != null &amp;&amp; isFirst) {
            isFirst = false;
            const response = await fetch(&quot;{{ .Site.Params.Whisper.instance }}/api/v1/statuses/&quot; + idValue, {
                headers: {
                    'Authorization': &quot;Bearer {{ .Site.Params.bot_token }}&quot;
                }
            })
            const toot = await response.json();
            return [toot];
        }

        const queryParams = maxId ? (`?limit=${limit}&amp;max_id=${maxId}`) : &quot;?limit=&quot; + limit;
        const response = await fetch(&quot;{{ .Site.Params.Whisper.instance }}/api/v1/accounts/{{ .Site.Params.Whisper.user_id }}/statuses&quot; + queryParams + &quot;&amp;exclude_replies=true&quot;, {
            headers: {
                'Authorization': &quot;Bearer {{ .Site.Params.Whisper.bot_token }}&quot;
            }
        })
        const toots = await response.json();
        return toots;
    }

    // 解析ULID
    function parseULID(ulid) {
        const base32Chars = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';
        const timestamp = parseInt(ulid.slice(0, 10).split('').map(char =&gt; base32Chars.indexOf(char)).map(index =&gt; index.toString(2).padStart(5, '0')).join(''), 2);
        const randomPart = ulid.slice(10);

        return {
            timestamp: new Date(timestamp),
            randomPart: randomPart
        };
    }

    // 将Toots显示在页面上
    async function displayToots() {
        try {
            tootsLoading.style.display = &quot;grid&quot;;
            tootsMoreButton.style.display = 'none';
            const toots = await getPublicToots();
            if (toots &amp;&amp; toots.length &gt; 0) {
                displayBioProfile(toots[0]);
                toots.forEach(toot =&gt; {
                    // console.log(parseULID(toot.id)); // 解析 ULID
                    const tootDiv = document.createElement(&quot;div&quot;);

                    tootDiv.classList.add(&quot;toot&quot;);

                    const tootInfoDiv = document.createElement(&quot;div&quot;);
                    tootInfoDiv.classList.add(&quot;toot-info&quot;);

                    const tootAvatar = document.createElement(&quot;div&quot;);
                    tootAvatar.classList.add(&quot;toot-avatar&quot;);

                    const profileImage = document.createElement(&quot;img&quot;);
                    profileImage.src = &quot;{{ .Site.Params.Author.avatar }}&quot;;
                    profileImage.classList.add(&quot;avatar&quot;);
                    profileImage.alt = toot.account.display_name;

                    const tootProfileDiv = document.createElement(&quot;div&quot;);
                    tootProfileDiv.innerHTML = `&lt;strong&gt;${toot.account.display_name}&lt;/strong&gt; &lt;a href=&quot;${toot.url}&quot; target=&quot;_blank&quot;&gt;@${toot.account.acct}&lt;/a&gt;&lt;br&gt;&lt;small&gt;${formatTime(toot.created_at)}&lt;/small&gt;`;

                    tootAvatar.appendChild(profileImage);
                    tootInfoDiv.appendChild(profileImage);
                    tootInfoDiv.appendChild(tootProfileDiv);

                    const contentDiv = document.createElement(&quot;div&quot;);
                    contentDiv.classList.add(&quot;toot-content&quot;);
                    contentDiv.innerHTML = toot.content.replace(/&lt;img/g, '&lt;img loading=&quot;lazy&quot; class=&quot;toot-img&quot;');
                    // contentDiv.innerHTML = toot.content;

                    // media  loading=&quot;lazy&quot;
                    for (let i = 0; i &lt; toot.media_attachments.length; i++) {
                        const media = toot.media_attachments[i];
                        contentDiv.innerHTML += `&lt;img loading=&quot;lazy&quot; src=&quot;${media.url}&quot;&gt;`;
                    }

                    const tootStats = document.createElement(&quot;a&quot;);
                    tootStats.href = toot.url;
                    tootStats.target = &quot;_blank&quot;;
                    {
                        {/*  tootStats.className = &quot;toot-stats&quot;;
                    if (toot.replies_count + toot.favourites_count + toot.reblogs_count != 0) {
                        tootStats.innerHTML += `&lt;span class=&quot;mdi--reply&quot;&gt;&lt;/span&gt; ${toot.replies_count}  `;
                        tootStats.innerHTML += `&lt;span class=&quot;mdi--star&quot;&gt;&lt;/span&gt; ${toot.favourites_count}  `;
                        tootStats.innerHTML += `&lt;span class=&quot;mdi--twitter-retweet&quot;&gt;&lt;/span&gt; ${toot.reblogs_count}`;
                    }  */}
                    }

                    const statsDiv = document.createElement('div');
                    statsDiv.classList.add('toot-stats');
                    statsDiv.innerHTML = `
                    &lt;span class=&quot;mdi--reply&quot;&gt;&lt;/span&gt; ${toot.replies_count}  
                    &lt;span class=&quot;mdi--star&quot;&gt;&lt;/span&gt; ${toot.favourites_count}  
                    &lt;span class=&quot;mdi--twitter-retweet&quot;&gt;&lt;/span&gt; ${toot.reblogs_count}
                `;

                    const hr = document.createElement(&quot;hr&quot;);
                    hr.style = &quot;margin: 0.4rem 0;&quot;

                    // 评论锚点
                    // const commentAnchor = document.createElement(&quot;div&quot;);

                    tootDiv.appendChild(tootInfoDiv);
                    tootDiv.appendChild(contentDiv);
                    tootDiv.appendChild(tootStats);
                    tootDiv.appendChild(statsDiv);
                    tootDiv.appendChild(hr);

                    tootsDiv.appendChild(tootDiv);
                    maxId = toot.id; // 更新最大 ID
                    // 如果 只有一个 自动打开评论区
                    if (toots.length == 1) {
                        initArtalk(commentAnchor, toot);
                    }
                });
                tootsMoreButton.style.display = 'block';
            } else {
                tootsMoreButton.style.display = 'none';
            }
        } catch (error) {
            console.error('获取 Toots 时出错：', error);
            tootsDiv.innerHTML += error.message;
        }
        tootsLoading.style.display = &quot;none&quot;;
    }

    function tootsShowMore() {
        displayToots();
    }

    function displayBioProfile(statuse) {
    }

    displayToots();
    // 页面加载时调用显示Toots函数
    // window.onload = displayToots;
    window.ViewImage &amp;&amp; ViewImage.init('.toot-img');
&lt;/script&gt;
</code></pre>
<p>在站点配置 TOML 中加入相关数据：</p>
<pre><code class="language-toml"># 联邦宇宙的说说参数
[params.whisper]
    instance = &quot;你的实例名称&quot;
    user_id = &quot;你的 ID&quot;
    bot_token = &quot;你的 Token&quot;
</code></pre>
<p>开一个 Markdown，加入短代码，完事。</p>
<p>别看我现在说得轻巧，当初折腾的时候不知道费了多少劲。</p>
<p>今天先说这两个，剩下的明天再说。</p>

      ]]></content:encoded></item><item><title>Hugo博客迁移日志（1）</title><link>https://chlor.me/migrating-to-hugo-1/</link><pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/migrating-to-hugo-1/</guid><category>博客</category><category>Hugo</category><category>Efímero</category><category>折腾</category><description>本文介绍了作者关于从 NotionNext 再一次迁移到 Hugo 的一些原因的叙述，主要原因是喜欢 Hugo Landscape 主题的外观和构建速度。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/migrating-to-hugo-1-cover.webp" alt="Hugo博客迁移日志（1）" />
        </figure>
        <p>芜湖，各位老友们好，我是 Chlorine。几天不见，我又回来水文章了。</p>
<p>本期开一个新坑，主要讲我从 NotionNext 又回到 Hugo 的原因。</p>
<h2 id="前言从-fuwari-讲起">前言——从 Fuwari 讲起</h2>
<p>行吧，我也不废话了，就是因为颜值。</p>
<p>NotionNext 当然好看，尤其是 Hexo 和 Heo 主题。但是，有一天我在 GitHub 上闲逛的时候，偶然发现了这个框架：</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/saicaca/fuwari" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>saicaca/fuwari</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        ✨A static blog template built with Astro. 
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #ff5a03">
            </span>
            <span>Astro</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">1886</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2025-01-19</span>
        </div>
    </div>
</div>
<p>当时我的反应就是：<strong>惊为天人</strong>。</p>
<p>这世界上怎么会有这么丝滑的博客框架啊！</p>
<p>于是我可耻地动心了。不过可惜，Fuwari 基于 Astro，但是我对 Astro 一窍不通。于是我就没继续，转而继续折腾我的 Hugo Blowfish。</p>
<p>可就在我的 Blowfish 即将大功告成之际，我发现，<a href="https://www.ftls.xyz/">恐咖兵糖</a>大佬居然已经写了一个类 Fuwari 的 Hugo 主题，名为 Landscape。</p>








<div class="plain-link p-6 rounded-xl
    bg-card/50 dark:bg-card-dark/50 backdrop-blur
    shadow-md shadow-accent/10 dark:shadow-accent-dark/10
    ring-1 ring-accent/20 dark:ring-accent-dark/20
    hover:(ring-accent/30 dark:ring-accent-dark/30
    shadow-lg shadow-accent/20 dark:shadow-accent-dark/20
    bg-card/70 dark:bg-card-dark/70
    transition duration-300)">
    <div class="flex items-center justify-between mb-3">
        <a href="https://github.com/kkbt0/Hugo-Landscape" target="_blank" rel="noopener noreferrer" class="inline-flex items-center gap-2 text-lg font-medium 
            text-foreground hover:text-primary transition-colors">
            <div class="i-carbon-logo-github w-5 h-5"></div>
            <span>kkbt0/Hugo-Landscape</span>
        </a>
        
    </div>

    
    <p class="mb-4 text-[15px] leading-relaxed text-foreground/80 dark:text-foreground-dark/80">
        Hugo Theme Unocss &#43; Swup
    </p>
    

    <div class="flex flex-wrap items-center gap-4 text-sm text-foreground/60 dark:text-foreground-dark/60">
        
        <div class="inline-flex items-center gap-1.5">
            <span class="w-3 h-3 rounded-full ring-1 ring-black/5 dark:ring-white/5"
                style="background-color: #563d7c">
            </span>
            <span>CSS</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="Star 数">
            <div class="i-carbon-star w-4 h-4"></div>
            <span class="tabular-nums">14</span>
        </div>

        
        <div class="inline-flex items-center gap-1.5" title="开源协议">
            <div class="i-carbon-license w-4 h-4"></div>
            <span>MIT License</span>
        </div>
        

        <div class="inline-flex items-center gap-1.5" title="最后更新时间">
            <div class="i-carbon-time w-4 h-4"></div>
            <span class="tabular-nums">2024-07-09</span>
        </div>
    </div>
</div>
<p>好的，我是小丑。</p>
<p>但是 Blowfish 折腾了这么久，扔是不可能的。于是，我开启了漫长的魔改之路。最终兜兜转转，可算是有了个雏形。由于自我感觉添加了不少元素，因此厚颜无耻地将之作为了一个新的主题，取名 Efímero，中文名「浮光」。</p>
<p>总体而言，浮光不算一个很沉的主题，构建时间大概十几秒。虽说比不过 Virgo 的不超过 10s，但是比 NotionNext 的将近一分半还是强多了。</p>
<p>本篇比较短，主要是讲一讲前言。明天在高铁上更具体经过（的第一篇）。</p>

      ]]></content:encoded></item><item><title>孩子们，我回来了！</title><link>https://chlor.me/hooray-vacation/</link><pubDate>Mon, 24 Jun 2024 21:25:00 +0800</pubDate><author>Chlorine</author><guid>https://chlor.me/hooray-vacation/</guid><category>公告</category><description>我放假啦！！！！！</description><content:encoded><![CDATA[
        <p>在经过了瘟锌铀耗的芥末烤柿后，我终于放假啦！</p>
<p>尽管 OOP、西班牙语、高代……大寄特寄，但是我自由啦！</p>
<p><del>大作业 DDL：你好</del></p>
<p>目前我又搬回了 Hugo，用的是 <a href="https://github.com/kkbt0/Hugo-Landscape">Landscape</a> 魔改出来的主题，我将其命名为 Efímero（大致读作 Ei-fi（重音）-me-lo，中文名：浮光）。特点就是极其丝滑且精致。目前浮光还在快速迭代，等做得比较好了，我会开源的。</p>
<p>停更了这么久，真的有许多想讲的话呢。我会趁着学习的间隙尽可能更新的。</p>

      ]]></content:encoded></item><item><title>新域名（3）</title><link>https://chlor.me/new-domain-3/</link><pubDate>Thu, 30 May 2024 20:56:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/new-domain-3/</guid><category>折腾</category><category>域名</category><description>本文讲述了作者为了使用国内免费 CDN 给博客加速，决定进行域名备案，但主域名 yoghurtlee.com 备案期间需暂时关停。为避免影响，作者购买了新域名 efimero.cn。作者很喜欢其寓意，并考虑用其进行备案。最后，作者提出了备案后如何处理两个域名的疑问，并表示对 Hugo 主题 Blowfish 的兴趣。</description><content:encoded><![CDATA[
        <p>没错，我又买了个域名（</p>
<p>起因其实是我希望用一下国内的免费 CDN 给博客加个速，而国内的免费 CDN 绝大部分都要备案。</p>
<p>那就备案呗，反正我领了阿里云高校计划的优惠券，可以实现零费备案。</p>
<p>但是我的主域名 <a href="https://www.yoghurtlee.com">https://yoghurtlee.com</a> 现在还在对外提供服务，转到阿里云之后就得暂时关停了。一停就是好几周，还没办法进行跳转。很难受（当然也可以找一个临时域名，不过这样 Twikoo 就得暂时关上）。</p>
<p>所以我决定再买一个域名（前后有什么联系吗？没有）。</p>
<p>域名在阿里云买的，中国专属的域名 <code>.cn</code>，<a href="https://efimero.cn">https://efimero.cn</a>。</p>
<p>Efímero 是西班牙语，就是 ephemeralis 的意思。倒是也可以当得起博客主域名。</p>
<p>我个人非常喜欢这个词。生命如蜉蝣般转瞬即逝，只是历史长河中微不足道的一缕微光。我们所能做的，唯有追寻自我，照亮他人。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Como el viento.</p>
<p>像风一样。</p>
</blockquote>
<p>此外有一个问题：如果我选择备案，我应该是对主域名备案，用一个占位域名暂时提供服务，还是用新买的域名备案？如果是后者，那么备案之后两个域名如何处理？是原域名直接套 CloudFlare CDN 变成境外访问专属站点，还是对原域名做重定向呢？</p>
<p>以及我又有了转回 Hugo 的想法，Hugo 的 <a href="https://blowfish.page">Blowfish</a> 主题还挺好看的。</p>

      ]]></content:encoded></item><item><title>警告！</title><link>https://chlor.me/i-am-dying/</link><pubDate>Wed, 22 May 2024 08:11:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/i-am-dying/</guid><category>公告</category><description>希望大家还能看到活着的小氯。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/i-am-dying-cover.webp" alt="警告！" />
        </figure>
        <p>就本周而言，我需要做一点不会的图论作业，和搭档一起练我亲手写的又长又难的西班牙语，当然还有霉耗的微积分作业。同时我还需要和组员们定下来暑期实践的专业调研内容，和班委一起搞甲团答辩，以及在今天之内搞好学推项目的申请。</p>
<p>同时今天是 5 月 22 日了，马上就要到你清半年一度的鬼哭狼嚎芥末烤柿寄（期末考试季）。我必须尽快开始复习（预习）我的各种考试，由于本学期上半部分<del>以及下半部分</del>持之以恒的大摆特摆，我预计期末考试会是一场艰苦的战争 <del>指考试对我单方面碾压</del> 。同时我还抽出时间写中国文明、史纲、OOP、图论的大作业。哦对了，差点忘了六级了。</p>
<p>同时本暑假我还需要上小学期的课，跟着班级去社会实践（并且负责整个专业调研部分），以及速通雅思。同时大二肯定会比大一更忙，寄膝盖（计系概）、数据结构、中微中宏等硬课已经开始向我露出核癌可氢的危啸。同时还有油耗的科研、社工和实习。</p>
<p>知汝远来应有意，好收吾骨课桌边。</p>

      ]]></content:encoded></item><item><title>Hello，VSCodium</title><link>https://chlor.me/hello-vscodium/</link><pubDate>Sun, 19 May 2024 19:52:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-vscodium/</guid><description>本文介绍了 VSCodium，这是一个完全开源且不包含数据收集的 VS Code 替代品。作者讨论了转向 VSCodium 的原因，包括对开源软件和隐私的关注，并提供了安装、设置迁移和扩展换源的指南。最后，作者指出 VSCodium 和 VS Code 在界面和使用上非常相似。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-vscodium-cover.webp" alt="Hello，VSCodium" />
        </figure>
        <p>各位老友们好，我是 Chlorine。</p>
<h2 id="前言">前言</h2>
<p>从高考暑假接触 Python 开始，我就一直使用蟒蛇书推荐的 VS Code 作为我的代码编辑器，其美观和高度可扩展性深得我心。即使是换用 MacBook 后我也没有考虑过别的编辑器。</p>
<p>不过，随着见识的增长，我对自由开源软件（FLOSS）和隐私保护的渴求越来越强。这倒不是什么关乎（软件方面的）意识形态的问题，也不是说非 FLOSS 就如何如何，只是单纯的个人感觉而已。</p>
<h2 id="vs-code开源的代码编辑器吗">VS Code——开源的代码编辑器……吗？</h2>
<p>可能有人会问，VS Code 难道不是 FLOSS 吗？VS Code 的全部源码都在<a href="https://github.com/microsoft/vscode">这个仓库</a>，并且遵循 MIT 许可证开源。</p>
<p>对此，我的答案是：确实，您说的大部分正确。</p>
<p>但是我们需要注意： <strong>无论是从 VS Code 的官网还是从 GitHub release 进行下载，我们获取的都是一个二进制包，而不是 VS Code 的源码</strong> 。</p>
<p>这有什么区别吗？</p>
<p>当然有。</p>
<p>我们看一下 VS Code 的官方网站：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240519120024.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>注意到了吗？VS Code 的说明中，不是「open source」，而是「build on open source」。</p>
<p>我们来复习一下 MIT 许可证的内容：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &ldquo;Software&rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
</blockquote>
<p>如各位所见，MIT 许可证允许任何人使用、复制、修改、合并、发布、分发、再授权和销售软件副本。<strong>这里的「任何人」，自然也包括 Microsoft。</strong></p>
<p>那么 Microsoft 到底做了什么？简而言之，微软的工程师们将自家的源码进行了打包，构成了我们平时看到的 Visual Studio Code。但是，<strong>这份 Visual Studio Code 的成品包是在一个<a href="https://code.visualstudio.com/license">非FLOSS的许可证</a>下发布的，并且包含了微软的遥测和数据收集</strong>。</p>
<p>下面是微软的一位工程师 <a href="https://github.com/chrisdias">Chris Dias</a> 在 VS Code 源码的 GitHub 仓库中 issue #60 的解释：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Thanks for the interest in this topic and I apologize for not commenting sooner, I’ve been on vacation and just getting through my backlog. Let me try to provide more details behind our thinking here.</p>
<p>When we set out to open source our code base, we looked for common practices to emulate for our scenario. We wanted to deliver a Microsoft branded product, built on top of an open source code base that the community could explore and contribute to.</p>
<p>We observed a number of branded products being released under a custom product license, while making the underlying source code available to the community under an open source license. For example, Chrome is built on Chromium, the Oracle JDK is built from OpenJDK, Xamarin Studio is built on MonoDevelop, and JetBrains products are built on top of the IntelliJ platform. Those branded products come with their own custom license terms, but are built on top of a code base that’s been open sourced.</p>
<p>We then follow a similar model for Visual Studio Code. We build on top of the <code>vscode</code> code base we just open sourced and we release it under a standard, pre-release Microsoft license.</p>
<p>The cool thing about all of this is that you have the choice to use the Visual Studio Code branded product under our license <em>or</em> you can build a version of the tool straight from the <code>vscode</code> repository, under the MIT license.</p>
<p>Here&rsquo;s how it works. When you <a href="https://github.com/Microsoft/vscode/wiki/How-to-Contribute#build-and-run-from-source">build</a> from the <code>vscode</code> repository, you can configure the resulting tool by customizing the <a href="https://github.com/Microsoft/vscode/blob/master/product.json"><code>product.json</code></a> file. This file controls things like the Gallery endpoints, “Send-a-Smile” endpoints, telemetry endpoints, logos, names, and more.</p>
<p>When we build Visual Studio Code, we do exactly this. We clone the <code>vscode</code> repository, we lay down a customized <code>product.json</code> that has Microsoft specific functionality (telemetry, gallery, logo, etc.), and then produce a build that we release under our license.</p>
<p>When you clone and build from the <code>vscode</code> repo, none of these endpoints are configured in the default <code>product.json</code>. Therefore, you generate a &ldquo;clean&rdquo; build, without the Microsoft customizations, which is by default licensed under the MIT license (note, i made <a href="https://github.com/Microsoft/vscode/commit/9dd095c27ea79f526b054f741bb52fa62fae80a9">this commit</a> to help make this more clear).</p>
<p>I hope this helps explain why our Microsoft branded Visual Studio Code product has a custom product license while the <code>vscode</code> open source repository has an MIT license. Last, I apologize for the fact that the naming of “Visual Studio Code”, “VS Code” and the <code>vscode</code> repository are so similar, I think it contributed to the confusion.</p>
</blockquote>
<p>这样做有问题吗？</p>
<p>完全没有。Microsoft 严格地遵循了他们自己制定的开源规则：他们使用自己开源的代码构建了一份属于 Microsoft 的发行版本。他们也没有欺骗用户，在显眼的位置写着 「build on open source」，甚至还告诉你：你可以通过一些方式关闭遥测。姑且不论这样做是否符合实质正义，但是在我看来，这已经足够坦荡。</p>
<p>但是，用户很可能不会愿意被收集数据，尤其是那些极其看重隐私的用户。虽然微软给出了关闭遥测的方法，但是他们也堂而皇之地说：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>The software may collect information about you and your use of the software, and send that to Microsoft. Microsoft may use this information to provide services and improve our products and services. <strong>You may opt-out of many of these scenarios, but not all,</strong> as described in the product documentation located at <a href="https://code.visualstudio.com/docs/supporting/faq#_how-to-disable-telemetry-reporting">https://code.visualstudio.com/docs/supporting/faq#_how-to-disable-telemetry-reporting</a>.</p>
</blockquote>
<p>那难道我们真要自己从头编译 VS Code 的源码吗？毫无疑问，99%的人是做不到这一点的。</p>
<p><strong>于是，VSCodium 应运而生。</strong></p>
<h2 id="an-introduction-to-vscodium">An Introduction to VSCodium</h2>
<p>VSCodium 的官网上如是介绍自己：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>VSCodium is a community-driven, freely-licensed binary distribution of Microsoft’s editor VS Code.</p>
</blockquote>
<p>好的，已经把事情说清楚了。</p>
<p>VSCodium 就是通过 VS Code 的源码构建出来的另一份发行版。其不同之处在于：它是一个完全的 FLOSS，<strong>不包含任何遥测和数据收集的部分</strong>。</p>
<p>那如果我也没办法相信 VSCodium 呢？</p>
<p>对此我只能说：那您就自己编译一份发行版，然后比较 Hash 值吧。</p>
<h2 id="我需要切换吗">我需要切换吗？</h2>
<p>简而言之，你需要满足以下条件，否则请继续 VS Code：</p>
<ul>
<li>不能忍受 Microsoft 的数据收集/FLOSS 的信仰者</li>
<li>不是绝对需要 Microsoft 的专属插件</li>
</ul>
<h2 id="安装">安装</h2>
<p>在 macOS 上，可以使用 Homebrew 安装 VSCodium：</p>
<pre><code class="language-bash">brew install --cask vscodium
</code></pre>
<h2 id="设置迁移">设置迁移</h2>
<p>运行以下命令：</p>
<pre><code class="language-bash">cp ~/Library/Application\ Support/Code/User/settings.json ~/vscode-settings.json
cp ~/Library/Application\ Support/Code/User/keybindings.json ~/vscode-keybindings.json
</code></pre>
<p>然后运行：</p>
<pre><code class="language-bash">mv ~/vscode-settings.json ~/Library/Application\ Support/VSCodium/User/settings.json
mv ~/vscode-keybindings.json ~/Library/Application\ Support/VSCodium/User/keybindings.json
</code></pre>
<h2 id="扩展换源">扩展换源</h2>
<p>VSCodium 使用<a href="https://open-vsx.org/">https://open-vsx.org/</a>作为扩展源，但是这个源的扩展不太全。我们可以使用微软市场作为扩展源。</p>
<p>在访达-应用程序中，双击 VSCodium ，显示包内容，然后进入 <code>/resources/app/product.json</code>，编辑 <code>extensionsGallery</code> 键：</p>
<pre><code class="language-json">&quot;extensionsGallery&quot;: {
    &quot;serviceUrl&quot;: &quot;https://marketplace.visualstudio.com/_apis/public/gallery&quot;,
    &quot;itemUrl&quot;: &quot;https://marketplace.visualstudio.com/items&quot;
}
</code></pre>
<p>重启即可。</p>
<h2 id="扩展迁移">扩展迁移</h2>
<p>个人觉得，最方便的方法就是直接复制所有扩展文件。</p>
<p>在 <code>~/.vscode</code> 中，复制整个 <code>extensions</code> 文件夹，粘贴到 <code>~/.vscode-oss</code> 即可。</p>
<p>下面是一些我测试之后有问题的扩展：</p>
<h3 id="pylance">Pylance</h3>
<p>Pylance 是 Python 的一个语言服务器。这个服务器属于微软专有，不能在 VSCodium 上运行。可以改用 Jedi。</p>
<h3 id="github-copilot">GitHub Copilot</h3>
<p>GitHub 是微软的一部分，所以 GitHub Copilot 在 VSCodium 上运行不了也不奇怪。</p>
<p>这里没有什么很好的方案，推荐的方法就是使用替代品，例如同样受欢迎的 Codeium，以及我带清的几位学长开发的 Fitten code 等。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>更新：是可以使用的，方法见<a href="https://github.com/VSCodium/vscodium/discussions/1487">https://github.com/VSCodium/vscodium/discussions/1487</a></p>
</blockquote>
<h2 id="结语">结语</h2>
<p>然后，基本上就可以无缝衔接到 VSCodium 进行开发了。祝愉快。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240519124202.webp" alt="二者的样式几乎一模一样" title="二者的样式几乎一模一样" 
        class="mx-auto rounded-lg block" loading="lazy" width="600"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        二者的样式几乎一模一样
    </figcaption>
    
</figure></p>

      ]]></content:encoded></item><item><title>动手折腾：用SSH解决Oh-my-Zsh的更新错误</title><link>https://chlor.me/update-omz-with-ssh/</link><pubDate>Thu, 09 May 2024 22:55:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/update-omz-with-ssh/</guid><category>折腾</category><category>Zsh</category><category>博客</category><description>本文介绍了作者使用 SSH 作为 Oh-my-Zsh 的更新源，用于解决中国大陆更新不畅的问题的过程。</description><content:encoded><![CDATA[
        <p>Oh my Zsh 的默认更新环境是 HTTPS 的。而由于 GitHub 对国内铀溴的支持，即使是开了科学技术也时常出现访问失败的情况。所幸 GitHub 的 SSH 登录比 HTTPS 靠谱许多，只要有科学技术基本都能成功访问，速度也很好。</p>
<p>所以我们只要设法将 Oh my Zsh 的拉取源改成 SSH 即可。</p>
<p>一般来说，Oh my Zsh 的安装目录是 <code>~/.oh-my-zsh</code>，先用 <code>cd</code> 进入：</p>
<pre><code class="language-bash">cd ~/.oh-my-zsh
</code></pre>
<p>显示一下远程仓库地址：</p>
<pre><code class="language-bash">git remote -v
</code></pre>
<p>发现是 HTTPS：</p>
<pre><code class="language-bash">origin	https://github.com/ohmyzsh/ohmyzsh.git (fetch)
origin  https://github.com/ohmyzsh/ohmyzsh.git (push)
</code></pre>
<p>直接切换链接：</p>
<pre><code class="language-bash">git remote set-url origin git@github.com:ohmyzsh/ohmyzsh.git
</code></pre>
<p>然后再执行一次 <code>git remote -v</code> 查看是否更改成功即可。</p>
<p>然后再执行</p>
<pre><code class="language-bash">omz update
</code></pre>
<p>就可以成功更新了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240509082331.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="590"  />
    
</figure></p>

      ]]></content:encoded></item><item><title>Hello，iTerm2</title><link>https://chlor.me/hello-iterm2/</link><pubDate>Sun, 05 May 2024 20:18:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-iterm2/</guid><category>折腾</category><category>iTerm2</category><description>本文介绍了作者使用 iTerm2 作为终端模拟器的过程及配置。作者最初因担心兼容性问题放弃了 Hyper，尝试了多个终端，包括默认终端、Warp、Wave、Wind 和 Tabby，但各自都有不足，最终选择了 iTerm2。文章详细介绍了通过 Homebrew 安装 iTerm2，并推荐了 Oh-my-zsh、zsh 插件、tmux 等工具来提升使用体验。此外，作者分享了如何自定义 iTerm2 的配色、字体、状态栏及图标等美化步骤，推荐了 Starship 作为终端美化插件，并展示了最终配置效果。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-iterm2-cover.webp" alt="Hello，iTerm2" />
        </figure>
        <h1 id="hello-iterm2">Hello, iTerm2</h1>
<p>各位老友们好，我是 Chlorine。</p>
<p>最近兜兜转转，换了许多个 Terminal emulator，最终选择了 iTerm2。所以写点东西记一下。</p>
<h2 id="前言">前言</h2>
<p>其实单纯是因为看到 Hyper 太久没放新的 release 了，害怕出什么兼容性问题。所以，折腾吧。</p>
<h3 id="默认终端">默认终端</h3>
<p>这自然是最原生的选择。但是，默认终端浑身上下都散发着一个字：难看（通辽汉字 1/1）. 而且，默认终端还换不了图标。这对别人来说可能不是什么事，但是对我来说，有点难绷。</p>
<h3 id="warp">Warp</h3>
<p>这个终端十分逆天。具体来说，这个终端是闭源的，还需要登录。</p>
<p>当然，这种设计招致了大量用户的不满。具体请看 <a href="https://github.com/warpdotdev/Warp/discussions/400">https://github.com/warpdotdev/Warp/discussions/400</a> 。</p>
<p>不知道大家敢不敢用，反正我是不敢，尽管这个终端确实优秀。</p>
<h3 id="wave">Wave</h3>
<p>可以说是 Warp 的开源替代品。特色是自带一个有趣的文本编辑器 <code>codeedit</code>，能在终端中实现类似于 GUI 文本编辑器的功能。不过缺点是没有高亮，我已经<a href="https://github.com/wavetermdev/waveterm/issues/636">提 issue</a> 了。</p>
<p>（小声：而且我也没有 GPT 的 API，这个 AI 也就没什么大用）</p>
<h3 id="wind">Wind</h3>
<p>这个终端看起来很有特色，有点像 IDE。不过我用起来有点不顺手。</p>
<p>最难绷的是，它可以换图标，但是在启动的时候，图标就会换回去。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我去除了大部分的 Wind 的图标，但是我保留了一部分，我觉得保留了一部分 Wind 的图标才知道你用的是 Wind。</p>
</blockquote>
<h3 id="tabby">Tabby</h3>
<p>这个我用了一段时间。优点是超级好看，缺点是启动非常慢，这是我无法忍受的。而且，可能是 bug，在显示命令的时候有时候会重叠。</p>
<h3 id="其他">其他</h3>
<p>略略略略略。</p>
<h2 id="瘟锌锑逝">瘟锌锑逝</h2>
<ul>
<li>本文不完全是教程，有许多步骤讲得不清晰。</li>
<li>大家各有各的需求，请根据自己的实际情况因地制宜。</li>
<li>后面会经常涉及 <code>.zshrc</code> 的编辑，新手推荐用 nano 而不是 Vim 作为编辑器。或者是在用户根目录点击 <code>⌘ + ⇧ + .</code> 显示隐藏文件，找到后用 VS Code 等编辑。</li>
<li>别问为什么封面是 Ubuntu，问就是找不到图。</li>
</ul>
<h2 id="前置准备">前置准备</h2>
<ul>
<li>一台电脑（对我来说就是 MacBook）</li>
<li>作为默认终端的 Zsh</li>
<li>Homebrew（最好是有。可以搜索 Homebrew-CN 加速。）</li>
<li>脑子，眼睛，手</li>
</ul>
<h2 id="iterm2-简介">iTerm2 简介</h2>
<p>很多人说 iTerm2 是 macOS 上所有 Terminal emulator 的终点。这话有点夸张，但是也的确说明了这个终端的优秀和受欢迎。</p>
<p>iTerm2 是一个在 GPL-2.0 协议下开源的 macOS 终端模拟器，具有出色的性能和极高的可玩性。</p>
<ul>
<li>官方网站：<a href="https://iterm2.com">https://iterm2.com</a></li>
<li>GitHub 地址：<a href="https://github.com/gnachman/iTerm2">https://github.com/gnachman/iTerm2</a></li>
</ul>
<h2 id="安装-iterm2">安装 iTerm2</h2>
<p>这里推荐使用 Homebrew 安装。在终端（没错，在安装终端之前，你需要一个终端 🤣）中输入：</p>
<pre><code class="language-bash">brew install iterm2
</code></pre>
<p>等着安装完成，在启动台打开就可以了。</p>
<p>理论上说，这个时候已经可以开始用了。但是，我建议继续看，进行一点美化。</p>
<h2 id="oh-my-zsh-及其插件">Oh-my-zsh 及其插件</h2>
<p><a href="https://github.com/ohmyzsh/ohmyzsh">Oh-my-zsh</a> 是一个 Zsh 插件，能够为 Zsh 提供许多的加持。</p>
<h3 id="zsh-syntax-highlighting">Zsh-syntax-highlighting</h3>
<p>这是一个能给命令带来高亮的插件。这个相当有用，例如，在你输入一个命令时，如果命令是红色的，那么就说明你这个命令有问题了。</p>
<h3 id="zsh-auto-suggestion">Zsh-auto-suggestion</h3>
<p>这个插件可以使用你的命令历史记录进行自动补全建议。不过这东西比 GitHub Copilot 之类的肯定差多了，因为只能用你的历史记录进行推断。</p>
<h3 id="其他-1">其他</h3>
<p>包括 autojump 和 z 等。大家可以在<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins">https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins</a>看一看。</p>
<h3 id="配置">配置</h3>
<p>我能不写了不 qaq，好长啊。可以参考项目的官方文档和网上的教程，搜索 oh my zsh 教程即可。</p>
<h2 id="tmux">tmux</h2>
<p>又是一个项目，简单来说就是增添多标签页功能。</p>
<p>依然使用 Homebrew：</p>
<pre><code class="language-bash">brew install tmux
</code></pre>
<h2 id="状态栏">状态栏</h2>
<p>在设置-Appearance-Theme 中改为 Minimal，Status bar location 可以调整到自己喜欢的位置，我选择底部。</p>
<p>然后在设置-Profiles-（选择某一个）-Session 中，底部选择 status bar enabled，config 一下自己喜欢的元素即可。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240505203843.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h2 id="导入配色方案">导入配色方案</h2>
<p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2 的配色方案</a>非常多，这里我选择 <a href="https://github.com/catppuccin/catppuccin">Catppuccin</a>。</p>
<p>在<a href="https://github.com/catppuccin/iterm/tree/main/colors">这里</a>下载一个 <code>.itermcolors</code> 格式的文件，然后在设置-Profiles-（选择某一个）-Colors-Color Presets-Import 导入并启用即可。</p>
<h2 id="自定义字体">自定义字体</h2>
<p>设置-Profiles-（选择某一个）-Text-Font 改变字体即可。由于我们后面可能涉及特殊符号，所以建议选择一个 Nerd font，例如 Fira code Nerd font。缺点就是没办法设置中文字体，不过终端也很少出现中文吧。</p>
<h2 id="换图标">换图标</h2>
<p>没错，换图标不仅是一种行为，更是一种习惯。</p>
<p>依然是在 <a href="https://macosicons.com/#/">macosicons.com</a> 搜索图标。由于换图标是给自己看的，因此也不需要拘泥于 iTerm2 的图标，搜索 iTerm2、Terminal 等关键词都可以。我用的是这个：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240505203620.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>原本是 <code>&gt;_</code>，加上一半之后瞬间可爱了。</p>
<p>直接把图标下载下来，在应用程序中选中 iTerm2，<code>⌘ + I</code> 显示简介，然后将新图标拖拽到左上角的应用程序名称旁边的图标上就好。</p>
<h2 id="背景图片">背景图片</h2>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240505204053.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>在这里的 Background Image 处修改就好，建议选成 Scale to Fill。</p>
<h2 id="安装-starship">安装 Starship</h2>
<p><a href="https://starship.rs">Starship</a> 是一个用 Rust 写的终端（我感觉更应该称为终端插件），非常好看。</p>
<p>我们依然选择 Homebrew 进行安装：</p>
<pre><code class="language-bash">brew install starship
</code></pre>
<p>安装好之后，打开 <code>.zshrc</code> ，在最后添加一行：</p>
<pre><code class="language-txt">eval &quot;$(starship init zsh)&quot;
</code></pre>
<p>也不需要什么额外配置。如果想玩一玩，可以参考其官方文档。</p>
<h2 id="最终效果">最终效果</h2>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240505202811.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>我个人还是挺满意的。实际上我用的不是这张背景图，为了防止侵权，临时换的。</p>
<p>以及，image auto upload 真是好样的，我图全没了。</p>
<p>并且，我鼠须管坏了，更新不了。大乐。</p>

      ]]></content:encoded></item><item><title>关于你清奇怪的校园网</title><link>https://chlor.me/six-tsinghua-secure/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/six-tsinghua-secure/</guid><category>折腾</category><category>校园网</category><description>本文讲述了作者在解决校园网限制下的文件传输问题时所经历的一系列尝试和最终的发现。起初，作者因无法使用 Localsend 等工具在校园网内传输文件而感到苦恼。通过与孙哥的交流，作者意外发现校园网并没有AP隔离，仅仅是封了某些端口。通过编写Python代码测试后，作者确认了这一情况，并成功使用Localsend通过手动输入IP和端口的方式传输文件。这篇文章不仅分享了作者解决技术问题的过程，还揭示了校园网的实际网络限制情况，提供了在类似网络环境下传输文件的解决方案。</description><content:encoded><![CDATA[
        <p>好的，众所周知，我一向对你清的校园网颇有微词。不仅是封端口，而且还有 AP 隔离（简单来说同一个局域网的设备无法通信），造成我的 Localsend 都没办法用（这也是我换 iPhone 的原因之一）。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>但是！就是在今天，事情发生了奇怪的转机。</p>
<h2 id="起因为了一碟醋做了一锅饺子">起因：为了一碟醋做了一锅饺子</h2>
<p>这件事的起因其实很简单，就是我是一个坚定的本地音乐主义者。我会用我所有可能的手段，包括但不限于免费的音乐网站，通过听歌白嫖一些流媒体的限时 VIP 下载之后把文件逆加密以及抓取 B 站视频转成 mp3 等方式获取 <code>.mp3</code> 和 <code>.flac</code> 格式的文件存到本地听。关于我的本地音乐之旅，我未来会专门写一篇文章详细介绍（<code>画大饼.webp</code>）。</p>
<p>然而，这样下载的文件大都没有元数据。作为一个强迫症，我是无法接受的。</p>
<p>之前在 Windows 和 Android 上有一款宝藏软件—— <a href="https://www.cnblogs.com/vinlxc/p/11347744.html">音乐标签</a>。这款软件可以从国内的 QQ 音乐、网易云等自动刮削元数据，而且还免费，除了好就是好。然而我现在是 Apple 全家桶用户，于是就没有于是了。</p>
<p>这段时间我尝试了许多方法，包括但不限于寻找各种各样的替代软件，尝试打包 GitHub 上面的一些源码，使用兼容层运行这个软件，为此我还装了 Java，Python 的各种库，Wine 以及我死活不愿意装的 Rosetta。然而并没有什么用。</p>
<p>于是我采用了奇葩的方法，就是使用我的 Android 备用机进行刮削，然后传回电脑。至于为什么不用备用电脑？我当然用过，但是启动不如手机方便。</p>
<p>好，问题来了：怎么传文件呢？</p>
<p>由于是备用机，不可能一直登录 VX/QQ，Edge drop 的稳定性又太过铀溴，跨平台传文件的终极方案 localsend 又用不了，让我头痛欲裂。</p>
<h2 id="伟大的孙哥">伟大的孙哥</h2>
<p>众所周知，在折腾这方面，小氯解决不了的问题，就会请教光荣而伟大的<a href="https://clf3.org">孙哥</a>。</p>
<p>今天我和孙哥约饭的时候，就问起这个问题，结果孙哥诧异地表示你清校园网根本没有什么 AP 隔离。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>于是我回去按照孙哥教的方法测试了一下。用 Python 写个小代码：</p>
<pre><code class="language-py">import http.server
import socketserver
import socket

# 定义端口，随便写一个空闲的就行
PORT = 31000

# 创建请求处理程序
Handler = http.server.SimpleHTTPRequestHandler

# 获取本地IP地址
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect((&quot;8.8.8.8&quot;, 80))
ip_address = s.getsockname()[0]
s.close()

# 创建服务器
with socketserver.TCPServer((&quot;&quot;, PORT), Handler) as httpd:
    print(f&quot;服务器在 {ip_address}:{PORT} 上运行&quot;)
    httpd.serve_forever()

</code></pre>
<p>这会把当前的根目录暴露出去。</p>
<p>然后我拿起手机访问了 IP，结果访问上了。</p>
<p>啊？！</p>
<p>那既然如此，我可就要用 Localsend 了。</p>
<h2 id="小氯不等式">小氯不等式</h2>
<p>在 MacBook 和 Android 上安好 Localsend。在设置——高级设置中把端口改成刚才测试的 <code>31000</code>。</p>
<p>然后在发送页面，不出意外是看不到目标设备的。</p>
<p>此时，我们只需要点击收藏夹，将目标设备的 IP 和端口手动填入，收藏后就可以直接传文件了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>好好好，跨世纪的发现，小氯不等式：发现不了设备≠不能传文件。</p>
<p>甚至 Localsend 默认的端口也可以用！也就是说，我曾经错过了无数与 Localsend 并肩作战的机会（<code>大哭.webp</code>）。</p>
<h2 id="后记">后记</h2>
<p>于是我至少暂时找到了一个音乐元数据的解决方案。</p>
<p>此外，既然校园网只会封端口但是没有 AP 隔离，那么，</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>NAS，启动！</p>
</blockquote>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>更新：事实上，带清的校园网存在的是二级隔离。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>离散数学——Bell数</title><link>https://chlor.me/bell-number/</link><pubDate>Sat, 27 Apr 2024 07:12:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/bell-number/</guid><category>离散数学</category><description>本文介绍了离散数学中的 Bell 数。作者介绍了集合的划分，然后引出了 Bell 数的定义并指出其比想象中复杂，并给出了一个递归表达式。最后作者给出了一份计算 Bell 数的 C++ 代码。</description><content:encoded><![CDATA[
        <h1 id="离散数学bell数">离散数学——Bell数</h1>
<p>最近复习离散数学的时候想到一个问题，记录一下。</p>
<p>首先科普一下 <strong>集合的划分</strong> 的知识：</p>
<p>对于集族 $\pi =\{ x \mid x \ \text{is a subset of A and satisfies some conditions} \}$ （奇妙定义法），如果其满足以下条件：</p>
<ol>
<li>不含空集： $\emptyset \notin \pi$</li>
<li>装住 A： $\cup \pi = A$</li>
<li>元素彼此不交： $(\forall x)(\forall y)(x \in \pi  \land y \in \pi)\to(x \cap y = \emptyset)$</li>
</ol>
<p>那么称 $\pi$ 为 A 的一个 <strong>划分</strong> 。</p>
<p>我想到的问题是：对于一个含有 n 个元素的有限集合，其有多少种划分？</p>
<p>也可以表述成一个更加接地气的形式：n 个不同的球，随便分，有多少种分法？</p>
<p>这道题目的结果称为 <strong>Bell 数</strong> 。看起来是一个简单的排列组合问题，但实际上比我们想象中复杂许多。利用现在的知识甚至难以给出一个显式的序列表达式，只能给出一个递归表达式：</p>
$$
B_{n + 1} = \sum_{k=0}^{n}\binom{n}{n-k}B_{k} = \sum_{k=0}^{n}\binom{n}{k}B_{k}
$$<p>直观意义就是将多出来的那个元素单独一类，和某一个元素一类，和某两个元素一类……和剩下 n 个元素一类。</p>
<p>此外我去查阅了一些资料，由于知识浅薄，不敢卖弄，想了解更多的老友可以参考<a href="https://oi-wiki.org/math/combinatorics/bell/">这里</a>。</p>
<p>最后附上一个我闲着没事写的 Bell 数计算代码（<code>千村万落生荆杞的动态规划.webp</code>）。</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int dp_1[1000][1000] = {0}; // 二项式系数
int dp_2[1000] = {0};       // 贝尔数

int binary(int n, int k)
{
    if (k == 0 || k == n)
    {
        return 1;
    }
    if (dp_1[n][k] != 0)
    {
        return dp_1[n][k];
    }
    int ret = binary(n - 1, k - 1) + binary(n - 1, k);
    dp_1[n][k] = ret;
    return ret;
}

int bell(int N)
{
    if (N == 1)
    {
        return 1;
    }
    if (dp_2[N] != 0)
    {
        return dp_2[N];
    }
    int ret = 0;
    for (int i = 1; i &lt; N; i++)
    {
        ret += binary(N - 1, i - 1) * bell(i);
    }
    dp_2[N] = ret;
    return ret;
}
</code></pre>

      ]]></content:encoded></item><item><title>新域名（2）</title><link>https://chlor.me/new-domain-2/</link><pubDate>Sun, 21 Apr 2024 19:31:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/new-domain-2/</guid><category>域名</category><category>折腾</category><description>这篇文章讲述了作者为部署多个服务而购买新域名的过程。由于不想在主域名 `yoghurtlee.com` 上堆积二级域名，也不想用新买的 `pursuing.me`，作者决定购买一个便宜的 `.top` 域名。最终，作者在华为云上购买了 `chlorinechan.top`，完成实名认证后将其挂到了 CloudFlare 上。</description><content:encoded><![CDATA[
        <h1 id="新域名2">新域名（2）</h1>
<p>起因是，在我有了虚拟机并部署 Memos 之后，我想部署几个其他的服务，比如 <a href="https://github.com/xhongc/music-tag-web">Music Tag Web</a>。</p>
<p>然后我就想到，<a href="https://yoghurtlee.com">https://yoghurtlee.com</a> 毕竟是我的主域名，堆一大堆二级域名疑似有点不太好，而新买的 <a href="https://pursuing.me">https://pursuing.me</a> 我还比较喜欢，排除掉。</p>
<p>那么似乎就只有一个选择了，那就是再买一个专门堆服务的域名。</p>
<p>既然是专门堆服务的，也不用考虑什么 SEO，那就哪个便宜买哪个。放眼天下，最便宜的 TLD 应该就是 <code>.top</code> 了。</p>
<p>在哪煮米看了下，最便宜的依旧是我 Spaceship。不过 Spaceship 似乎出了点问题，不能搜索 <code>.top</code> 域名。所以我选择了稍贵一点的华为云，两个月之后把域名转到 Spaceship 就可以（没错，不能搜索但是能转入，怪死了），甚至由于华为云也很便宜，直接在华为云上续费也中。</p>
<p>华为云需要提交实名认证表单，于是我提交了。审核速度很快，也就是一个小时左右。然后就下单了。</p>
<p><a href="https://chlorinechan.top">https://chlorinechan.top</a>，chlorine，chan，小氯酱。一共九块钱，比紫荆园的奶茶还便宜（doge）。</p>
<p>继续挂到 CloudFlare 上。</p>

      ]]></content:encoded></item><item><title>新域名</title><link>https://chlor.me/new-domain/</link><pubDate>Tue, 16 Apr 2024 07:41:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/new-domain/</guid><category>域名</category><category>折腾</category><description>本文讲述了作者购买新域名的经历。作者突发奇想，想找一个与 "hello world" 相关的域名，结果在浏览过程中发现了一个让他心动的域名——pursuing.me。这个域名让作者联想到追逐梦想的意义，于是决定购买。在比较了不同平台的价格后，作者发现 Spaceship 的价格更便宜，于是通过开通境外支付成功购买了这个域名。尽管还没决定如何使用这个域名，作者先将其挂到了 CloudFlare 上。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>昨天晚上突发奇想（其实是看宣传片看激动了），想去找找前缀是 <code>hello world</code> 的域名。当然了，这么好的前缀肯定注册的人挺多，比如不出我所料有 <code>helloworld.org</code>，收录了各种语言的 hello-world。</p>
<p>然后我开始在 Dynadot 上闲逛，找一些和代码相关的域名，然后就越跑越远……</p>
<p>直到我看到了这个域名：&lt;pursuing.me&gt;。</p>
<p>当时我就心动了。Pursue，me。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>我不停奔跑，是为了追逐当年那个被寄予厚望的我。</p>
</blockquote>
<p>然后我当即决定抢一下。</p>
<p>在我下单之前，我决定去 Spaceship 看一看，因为我记得这个域名在 Spaceship 是好几万美元，截个图当个乐子。</p>
<p>然后我就发现 Spaceship 的价格实际上是 4 美元，比 Dynadot 便宜一半，续费也更便宜。</p>
<p>好好好 🤣</p>
<p>不过 Spaceship 只支持美元支付。我有 PayPal，但是绑的是普通卡，还没开境外交易，于是我先睡了。</p>
<p>今天一早我就起来，下了个某行的手机银行，然后开了境外支付。然后就成功力~</p>
<p>最终花销是 34r，汇率略高，但也比 Dynadot 的 60r 便宜了。</p>
<p>我还没太想好用它干什么，先挂到 CloudFlare 上吧。</p>

      ]]></content:encoded></item><item><title>Hello，Rime</title><link>https://chlor.me/hello-rime/</link><pubDate>Wed, 10 Apr 2024 20:34:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hello-rime/</guid><category>折腾</category><category>Rime</category><description>本文介绍了开源输入法Rime，它是一个高度可定制的输入引擎。作者分享了从其他输入法转向Rime的原因，并详细说明了在macOS上安装和配置Rime的过程，包括键位调整、自定义短语、外观修改和自动中英文切换。文章还提供了相关资源链接和个性化配置示例。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/hello-rime-cover.webp" alt="Hello，Rime" />
        </figure>
        <h1 id="hellorime">Hello，Rime</h1>
<p>各位老友们好，我是 Chlorine。</p>
<p>今天咱们讲输入法。说起输入法，大家会想到什么呢？搜狗，讯飞，百度，QQ，还是系统原生？</p>
<p>就我个人而言，我在 Windows + Android 的时候一直在用讯飞输入法，感觉尚可。后来换到苹果全家桶，就改 iOS + macOS 原生了。不过，这一对对中文的支持，你别说，你还真别说（）。而且，无论上面的哪种输入法，都不可避免地面临着一些问题：广告，隐私，可定制性，等等。</p>
<p>于是，我需要一个自由的，安全的，高度可定制的输入法。众所周知，世界上满足这些条件的东西，几乎都是 open-source 的。而世界上的确有 open-source 的输入法，隆重请出我们今天的主角—— <strong>Rime</strong> 。</p>
<h2 id="what-is-rime">What is Rime？</h2>
<p>Cambridge dictionary 对「rime」 的定义是：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Frost (= the thin, white layer of ice that forms when the air temperature is below the freezing point of water, especially outside at night)</p>
</blockquote>
<p>简单来说：霜。结合 Rime 后续一些组件的命名，我们可以称其为「清霜」。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>腾蛟起凤，孟学士之词宗；紫电清霜，王将军之武库。</p>
</blockquote>
<p><a href="https://rime.im/">Rime 的官方网站</a> 则自我介绍道：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>聪明的输入法懂我心意</p>
</blockquote>
<p>严格来说，Rime 并不是输入法，而是「输入算法」或者说是「输入引擎」。它将输入法底层的配置提取出来，并编写为一系列的代码。我们可以通过修改 Rime 的资源库进行多种多样的自定义。这赋予了 Rime 极高的自由度，当然，还有极高的上手难度。</p>
<p>可能有老友和我一样，看到 Rime 的时候会吃一惊：这种东西也能开源？！</p>
<p>众所周知，开源社区是无所不能的，就算是操作系统，都有开源的（例如 Linux），更别提一个输入法了 🤣</p>
<p>Rime 支持全平台（Windows/macOS/Linux/iOS/Android），在不同的平台上有不同的程序，以桌面端为例：</p>
<ul>
<li>Linux：「中州韵」（Rime）<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></li>
<li>Windows：「小狼毫」（Weasel）</li>
<li>macOS：「鼠须管」（Squirrel）</li>
</ul>
<p>这几个程序的名字还都挺好听的。</p>
<p>我们下面以 macOS 的「鼠须管」为例进行讲解。</p>
<h2 id="安装鼠须管">安装「鼠须管」</h2>
<p>在官网上直接下载即可，是一个 <code>.pkg</code> 包。</p>
<p>双击会显示无法打开，不要急，右键——打开方式——安装器，直接无视警告强行打开即可。</p>
<p>安装后，在状态栏的输入法中，找到「鼠须管」启用即可。</p>
<h2 id="自定义配置">自定义配置</h2>
<p>下面才是 Rime 的重头戏。我目前懂得不多，先说几个我弄的。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>在任何调整过后，请点击状态栏-鼠须管图标-重新部署！</p>
</blockquote>
<h3 id="照抄">照抄</h3>
<p>没错，第一步是当 CV 工程师（逃）</p>
<p>Rime 从头配置实在太复杂了，我们捡一个前人的配置魔改更好。</p>
<p>我用的是 <a href="https://github.com/Lucius-Wang/rime-config">这个方案</a>。其中的词库似乎挺久没更新了，我们去词库作者 <a href="https://github.com/iDvel/rime-ice">雾凇拼音</a> 掏最新版词库。具体方法可以参照方案作者的 README。</p>
<h3 id="几个键位调整">几个键位调整</h3>
<p>键位的调整位于 Rime 资源库（macOS 一般是在 <code>/User/&lt;your-user-name&gt;/Library/Rime</code>）中的 <code>default.yaml</code>，这是 Rime 最关键的配置文件。</p>
<p>我已经习惯使用 macOS 的中英键而非 shift 切换输入法了，我们找到键位部分，改掉 shift-L：</p>
<pre><code class="language-yaml">Shift_L: noop  # commit_code | commit_text | inline_ascii | clear | noop
</code></pre>
<p>由于 Rime 自带进入特定程序切换输入法的功能，因此我们将右边的 shift 置为切换，以备不时之需，例如在 VS Code 中写中文注释。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>注：对于 YAML 的修改，Rime 官方推荐使用 patch，具体见 <a href="https://github.com/rime/home/wiki/CustomizationGuide">CustomizationGuide · rime/home Wiki (github.com)</a>。</p>
</blockquote>
<h3 id="自定义短语">自定义短语</h3>
<p>本方案的自定义短语在 <code>custom_phrase.txt</code> 中，按照 <code>汉字&lt;Tab&gt;编码&lt;Tab&gt;权重</code> 添加即可。例如我添加了几个：</p>
<pre><code class="language-txt">计金班  jjb 3
计金    jj  2
针班    zb  2
计算机与金融    jsjyjr  1
无系    wx  2
电子工程系  wx  3
叉院    chay    3
交叉信息研究院  chay    4
贡系    gx  3
经济管理学院    gx  4
雷系    lx  3
自动化系    lx  3
三字班  szb 2
行健书院    xjsy    1
日新书院    rxsy    1
探微书院    twsy    1
致理书院    zlsy    1
求真书院    qzsy    1
秀钟书院    xzsy    1
未央书院    wysy    1
</code></pre>
<p>理论上应该会有自定义的 <code>dict.yaml</code> 的，但是我没找到。</p>
<h3 id="外观">外观</h3>
<p>本方案自带了 macOS 风格的输入法，但是我觉得不够 mac。在 <code>squirrel.custom.yaml</code> 中，将 mac 主题的 <code>hilited_corner_radius</code> 改成 0 会比较接近 macOS Sonoma 的风格。</p>
<p>当然你也可以像我一样自己写。App Store 上有一个 Squirrel designer 软件，可以帮你设计皮肤。</p>
<p>我自己随便写了一个：</p>
<pre><code class="language-yaml">Like:
      name: Like
      author: Chlorine
      font_face: &quot;LXGWWenKaiLite-Regular&quot;
      font_point: 18.0
      label_font_face: &quot;Bookerly-Bold&quot;
      label_font_point: 15.5
      candidate_list_layout: linear
      text_orientation: horizontal
      inline_preedit: true
      translucency: true
      mutual_exclusive: true
      corner_radius: 5.0
      hilited_corner_radius: 5.0
      line_spacing: 2.0
      alpha: 10.0
      color_space: display_p3
      back_color: 0xF2F3F3
      candidate_text_color: 0xD8000000
      comment_text_color: 0x3F000000
      label_color: 0x515151
      hilited_candidate_back_color: 0xCDDC7944
      hilited_candidate_text_color: 0xD8000000
      hilited_comment_text_color: 0x000000
      hilited_candidate_label_color: 0xEE492816
      hilited_corner_radius: 0
      text_color: 0x3F000000
      hilited_text_color: 0xD8000000
      composition_bar_height: 35.0
</code></pre>
<p>需要电脑上有霞鹜文楷便携版的字体，没有的话可以换或者自己安装。效果如下，还算过得去吧。</p>
<p><figure class="my-8">
    <img src="IMG-20240410203232.webp" alt="403" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>夜间模式需要在第 64 行的 <code>style</code> 下面添加一行：</p>
<pre><code class="language-yaml">color_scheme_dark: &lt;你的主题名称&gt;
</code></pre>
<p>这是我的夜间模式代码。</p>
<pre><code class="language-yaml">NightMode:
      name: NightMode
      author: Chlorine
      font_face: &quot;LXGWWenKaiLite-Regular&quot;
      font_point: 18.0
      label_font_face: &quot;Bookerly-Bold&quot;
      label_font_point: 15.5
      candidate_list_layout: linear
      text_orientation: horizontal
      inline_preedit: true
      translucency: true
      mutual_exclusive: true
      corner_radius: 5.0
      hilited_corner_radius: 5.0
      line_spacing: 2.0
      alpha: 10.0
      color_space: display_p3
      back_color: 0x1E1E1E
      candidate_text_color: 0xFFFFFFFF
      comment_text_color: 0x7F7F7F
      label_color: 0xFFD3D3D3
      hilited_candidate_back_color: 0xCDDC7944
      hilited_candidate_text_color: 0xFFFFFFFF
      hilited_comment_text_color: 0x000000
      hilited_candidate_label_color: 0xFFD3D3D3
      hilited_text_color: 0xD8000000
      composition_bar_height: 35.0
</code></pre>
<h3 id="自动中英文切换">自动中英文切换</h3>
<p>同样是在 <code>squirrel.custom.yaml</code> 中。第 6 行开始都是，按照上面的格式照抄即可。</p>
<hr>
<p>今天先讲这么多吧，我写微积分去了。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Rime 输入法本身也被称为「中州韵」。我们约定在提到中州韵的时候，都指的是其 Linux 版本。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>申请 Notion 教育账户的一点事</title><link>https://chlor.me/notion-edu-account/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/notion-edu-account/</guid><category>Chat</category><category>Notion</category><category>博客</category><description>本文讲述了作者申请 Notion 教育账户的经历。作者尝试将账户邮箱更改为教育邮箱以获取 Notion Plus 的高级特性，但遇到验证码延迟的问题。通过联系 Notion 支持并多次尝试，最终成功切换为教育账户并享受了免费升级。作者最后表达了对 Notion 这类 All-in-one 软件的喜爱，并提到了一些替代工具。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>众所周知，Notion Plus 有着各种各样的高级特性，例如 Notion AI。更妙的是，Notion 仁慈地提供了教育优惠，只要你是学生/教师，就可以免费获得 Notion 教育账户，除了只有一个成员以外，可以使用 Notion Plus 的所有高级特性。</p>
<p>虽然我用 Notion 不多，基本只是拿来发个博客，但是这种白嫖的机会怎么能放过呢。</p>
<p>在 Notion 网页版里，点击 Settings &amp; Members-My Account-Change email，原来的邮箱接着验证码，然后输入清华邮箱，等着接验证码。</p>
<p>然后就没有然后了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>我刷新页面，检查垃圾邮件文件夹，把清华邮箱翻了个遍也没翻到验证码。</p>
<p>以往这种时候，我就直接放弃了，但是今天我偏不。</p>
<p>在右下角找到 support，直接把问题扔进去。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Hi, I&rsquo;m currently trying to change my Notion account to an educational one, but unfortunately due to some e-mail network issues or something I couldn&rsquo;t receive the identification code. Is there any other way to finish the identification?</p>
</blockquote>
<p>立即就弹出来一个窗口，要求我输入邮箱和学校名称。</p>
<p>照做之后，Support 窗口（我也不知道到底是人还是机器人）显示会有支持人员和我联系。</p>
<p>OK，那就等吧。结果不到一分钟，来了封邮件：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240401155437.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>嗯，那我先把能做的做了。邮件设置里面把 Notion 的邮件域名开个白名单。</p>
<p>然后不一会，验证码到了。</p>
<p>看一下时间，是 15:17 的，显然不能用了。</p>
<p>也就是说：<strong>Notion 的邮件通知会有长时间的延迟。</strong></p>
<p>行吧，有延迟就有延迟，大不了再等会就得了。</p>
<p>在 15:56，验证码又来了。然而这次又是错的，可能是时间太长了。</p>
<p>好吧，那我再试一次。</p>
<p>这次来的倒是快，直接输入验证码，然后就成功切换为教育邮箱了。</p>
<p>然后在 Upgrade 界面中划到最底下，点击切换为教育计划即可。</p>
<p>然后就可以快乐白嫖了 ～</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240401162521.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>说起来，感觉现在对 Notion 这样的 All-in-one 软件越来越青睐了。Notion 除了不能离线之外，几乎没毛病 <del>对数学公式的支持除外</del> 。现在的替代品，像 Anytype，Affine 和对 Markdown 支持非常好的思源笔记都还可以，等去研究下。</p>

      ]]></content:encoded></item><item><title>唔，博客 100 天了</title><link>https://chlor.me/blog-100-days/</link><pubDate>Tue, 26 Mar 2024 07:56:06 +0800</pubDate><author>Chlorine</author><guid>https://chlor.me/blog-100-days/</guid><category>公告</category><description>这么短的文章还要摘要吗……109 酱表示不能理解！</description><content:encoded><![CDATA[
        <p>刚才回网站上逛了一圈，发现下面的天数统计已经 101 天了。没想到，错过了自己博客的百天呢。</p>
<p>最近一直在鸽，却不是因为课业繁忙，事实上我也没干什么正经事。的确是可写的东西不多了——我指的是在我眼中能拿得出手的东西。</p>
<p>iOS 17.4.1 的 bug 好多啊，心累。</p>

      ]]></content:encoded></item><item><title>Markdown 图片管理实践</title><link>https://chlor.me/markdown-pic-management/</link><pubDate>Thu, 14 Mar 2024 11:01:25 +0800</pubDate><author>Chlorine</author><guid>https://chlor.me/markdown-pic-management/</guid><category>博客</category><category>折腾</category><description>本文介绍了Markdown图片管理的实用技巧，包括在本地Markdown编辑器中使用图片的方法、图床的选择与配置，以及如何通过工具如PicList进行高效管理。作者比较了本地存储与在线图床的优劣，推荐了Obsidian插件和Squoosh等工具，并分享了对各大图床服务的评测，为Markdown用户提供了全面的图片管理解决方案。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>本期想谈一谈我心目中，本地 Markdown 编辑器/笔记软件（Obsidian/Typora/思源笔记/……）的图片管理实践。本文超长且杂乱，请备好茶和早餐饼干，慢慢看。</p>
<p>更新：本文在粘贴的时候发生了大量格式错误，我已经尽可能修正。</p>
<h2 id="前言markdown-中的图片是什么样的">前言：Markdown 中的图片是什么样的？</h2>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<p>——Wikipedia</p>
</blockquote>
<p>如各位所见，Markdown 的本质是纯文本文件，只是因为有 Markdown 渲染器才有了我们看到的斜体、粗体等效果。</p>
<p>那 Markdown 的图片是怎么显示的呢？事实上，Markdown 的图片是依靠链接的形式显示的，其格式为 <code>![&lt;替代文本&gt;](&lt;图片链接&gt; &lt;图片标题（optional&gt;)</code> 。其中的感叹号代表需要显示其内容。</p>
<p>在 Obsidian 中，我们也可以使用 wiki 双链 <code>![[&lt;图片链接&gt;|&lt;图片宽度（optional）&gt;]]</code> 进行图片引用，不过这并不是 Markdown 的标准语法。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>Obsidian 提供了使用 Markdown 标准链接的选项（尽管使用起来不如 wiki 链接方便），也有插件可以将 wiki 链接和标准链接互转。</p>
<p>图片可以放在本地，使用文件路径（可以是最短路径，相对路径和绝对路径）进行引用，也可以放在图床上，使用图床链接进行引用。图床（Image Hosting Service，IHS）就是一个能存储图片的服务器。与一般的服务器不同, 它允许将图片以 URL 链接的形式插入文章并展示图片内容。</p>
<h2 id="郑重声明">郑重声明</h2>
<ol>
<li>由于 Markdown 图片管理是个经久不衰的问题，因此网上的教程也极为丰富。所以，一些已经有详细教程的实践，例如阿里云 OSS/腾讯云 COS/GitHub 图床/SMMS/……的注册以及密钥获取、PicGo/PicList 等的配置我会一笔带过，大家可以自行搜索相关教程。例如，你可以搜索“PicGo+OSS“等。</li>
<li>以下内容较（ji）为（hu）简（mei）略（you）：其他在线图床的配置；MinIO 等本地图床的配置；自建服务器图床……</li>
<li>本文含有大量项目，对于未经测试的项目，我已经明确标出；对于经过测试的项目，我会给出成功时的测试环境。无论测试与否，本人不对文中提到的任何项目的任何特性负责。</li>
<li>本文含有大量链接，如无特殊说明，链接均摘自作者获取的第一级信息，但作者不对链接的内容和安全性负责。</li>
<li>本文为作者原创，若您认为本文含有侵犯您权益的内容，请立即联系我。</li>
</ol>
<h2 id="省流">省流</h2>
<ul>
<li>上手容易程度：本地 <code>file</code> 协议 &gt; 本地附件文件夹 ≈ 在线图床 &raquo; 本地 <code>http</code> 协议图床 &gt; 服务器自建图床</li>
<li>隐私保护程度：本地 <code>file</code> 协议 = 本地附件文件夹 &gt; 本地 <code>http</code> 协议图床 = 服务器自建图床 &raquo; 在线图床</li>
<li>多平台同步/分享便捷程度：在线图床 ≥  服务器自建图床 ≥ 本地 <code>http</code> 协议图床 &raquo; 本地 <code>file</code> 协议 = 本地附件文件夹</li>
</ul>
<p>最推荐的方案：</p>
<ul>
<li>本地附件文件夹：Attachment Management + Image Converter</li>
<li>本地图床：Image Auto Upload + PicList + File 协议</li>
<li>在线图床：Image Auto Upload + PicList + 缤纷云/CloudFlare R2/大厂对象存储</li>
<li>局域网图床/自建服务器图床：前面的区域，以后再来探索吧！</li>
</ul>
<h2 id="推荐工具">推荐工具</h2>
<h3 id="piclist">PicList</h3>
<p>图床管理工具有很多，例如著名的 PicGo，再比如 uPic，iPic 和 PicList 等，这里我们选择 PicList。</p>
<p>PicList 是基于著名图床管理工具 PicGo 的二次开发版本，兼容 PicGo 的特性，同时加入了 AWS S3，兰空图床，本地图床，WebDAV 和 Telegraph 等多种新的内置图床类型以及多种功能，支持在 Windows，macOS 和 Linux 上运行，是一款非常优秀的开源图床管理工具。</p>
<p>上面的介绍……好官方啊（笑）。</p>
<p><a href="https://piclist.cn/">这里</a>是 PicList 的官方网站。可以在 GitHub release 或者官方的直链中下载。</p>
<p>对于大部分图床，PicList 的配置方法和 PicGo 基本上是一样的。</p>
<h3 id="typora-配置">Typora 配置</h3>
<p>在 Typora 的设置中，找到 <code>图像-插入图片时…</code>，选择“上传图片”；上传服务设定选择自己的图床管理软件即可。选择之后可以进行验证（左下角按钮）。</p>
<p>目前支持 PicGo（app/命令行），PicList，Picsee，iPic，uPic 和自定义命令。</p>
<p><em>PS：如果配置完成显示验证失败，可以直接贴张图上去，很可能已经能成功上传了。</em></p>
<h3 id="obsidian-相应插件">Obsidian 相应插件</h3>
<p>对于访问 GitHub 有困难的老友，可以前往 PKMer 进行下载： <a href="https://pkmer.cn/products/plugin/pluginMarket/">https://pkmer.cn/products/plugin/pluginMarket/</a></p>
<h4 id="image-auto-upload">Image Auto Upload</h4>
<p>GitHub 仓库地址： <a href="https://github.com/renmu123/obsidian-image-auto-upload-plugin">https://github.com/renmu123/obsidian-image-auto-upload-plugin</a></p>
<p>在 Obsidian 图片管理界德隆望尊的插件，可以配合 PicGo 实现粘贴图片自动上传。</p>
<h4 id="image-upload-toolkit">Image Upload Toolkit</h4>
<p>GitHub 仓库地址： <a href="https://github.com/addozhang/obsidian-image-upload-toolkit">https://github.com/addozhang/obsidian-image-upload-toolkit</a></p>
<p>来自大佬 <a href="https://atbug.com/">Addo Zhang</a> 的作品，可以一键将图片上传到图床，然后将上传后到全文复制到剪贴板，但是不改变原本的文章，对于希望在本地附件文件夹中存储图片，但是又有时不时的上传需求（例如：写博客）的老友来说可谓是福音。</p>
<p>大佬在<a href="https://atbug.com/obsidian-plugin-image-upload-toolkit/">博客</a>中给出了详细的教程。我曾经在使用的时候发现几个 bug，在文章下面留言后，大佬很快就把问题修复了，不得不敬佩大佬的技术力和责任心。</p>
<p>遗憾的是目前仅仅支持 Imgur，阿里云 OSS 和 ImageKit（ImageKit 也是一家不错的对象存储服务，我在做霞鹜文楷 Lite 字体分包的时候曾经用过，可以配合 LightCDN 等免费服务使用，可以参考<a href="https://chinese-font.netlify.app/post/deploy_to_cdn/">这里</a>）。</p>
<h4 id="attachment-uploader">Attachment Uploader</h4>
<p>GitHub 仓库地址： <a href="https://github.com/zhuxining/obsidian-attachment-uploader">https://github.com/zhuxining/obsidian-attachment-uploader</a></p>
<p>这个插件和 Image Auto Upload 很接近，但是调用的是 uPic/Picsee。我没有正式测试过。</p>
<h4 id="image-converter">Image Converter</h4>
<p>GitHub 仓库地址： <a href="https://github.com/xRyul/obsidian-image-converter">https://github.com/xRyul/obsidian-image-converter</a></p>
<p>图片转换器，支持将图片转换为多种格式（同时也可以进行压缩），同时支持拖拽图片边缘进行大小调节（但是结果似乎无法保留）。</p>
<h4 id="paste-image-rename">Paste Image Rename</h4>
<p>GitHub 仓库地址： <a href="https://github.com/reorx/obsidian-paste-image-rename">https://github.com/reorx/obsidian-paste-image-rename</a></p>
<p>粘贴图片重命名，支持自定义命名规则。如果你使用图床，可以在 PicList 上配置命名规则，省一个插件。</p>
<h4 id="attachment-management">Attachment Management</h4>
<p>GitHub 仓库地址： <a href="https://github.com/trganda/obsidian-attachment-management">https://github.com/trganda/obsidian-attachment-management</a></p>
<p>附件管理器，可以在指定的附件文件夹下建立与原本的文件层级完全相同的附件文件夹结构，有利于对某个文章图片的集中管理。支持全库图片转移。</p>
<h4 id="attachment-manager">Attachment Manager</h4>
<p>GitHub 仓库地址： <a href="https://github.com/chenfeicqq/obsidian-attachment-manager">https://github.com/chenfeicqq/obsidian-attachment-manager</a></p>
<p>同样是附件管理器，但是其会在每个文章的同级建立隐藏文件夹，不过这个插件和 Image Converter 似乎有冲突。</p>
<h4 id="其他">其他</h4>
<p>包括一键下载的 Local Images Plus，提升图像交互体验的 Image Toolkit，支持滚动调节图片大小的 Mousewheel Image Zoom 等。</p>
<h3 id="squoosh">Squoosh</h3>
<p>官网： <a href="https://squoosh.app/">https://squoosh.app/</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/GoogleChromeLabs/squoosh">https://github.com/GoogleChromeLabs/squoosh</a></p>
<p>来自 Google 的开源神作，在图片压缩领域冠绝群雄。</p>
<p>国内可用，完全免费，压缩极快，支持多种输出格式，支持参数调节。唯一的缺点是不能批量压缩，不过可以下载 Squoosh CLI 进行批量处理（请自行搜索教程）。此外有大神用 Electron 写了 GUI 版本，<a href="https://www.imoolee.com/electron-da-bao-squoosh-lib/">参考这里</a>。我没有测试过，无法评价。</p>
<h2 id="这是一个过渡">这是一个过渡</h2>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>图乌片，启一动！</p>
</blockquote>
<h2 id="附件文件夹存储">附件文件夹存储</h2>
<p>这应该是最简单的方法之一了。优点是省心，而且文件都在本地，离线可用，绝对安全；缺点也非常明显，迁移性极差。Obsidian 的文件，扔到 Typora 就用不了了，多设备同步和分享更是白扯，除非你能在另一个设备建立一模一样的文件结构。</p>
<p>以下是一些推荐的实践。</p>
<h3 id="图片压缩和-webp-格式">图片压缩和 <code>.webp</code> 格式</h3>
<p>对于大部分人来说，图片的清晰度其实没必要很高。比如我的图片大部分是代码的运行时截图，这种图片只要不糊成马赛克就能接受，既然如此，为什么不省点地方呢？</p>
<p>常见的图片压缩网站包括 TinyPNG 等，当然我最推荐的还是上面说的 Squoosh。此外可以在 Image Converter 插件中设置压缩，尽管不如 Squoosh 压得那么出色，但是也及格，而且更方便，可以像以前一样直接粘贴无感压缩。</p>
<p>此外，对于像我这样的 <del>强迫症</del> 追求图片大小和性能的人，传统的 <code>.jpg</code>和 <code>.png</code>已经无法满足需求了，我们需要使用 <code>.webp</code>格式。</p>
<p>搬运 Wiki：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>WebP（发音：weppy）是一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式。
……
WebP 的设计目标是在减少文件大小的同时，达到和 JPG、PNG、GIF 格式相同的图片质量，并希望借此能够减少图片档在网络上的发送时间。</p>
</blockquote>
<p>关于 <code>.webp</code> 图片的具体原理我们不需要知道 <del>(实际上是我不知道)</del>，只需要知道 <code>.webp</code> 的图片比较小而且在网站上加载起来比较快就好了。</p>
<p>Squoosh 和 Image Converter 都支持输出 <code>.webp</code>格式。</p>
<h3 id="图片管理">图片管理</h3>
<p>图片管理可以使用上面提到的 Attachment Management 和 Attachment Manager，看你习惯哪种方式了。如果你在使用 Obsidian 的同时使用 Typora，那么我建议使用 Attachment Manager，同时将图片存储位置改为与 Typora 风格一致的 <code>./${filename}.assets</code>。</p>
<p>如果你的图片实在是太复杂，也可以使用 Billfish 和 Eagle 这类专业的媒体资源管理器。</p>
<h3 id="图片重命名">图片重命名</h3>
<p>Paste Image Rename 支持复杂的重命名规则，同时 Attachment Management 和 Image Converter 都支持一些方式的重命名。下面是一些推荐的命名方式：</p>
<ul>
<li>时间戳</li>
<li>MD5 Hash 值</li>
<li>文档名 + 时间戳</li>
<li>文档名 + 序号</li>
<li>ImageNameKey + 序号（ImageNameKey 是 Paste Image Rename 的一个选项，在文章的 YAML Front Matter——也就是 Obsidian 的属性中使用。可以配合 Quickadd 的模板功能实现时间戳等 ImageNameKey）</li>
</ul>
<h3 id="相对路径">相对路径</h3>
<p>大部分 Markdown 编辑器对于相对路径等支持都比较良好，因此推荐在 Obsidian 和 Typora 中将相对路径打开，方便多软件打开和迁移。</p>
<h2 id="在线图床">在线图床</h2>
<p>在线图床，就是将图片上传到提供图床服务等厂家处，在本地保留返回的链接。优点是不用费劲管理图片，省地方，而且同步和分享非常方便；缺点是离线不可用（Obsidian 似乎会有一份本地缓存），依赖于第三方服务（有跑路风险，有的要收费，有的速度不行，而且都可以说毫无隐私可言）。</p>
<p>我在我的博客中曾经简单提到过图床的搭建流程，这里仅仅是补充一些 <del>废话</del>。</p>
<h3 id="图床推荐">图床推荐</h3>
<p>为了看起来方便，我就不列表格了。</p>
<h4 id="大厂对象存储阿里云-oss腾讯云-cos华为云-obs-等">大厂对象存储（阿里云 OSS、腾讯云 COS、华为云 OBS 等）</h4>
<ul>
<li>官网
<ul>
<li>阿里云： <a href="https://www.aliyun.com/product/oss">https://www.aliyun.com/product/oss</a></li>
<li>腾讯云： <a href="https://cloud.tencent.com/product/cos">https://cloud.tencent.com/product/cos</a></li>
<li>华为云： <a href="https://www.huaweicloud.com/intl/zh-cn/product/obs.html">https://www.huaweicloud.com/intl/zh-cn/product/obs.html</a></li>
<li>百度云： <a href="https://cloud.baidu.com/product/bos.html">https://cloud.baidu.com/product/bos.html</a></li>
</ul>
</li>
<li>价格：没有（通常意义上的）免费额度，但是一般有试用包；计费规则极其复杂，包括存储费用、外网流入、外网流出、CDN 回流等。一般来说，存储的费用极低，但是流量（主要是流出流量）较贵，具体可以参考官方文档。</li>
<li>稳定性：估计你敲不动代码了它们还是活得好好的。</li>
<li>速度：国内速度良好，国外如果套 CDN 应该可以，没试过。</li>
<li>优点
<ul>
<li>稳定性好</li>
<li>国内访问快</li>
</ul>
</li>
<li>缺点
<ul>
<li>计费规则极其复杂</li>
<li>要收费，不能 100%白嫖</li>
</ul>
</li>
<li>推荐指数：4.5</li>
</ul>
<p>2024-03-18 更新：目前又发现了网易数帆 NOS，似乎也有很高的免费额度，大家可以自行了解，我就不折腾了（逃）。</p>
<h4 id="缤纷云对象存储">缤纷云对象存储</h4>
<ul>
<li>官网： <a href="https://www.bitiful.com/">https://www.bitiful.com/</a></li>
<li>价格
<ul>
<li>免费额度（账户需实名认证，下面一堆直接摘自官方文档）
<ul>
<li>前 50 GiB 存储</li>
<li>每月前 30 GB HTTP/HTTPS 流量（每日每项限 5 GB）
<ul>
<li>S4 出口流量 10GB/月</li>
<li>内置 CDN 回源 S4 流量 10GB/月</li>
<li>内置 CDN 出口流量 10GB/月</li>
</ul>
</li>
<li>每月前 30 万次请求（每日每项限 1 万次）
<ul>
<li>S4 请求数 10 万次/月</li>
<li>内置 CDN 回源 S4 请求数 10 万次/月</li>
<li>内置 CDN 请求数 10 万次/月</li>
</ul>
</li>
</ul>
</li>
<li>收费部分：费用不高，<a href="https://www.bitiful.com/docs/categories/%E8%AE%A1%E8%B4%B9%E8%AF%B4%E6%98%8E-1/">请自行查阅官方文档</a>。</li>
</ul>
</li>
<li>稳定性：应该不错。</li>
<li>速度：国内只有北京节点，个人测试的速度良好（如果有备案域名还可以免费套 CDN），国外未知。</li>
<li>优点
<ul>
<li>免费额度比较充足</li>
<li>国内访问快</li>
<li>除了实名认证不需要额外条件</li>
</ul>
</li>
<li>缺点
<ul>
<li>知名度不如大厂高</li>
<li>CDN 和自定义域名要备案</li>
</ul>
</li>
<li>推荐指数：4.5</li>
</ul>
<h4 id="七牛云">七牛云</h4>
<ul>
<li>官网： <a href="https://qiniu.com/">https://qiniu.com/</a></li>
<li>价格
<ul>
<li>免费额度
<ul>
<li>标准存储每月免费空间 10G</li>
<li>标准存储每月免费 CDN 回源流量 10G</li>
<li>标准存储每月免费写请求 PUT/DELETE 10 万次</li>
<li>标准存储每月免费读请求 GET 100 万次</li>
</ul>
</li>
<li>收费部分：我打累了，自己看吧。<a href="https://www.qiniu.com/prices/kodo">价格 | 对象存储 - 七牛云 (qiniu.com)</a></li>
</ul>
</li>
<li>稳定性：也算是个知名厂商，应该不错。</li>
<li>速度：国内速度良好。</li>
<li>优点
<ul>
<li>可靠性较高</li>
<li>有一定免费额度</li>
</ul>
</li>
<li>缺点
<ul>
<li>测试域名一个月就会过期，需要绑定已备案的域名。</li>
</ul>
</li>
<li>推荐指数：3.5</li>
</ul>
<h4 id="又拍云">又拍云</h4>
<ul>
<li>官网： <a href="https://upyun.com/">https://upyun.com/</a></li>
<li>价格
<ul>
<li>免费额度
<ul>
<li>新用户注册会赠送相当数额的代金劵，但是和七牛云一样，测试域名是有期限的。</li>
<li>加入又拍云联盟：每年会发放代金券，相当于每月 10G 空间 + 15G 流量（由于是按年发放的，因此可以用一个月剩下的抵另一个月不足的）。</li>
</ul>
</li>
<li>收费部分：<a href="https://www.upyun.com/pricing">这是又拍云的价格计算器</a>，不过我不太能说清楚，因为这主要是针对网站而非单纯的图床的。总体上价格和阿里云、腾讯云等相差不大。</li>
</ul>
</li>
<li>稳定性：又拍云的对象存储和 CDN 在站长圈里相当有名，还是可以相信的。</li>
<li>速度：国内速度良好。</li>
<li>优点：和七牛云差不多。</li>
<li>缺点
<ul>
<li>需要加入又拍云联盟（在网站底端放上又拍云的 Logo），需要备案域名和网站。</li>
</ul>
</li>
<li>推荐指数：3.5</li>
</ul>
<h4 id="cloudflare-r2">CloudFlare R2</h4>
<ul>
<li>官网： <a href="https://developers.cloudflare.com/r2/">https://developers.cloudflare.com/r2/</a></li>
<li>价格</li>
<li>免费额度
<ul>
<li>每月 10G 存储</li>
<li>每月 1M 次 A 请求（写入）</li>
<li>每月 10M 次 B 请求（读取）</li>
<li>无限流量（是的，CloudFlare R2 没有流量费用，毕竟人家 CloudFlare 的节点遍布蓝星🤣）</li>
<li>收费部分
<ul>
<li>存储$0.015 / GB·月</li>
<li>A 请求$4.50 / 百万次</li>
<li>B 请求$0.36 / 百万次</li>
</ul>
</li>
</ul>
</li>
<li>稳定性：估计你敲不动代码了它还是活得好好的。</li>
<li>速度：国外没得说，国内出乎意料地还不错。</li>
<li>优点
<ul>
<li>免费额度充足</li>
<li>无流量费</li>
<li>支持免备案自定义域名</li>
<li>付费部分价格低廉</li>
</ul>
</li>
<li>缺点
<ul>
<li>需要绑定外币信用卡/PayPal（推荐注册一个 PayPal，极其简单）</li>
<li>国内访问速度比国内对象存储稍逊一筹</li>
</ul>
</li>
<li>推荐指数：4.5</li>
</ul>
<hr>
<p>总体而言，只要你的站点流量不是极大，图床的成本都不高，甚至可以使用免费额度实现零成本图床。综合来看，我个人最推荐的还是缤纷云和 CloudFlare R2。当然，如果你想用其他的我也不反对，见仁见智的问题。</p>
<p>我并不推荐那些公共免费图床，即使是已经运行多年的也一般不推荐（如果你执意要用的话，那我推荐 <a href="https://smms.app/">SM.MS</a>）；同时我也不推荐使用 GitHub 仓库作为图床（虽然 GitHub 本身稳定性很好，但是有了 Gitee 图床的前车之鉴，谁知道以后会出什么事；此外 GitHub 图床的国内速度属实是一言难尽，就算是开了 jsDelivr 也是如此）；更不推荐用各种奇奇怪怪的方式薅大厂的产品（比如京东，微博，B 站）当图床。</p>
<p>此外，缤纷云和 CloudFlare R2 本质上还是兼容 Amazon S3 协议的对象存储，因此可以拿来干很多事，比如当网盘分享文件，作为 Obsidian remotely save 和思源 S3 同步的免费提供方等。</p>
<h3 id="配置指南">配置指南</h3>
<h4 id="smms">SMMS</h4>
<p>诶，不是说好不推荐免费公共图床了吗？</p>
<p>emmm，SMMS 的确是个很稳的公共图床，速度也还可以。估计有很多老友会想用，所以还是放一下吧 <del>（才不会告诉你们其实是想对我远古时期的文章进行废物利用）</del> 。</p>
<h5 id="注册-smms-账号">注册 SM.MS 账号</h5>
<p>登录 SM. MS <a href="https://sm.ms">官网</a>或<a href="https://smms.app">备用域名</a>，用邮箱进行注册即可。</p>
<h5 id="获取-smms-的-token">获取 SM.MS 的 token</h5>
<p>首先我们在主页点击 user，选中 dashboard。</p>
<p><figure class="my-8">
    <img src="https://s2.loli.net/2023/10/04/bSp12tG3X9w8OZC.png" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p><del>这甚至都还是远古时期我用 SMMS 图床的图片</del></p>
<p>在 dashboard 中选择 API token，点击 generate token，生成一个专属的 token，复制好备用。</p>
<p><figure class="my-8">
    <img src="https://s2.loli.net/2023/10/04/1QbgvZu7fpnceqH.png" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h5 id="下载安装-piclist">下载安装 PicList</h5>
<p>这个没啥可说的。</p>
<h5 id="为-piclist-配置-sm-ms-的-token">为 PicList 配置 SM. MS 的 token</h5>
<p>在 PicList 页面里选择图床设置，进入 SM. MS 的配置。</p>
<p><figure class="my-8">
    <img src="https://s2.loli.net/2023/10/04/ySMNxhCzatG3wFs.png" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p><del>这不是远古时期 PicGo 的图片吗</del></p>
<h5 id="设置-piclist-server">设置 PicList server</h5>
<p>在 PicList 设置中选择 server，将配置改成这个样子：</p>
<p><figure class="my-8">
    <img src="https://qsol.yoghurtlee.com/IMG-20240313190240.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h5 id="配置-image-auto-upload">配置 Image Auto Upload</h5>
<p>先把插件下载好，启用，然后把配置改成这个样子就可以了。</p>
<p><figure class="my-8">
    <img src="https://s2.loli.net/2023/10/04/EcONhMRKz8IJvgZ.png" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p><del>你就看这复古的 Obsidianite 主题就知道小氯这家伙就是在废文利用</del></p>
<h4 id="缤纷云">缤纷云</h4>
<p>可以参考我的博客文章。</p>
<h4 id="cloudflare-r2-1">CloudFlare R2</h4>
<h5 id="注册-paypal-账户">注册 PayPal 账户</h5>
<p>想薅 CloudFlare 的羊毛，你首先需要有一个 PayPal 账户。当然，你有 Visa 卡一类的更好。</p>
<p><a href="https://www.paypal.com/">这里</a>是 PayPal 的官网，直接进去注册就完事，不需要双币卡。关于其中的注意事项，可以参考我的老友<a href="https://sicheng.taoooist.org">嗣檙</a>的文章<a href="https://taoyifan.cn/#%E6%B5%AA%E8%8A%B1_%E6%B3%A8%E5%86%8Cpaypal%E8%B4%A6%E5%8F%B7%E5%B9%B6%E6%AD%A3%E5%B8%B8%E4%BB%98%E6%AC%BE%E4%BD%BF%E7%94%A8">浪花_注册paypal账号并正常付款使用</a>。</p>
<p><em>PS：不必担心，只要你的用量不超过免费额度，即使是绑定了账户也是不会扣费的。</em></p>
<h5 id="注册-cloudflare-账户">注册 CloudFlare 账户</h5>
<p>略，我相信大家都有。</p>
<h5 id="创建存储桶">创建存储桶</h5>
<p>在 CloudFlare 的 <a href="https://dash.cloudflare.com">dashboard</a> 中选择 R2，进行 PayPal 账户绑定。</p>
<p>然后点击右上角的创建存储桶。</p>
<p><figure class="my-8">
    <img src="https://qsol.yoghurtlee.com/IMG-20240314115904.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h5 id="公开访问自定义域名和-cors">公开访问，自定义域名和 CORS</h5>
<p>简单来说，开启公开访问可以让你在 CloudFlare 之外的地址（包括本机）访问图片，自定义域名可以让你有一个自己的图床域名，CORS 策略可以让其他网站访问此处的资源。</p>
<p><figure class="my-8">
    <img src="https://qsol.yoghurtlee.com/IMG-20240313190421.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h5 id="token-设置">Token 设置</h5>
<p>在概览界面的右上角，点击“管理 R2 API 令牌”即可。权限选读写，限定在你创建的桶就好。各个平台 Token 的设置都是大同小异。</p>
<h5 id="piclist-配置">PicList 配置</h5>
<p>CloudFlare R2 兼容 AWS S3 协议，就按下面的来就好。</p>
<p><figure class="my-8">
    <img src="https://qsol.yoghurtlee.com/IMG-20240314115815.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h5 id="缓存策略optional">缓存策略（Optional）</h5>
<p>这个对于博客图床比较有用，不过需要你配置自定义域名。</p>
<p><figure class="my-8">
    <img src="https://qsol.yoghurtlee.com/IMG-20240314110034.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h2 id="本地图床">本地图床</h2>
<p>这是我最近折腾出来的新玩意。简单来说，将一个本地文件夹作为图床，并且将文件夹使用某种协议向外暴露，使得 Markdown 编辑器能够进行读取。优点是既保留了本地的隐私性，又满足了不同 Markdown 编辑器之间的同步需求；缺点是只能本机访问，需要进行一定的配置才能转化为局域网可访问，要想转化为公开图床则需要很复杂的配置。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>瘟锌锑逝</p>
<p>此处讨论的不是局域网图床。下面的配置仅限在本机使用，局域网图床的配置可以参考<a href="https://zhuanlan.zhihu.com/p/349707695">这里</a>。</p>
<p>对于拥有 NAS 或者长时间开机的设备，并且有同步需求的老友来说，局域网图床是一个好选择。</p>
</blockquote>
<h3 id="使用-file协议">使用 <code>file</code>协议</h3>
<p>首先我们讲讲 file 协议。</p>
<p>我们在输入一个网站的完整地址的时候，总会加上一个 <code>http</code>或者 <code>https</code>。所谓的 http，其实是超文本传输协议（HyperText Transfer Protocol）的简写，其允许客户端（一般是浏览器）向服务器请求资源，是整个万维网传输信息的基础。而 https 就是 http secure，代表使用了 SSL/TLS 加密协议的 http，更为安全。</p>
<p>而 file 也是一种协议，不过它不是用于访问网络资源的，而是访问本地文件。例如，你用 Edge 或者 Chrome 打开一个 PDF，仔细看上面地址栏的路径，就是 file 协议下的绝对路径。</p>
<p>目前支持 file 协议的包括 Obsidian，思源笔记和 Typora 等编辑器/笔记软件。<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>配置 file 协议简单得惊人，整个配置可以在几分钟内搞定。</p>
<ol>
<li>找一个你喜欢的地方建个文件夹，例如我的是 <code>/Users/chlorine/Pictures/picbed</code>。</li>
<li>打开 PicList，找到“本地上传”，配置如下。</li>
</ol>
<p><figure class="my-8">
    <img src="https://qsol.yoghurtlee.com/IMG-20240314115714.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>测试一下，完事了。</p>
<p>这个方案实在是太简单了，简单到折腾了一天的本理性人都开始痛惜我的沉没成本。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>瘟锌锑逝</p>
<ol>
<li>Windows 上的默认文件路径分隔符是反斜杠，如果路径不对劲，可以同时试一下斜杠、反斜杠、双反斜杠。</li>
<li>本方案无法局域网化。</li>
</ol>
</blockquote>
<h3 id="使用-http-图床">使用 http 图床</h3>
<p>除了使用 file 协议，我们还可以使用 http 协议，也就是把本机的一个端口暴露出来作为上传服务。</p>
<p>下面是几种方案，我没有一一尝试过，仅供参考。</p>
<h4 id="使用-my-easy-pic-bed">使用 My-Easy-Pic-Bed</h4>
<p><a href="https://github.com/fslongjin/My-Easy-Pic-Bed">My-Easy-Pic-Bed</a> 是一个使用 Python 开发的轻量级图床程序，应该是下面这几个方案里面最轻量的了。</p>
<p>关于 Windows 上的使用可以参考<a href="https://zhuanlan.zhihu.com/p/349707695">这篇教程</a>，我只讲 macOS 的几个注意事项。</p>
<h5 id="启动服务">启动服务</h5>
<p>在终端（推荐用 VS Code 打开项目文件夹，在内置终端中运行或者使用 Code Runner）中执行：</p>
<pre><code class="language-bash">python -u app. py
</code></pre>
<p>然后就可以在 <code>http://127.0.0.1:&lt;端口，在下面配置&gt;</code>找到你的服务了，图片的路径是 <code>http://127.0.0.1/upload/&lt;图片名&gt;</code>。</p>
<h5 id="修改默认端口">修改默认端口</h5>
<p>由于原本的程序使用的是 80 端口，所以直接运行会被 Permission Denied。解决方案有两个：</p>
<ol>
<li>使用管理员权限（在命令前面加个 <code>sudo</code>），然后输入密码即可，输入过程不会显示，不必慌张。</li>
<li>修改默认端口。</li>
</ol>
<p>我们着重讲第二种。打开项目的 <code>config.ini</code>，将其中的 <code>port</code>参数修改为一个闲置的 <strong>1024 以后的</strong> 端口，例如我使用的是 8567。</p>
<h5 id="配置-piclist">配置 PicList</h5>
<p>PicList 内置了对本地图床的支持，配置和上面的 file 协议很像，把自定义域名改为 <code> http://127.0.0.1/upload</code>就可以了 。</p>
<h5 id="添加支持格式">添加支持格式</h5>
<p>在 <code>app.py</code>的 13 行那个列表中添加扩展名即可。</p>
<pre><code class="language-py">allowed_extensions = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif'} # 添加自己需要的格式
</code></pre>
<h5 id="修改命名规则">修改命名规则</h5>
<p>命名的代码位于 <code>app.py</code>的 35 行：</p>
<pre><code class="language-py">if file and allowed_file (file. filename):
            filename = str (int (time.time ())) + str (random.randint (1, 99999)) + secure_filename (str (random.randint (1, 7887)) + file. filename)
</code></pre>
<p>提供几种命名的替代方案，如果需要其他的，可以自行搜索/询问 AI。</p>
<p>时间戳：</p>
<pre><code class="language-py"># 需要包含一个模块
from datetime import datetime
# ……
if file and allowed_file (file. filename):
            filename = datetime.now (). strftime ('%Y%m%d %H%M%S') + os.path.splitext (file. filename)[1]
</code></pre>
<p>MD5（来自 GitHub Copilot）：</p>
<pre><code class="language-py">import hashlib
# ……
if file and allowed_file (file. filename):
    file_bytes = file.read ()
    file_hash = hashlib.md5 (file_bytes). hexdigest ()
    extension = os.path.splitext (file. filename)[1]
    filename = file_hash + extension
</code></pre>
<p>不重命名（推荐，可以在 PicList 中配置命名规则）：</p>
<pre><code class="language-python">if file and allowed_file (file. filename):
    filename = file. filename
</code></pre>
<h5 id="后台运行">后台运行</h5>
<p>可以在运行命令的时候加一个 <code>nohup</code>前缀。</p>
<h5 id="开机自启">开机自启</h5>
<p>这个需要配置 launchd，极其复杂，可以参考 <a href="https://blog.voezy.com/cyber/MacOS-Launchctl-Scripts.html">Mac OS 利用launchctl开机运行python程序 | Voezy</a>。我自己没成功。</p>
<h5 id="私有域名">私有域名</h5>
<p>如果你不喜欢 <code>127.0.0.1</code> 这种方式，那么你可以稍做一点手脚，自娱自乐一个好看的域名。</p>
<p>简单来说，我们需要修改 <code>hosts</code> 文件——这是一个将主机名（域名）映射到 IP 地址的文件。<code>hosts</code> 文件在所有解析中具有最高效力，这样，我们就可以绕过 DNS 解析来进行 IP 和域名的对应。</p>
<p>为了避免使用烦人的 Vim 或者 Nano，我们使用 VS Code 进行编辑。</p>
<p>在 <code>/etc</code> 文件夹（位于 macOS 的根目录 Macintosh HD 中，使用 <code>command+shift+.</code> 以显示隐藏文件夹）中找到 <code>hosts</code> 文件，右键打开方式选择 VS Code。</p>
<p>打开之后你应该看到类似这样的内容：</p>
<pre><code class="language-txt">##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1	localhost
255.255.255.255	broadcasthost
:: 1             localhost
</code></pre>
<p>在底端添加一行：</p>
<pre><code class="language-txt">127.0.0.1	&lt;你想要的域名&gt;
</code></pre>
<p>注意，此处的域名可以是任何字符串，因为这个“域名”只会在本机进行解析，所以不符合规范也没问题。<strong>但是，为了不出现奇奇怪怪的问题，最好不要使用现实世界中存在的域名。</strong></p>
<p>解释一下，我们前面说过，<code>hosts</code> 文件在所有解析中具有最高效力，如果我们将一个存在的域名映射到本机了，那你再访问这个域名，原本的 DNS 可就不作数了。举个例子，如果你将 <code> www.baidu.com</code> 映射到本机，那你再在浏览器地址栏输入 <code> www.baidu.com</code> ，访问的就是本机，不是百度了。所以说，最好使用一些不存在的域名，例如不存在的后缀，特别奇怪的前缀等。比如，可以使用 <code>chlorinechan.chem</code>（<code>小氯酱.化学</code>），因为 chem 这个后缀是不存在的。</p>
<p>这样，你就可以使用 <code>http://&lt;你的私有域名&gt;/upload/&lt;图片名&gt;</code> 进行访问啦～</p>
<h5 id="域名防火墙">域名防火墙</h5>
<p>如果你的局域网是较为开放的局域网（比如小氯使用的带清校园网）或者不可信任的局域网，那么推荐你打开域名防火墙。否则，局域网内的其他人只要知道你的 IP 地址就可以访问你的图床，这是非常危险的。</p>
<p>域名防火墙配置可以参考<a href="https://zhuanlan.zhihu.com/p/351973632">这里</a>。</p>
<h4 id="使用兰空图床">使用兰空图床</h4>
<p><a href="https://www.lsky.pro/">兰空图床</a>是一个著名的开源云端相册管理项目。你不仅可以将其作为单独的图床使用，还可以将多种图床整理进去，变成真正意义上的云端相册。具体内容可以参考其<a href="https://docs.lsky.pro/docs/free/v2/">官方文档</a>。</p>
<p>但是：<strong>兰空图床基于 PHP 和数据库，操作较为复杂，因此并不方便在本机部署。</strong></p>
<h4 id="使用-minio">使用 MinIO</h4>
<p><a href="https://min.io/">MinIO</a> 是一个开源的对象存储服务，没错，就是对象存储。</p>
<p><a href="https://min.io/docs/minio/kubernetes/upstream/index.html">这里</a>是 MinIO 的官方文档，不过是全英的，比较难读。可以自行搜索一些教程。</p>
<p>我曾经测试过，在我的 MacBook 上，一个简单的 MinIO server 占的内存近 1G。而且其文件是以 <code>.meta</code>格式存储的。所以我没用这个。不过 MinIO 的界面真的很赞，有专业的对象存储的味道。</p>
<p>PicList 需要安装 MinIO 插件，其配置内容和一般的对象存储很像。</p>
<h4 id="其他方案">其他方案</h4>
<p>包括但不限于 http-server，EasyWebSvr 等，自己探索吧。</p>
<h2 id="局域网图床和自建服务器图床">局域网图床和自建服务器图床</h2>
<p>这个方案相当于将本地图床向外开放，可以在局域网范围内使用，也可以向公网开放，作为真正意义上的图床。</p>
<p>需要有服务器或者 NAS 一类的设备，其方案和上面的 http 本地图床基本相同。由于有专业的环境，部署兰空、MinIO 等项目会方便很多。当然，会有亿点折腾。</p>
<h2 id="结语">结语</h2>
<p>花了好几天，终于把文章写完了。</p>
<p>本文长且杂乱，相比前人丰富的文章，似乎也没太多新的东西。不过这篇文章应该会持续更新或者打补丁，介绍我新的折腾结果。</p>
<p><strong>写到这里，我都快忘记，我为什么要写这篇文章了。</strong></p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>这个说法是不严谨的，因为 <strong>Markdown 并没有事实上的标准语法</strong> 。目前比较通行的 Markdown 语法包括 GitHub-favored Markdown（GFM）和 CommonMark 等。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>我目前使用的 Markdown 编辑器都是这三个，其他编辑器我大都没有亲身测试。目前已知 VS Code 明确不允许引用工作区之外的资源，RemNote 允许使用 file 协议（信息来源：<a href="https://zhuanlan.zhihu.com/p/351229230">RemNote威廉笔记教学016之PDF批注建立知识树超越Marginnote（一）导入与卸载PDF - 知乎 (zhihu.com)</a>）。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>独立博客选什么域名后缀？</title><link>https://chlor.me/choosing-ur-blog-tld/</link><pubDate>Thu, 22 Feb 2024 13:42:13 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/choosing-ur-blog-tld/</guid><category>域名</category><description>本文探讨了不同域名后缀的选择及其背后的意义和适用场景。文章首先回顾了作者与朋友关于选择域名后缀的交流，随后详细介绍了常见的域名后缀如`.com`、`.cn`、`.org`、`.net`、`.me`等的背景、用途及特点。作者还提到了其他一些较为新颖或特定用途的域名后缀，如`.tk`、`.top`、`.xyz`等，并对每种后缀的优缺点进行了简要分析。最后，作者推荐使用`.com`、`.org`、`.net`或`.me`作为个人博客的域名后缀，强调了选择一个合适且具有个人特色的域名的重要性。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>本期内容算是对[[Obsidian+Hugo建站教程：2-博客系统，域名，托管服务，DNS解析]]的一点补充，没什么营养价值，适合茶余饭后就着饼干吃（没错，在码字的时候，我的手边就放着一袋早餐饼干。这种食物蛮有趣的，不贵，没什么特别的味道，但是吃起来却很舒适）。</p>
<h2 id="前言">前言</h2>
<p>前天，我在<a href="https://sicheng.taoooist.org/">嗣檙</a> 的关于页面上看到他说，希望注册一个非 <code>.cn</code> 的域名，但对后缀有点拿不定主意。</p>
<p>当时我留了一段言：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>后缀的话，其实 .com/. org/. net/. me 都可以。. com 最正规，就是可能带点商业气息（？）如果让我根据内容推荐的话，其实 .org 不错，非盈利性组织的后缀，而且一般比 .com 便宜（确信）
个人意见，仅供参考 awa</p>
</blockquote>
<p>昨天就得知他注册了一个 <code>.org</code> 的域名。说实话，有点小开心，毕竟自己的 <del>馊</del> 主意被 adopt 了。</p>
<p>正巧，最近在博主<a href="https://yinji.org/">青山</a>的博客闲逛的时候，发现在他上次换域名的时候的文章中，有一点对域名后缀的看法：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>微信群里大伙在聊 .net 域名，希望能捡个漏。相比于 .com 域名，我其实更喜欢 .net，寓意为“网络”，感觉更符合博客，而 .com 则显得有点商业化。</p>
</blockquote>
<p>原文链接：<a href="https://yinji.org/5030.html">Hello，今是昨非！ | 印记 (yinji.org)</a></p>
<p>我们都希望有一个个性化的域名前缀，让自己的网站富有个人特色，但是我觉得，后缀也是一个值得深思熟虑的因素。所以，就写了这篇小文章，希望为正在挑选域名的老友们提供一点帮助以及乐趣。</p>
<p>当然，如果是富而好礼的老友，那建议把所有感兴趣的域名都注册下来，然后做 301 重定向（doge）。</p>
<h2 id="声明">声明</h2>
<ol>
<li>本文的域名注册量数据来自<a href="https://domainnamestat.com/statistics/tld/others">https://domainnamestat.com/statistics/tld/others</a>，截止至 2024 年 2 月 24 日。</li>
<li>本文的最低价格数据来自<a href="https://nazhumi.com/">哪煮米</a>，截止至 2024 年 2 月 24 日；具体域名价格信息均使用 <code>yoghurtlee.&lt;tld&gt;</code> 作为试探数据，价格来自 <a href="https://dynadot.com/">Dynadot</a> 和<a href="https://wanwang.aliyun.com/domain">阿里云万网</a>，截止至 2024 年 2 月 24 日，为小样本统计，不代表普遍规律。</li>
</ol>
<h2 id="一些常见的博客域名后缀">一些常见的博客域名后缀</h2>
<h3 id="com-后缀"><code>.com</code> 后缀</h3>
<p>如果要问最正规、最权威的域名后缀，那非 <code>.com</code> 莫属。</p>
<p><code>.com</code> 显得商业化的原因可能是因为：这个 TLD 最初就是给商业机构设计的（com 就是 commerce 或者 commercial 的简写），而且现在的商业机构，也大部分会找到一个 <code>.com</code> 作为公司的官网域名，这样给人以更权威的印象。而越来越多的正规商业机构这样做，也更加强了 <code>.com</code> 正规、权威、商业化的印象。</p>
<p>闭合得很好的正反馈，不是吗？（笑）</p>
<p>当然，这并不意味着 <code>.com</code> 就是商业机构的专利。如今，commercial 成了 common，各种项目和网站，都可以用这个 TLD。</p>
<h3 id="cn-后缀"><code>.cn</code> 后缀</h3>
<p><code>.cn</code> 后缀是中国的国家顶级域名后缀，其注册量在所有国家顶级域名中位居榜首，在全部的 TLD 中位列第二。</p>
<p><code>.cn</code> 很大的优势是性价比，一个普通的 <code>.cn</code> 域名价格大概在 30～40r/a，比 <code>.com</code> 便宜了一半；而且 <code>.cn</code> 的正规性也比较强，尤其在中国范围内，获得的 SEO 会比较好。当然，国际化也会比较困难——虽然我们的读者主要还是在中国。</p>
<p>还有一点， <code>.cn</code> 必须在国内的域名注册商处购买，或许是偏见，但是在 IT 服务这块，我对国内的某些厂家们的确没太多好感……</p>
<h3 id="org-后缀"><code>.org</code> 后缀</h3>
<p><code>.org</code> 其实是 organization 的简写，最初用于非营利组织，例如联合国 <a href="https://www.un.org">https://www.un.org</a>，后续也可以用于个人网站或者开源项目，例如 Python <a href="https://www.python.org">https://www.python.org</a> 等。<code>.org</code> 的权威性很强，如果心仪的 <code>.com</code> 被抢注了，那 <code>.org</code> 也是很好的选择。</p>
<p>不过，<code>.org</code> 有一个缺点，必须说明白：<strong>它不能备案</strong>。关于可以 ICP 备案的 TLD，可以参考<a href="https://domain.miit.gov.cn/">这里</a>。</p>
<h3 id="net-后缀"><code>.net</code> 后缀</h3>
<p><code>.net</code>，网络，本来是给提供网络技术服务的网站用的。不过，拿来当个人博客也很不错。</p>
<h3 id="me-后缀"><code>.me</code> 后缀</h3>
<p><code>.me</code> 看起来像是专门为个人设计的，但是这其实最初是黑山共和国（也称为蒙特内哥罗）的国家顶级域名，后来向全球网民开放。</p>
<p>不过，me，我，看起来就很适合注册个人网站。当然，这么想的可不只是我们——目前全球共有 2,179,615 个 <code>.me</code> 域名。</p>
<h3 id="其他后缀">其他后缀</h3>
<p>下面的后缀都是我曾经在个人博客上见过的。这些域名大部分都是新的 TLD，也有国家和地区的顶级域名。</p>
<h4 id="tk-后缀"><code>.tk</code> 后缀</h4>
<p><code>.tk</code> 其实是托克劳的顶级域名（托克劳说起来很复杂，大家可以自行查阅<a href="https://zh.wikipedia.org/wiki/%E6%89%98%E5%85%8B%E5%8A%B3">维基百科相关词条</a>）。这个词和 talk 的简写一样，似乎也是个不错的选择。</p>
<p>而且，这个域名的注册是免费的。所以，这个域名的注册量高得惊人，仅次于 <code>.com</code> 和 <code>.cn</code>，位居世界第三。</p>
<p>只不过，免费有免费的代价，例如动不动就会被收回，例如容易被垃圾网站滥用不利于网站的 SEO（搜索引擎优化）……以及，<strong>如果一个东西来得太容易，那很容易不被珍惜</strong>。</p>
<p>所以，我不建议使用这类免费域名。</p>
<h4 id="top-后缀"><code>.top</code> 后缀</h4>
<p><code>.top</code> 这个后缀，似乎没有什么特别的来历，就是顶级的，顶上的，图个好寓意。</p>
<p>不过 <code>.top</code> 有一点好处：它非常便宜，即使一口气买十年，也不过不到 200r。</p>
<h4 id="xyz-后缀"><code>.xyz</code> 后缀</h4>
<p>世界上最著名的 <code>.xyz</code> 域名，应当是<a href="https://abc.xyz">https://abc.xyz</a>了。它是 Alphabet 公司的域名。</p>
<p>Alphabet，世界五大互联网巨头之一。它以前的名字，叫做 Google。</p>
<p>不过，听说当初的 Alphabet 也想用一个<a href="https://alphabet.com">https://alphabet.com</a>，很可惜，这个域名早就被宝马注册了。没办法，就用了这个。不过，Alphabet，字母表，<code>abc.xyz</code>，倒也挺合适。</p>
<h4 id="blog-后缀"><code>.blog</code> 后缀</h4>
<p>这个不需要解释了，博客。</p>
<p>这里顺便科普个冷知识：blog，其实是 weblog 的缩写，web（网络），log（记录）。感觉，如果哪天小氯一时兴起，想探讨下博客的来历，发展和使命这种大问题，这个科普用在那里更合适。不过，笔本随心，也无所谓了。</p>
<h4 id="co-后缀"><code>.co</code> 后缀</h4>
<p><code>.co</code>，原本是哥伦比亚的国家顶级域名，由于和 <code>.com</code> 长得像，而且简短，也很受欢迎。</p>
<h4 id="moe-后缀"><code>.moe</code> 后缀</h4>
<p>这个后缀的意思似乎是“萌”？比较适合宅圈的老友们。</p>
<h4 id="info-后缀"><code>.info</code> 后缀</h4>
<p><code>.info</code>，信息。不多解释。</p>
<h4 id="io-后缀"><code>.io</code> 后缀</h4>
<p><code>.io</code> 原本是英属印度洋领地的顶级域名，但是由于和 Internet Organization 以及输入/输出（I/O）的简写一样，因此被广泛用于互联网公司等。例如，Typora 的官网<a href="https://typora.io">https://typora.io</a>。</p>
<p>如果你的博客技术性特别强，那么这个后缀比较合适。</p>
<h4 id="link-后缀"><code>.link</code> 后缀</h4>
<p><code>.link</code>，链接。我记得 Dynadot 似乎搞过一个免费送一年 <code>.link</code> 域名的活动？</p>
<h4 id="难以完全叙述的其他域名后缀">难以完全叙述的其他域名后缀</h4>
<p>包括但不限于 <code>.cat</code>，<code>.sb</code>，<code>.cc</code>，<code>.vip</code>（我记得这个域名也非常便宜），<code>.tech</code> 等。</p>
<p>以及，<code>.中国</code> 等。没错，现在已经有中文的域名后缀了。不知道将来，会不会有全中文的域名？（笑）</p>
<h2 id="my-suggestion">My Suggestion</h2>
<p>如果要我说的话，我最推荐的还是 <code>.com</code> 域名。如果你觉得 <code>.com</code> 有点显得商业化，那就使用 <code>.org</code>，<code>.net</code> 或者 <code>.me</code>，<code>.cn</code> 也可以。除此之外的域名，我都不是很推荐用于个人博客。毕竟，现在这种老牌域名的价格都不算很贵，所以，如果遇到喜欢的域名，就赶紧下手吧。（笑）</p>

      ]]></content:encoded></item><item><title>Hugo博客link更改后如何修改Twikoo评论位置</title><link>https://chlor.me/link-modifying-of-twikoo/</link><pubDate>Wed, 21 Feb 2024 10:29:40 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/link-modifying-of-twikoo/</guid><category>Twikoo</category><category>Hugo</category><category>折腾</category><description>本文介绍了如何在更改 Hugo 博客的文章链接后，更新 Twikoo 评论系统以匹配新的链接。文章首先说明了更改链接的必要性和方法，然后详细描述了如何通过 MongoDB CLI 工具导出、修改并重新导入 Twikoo 的评论数据，以确保评论能够正确地与文章关联。作者提供了具体的步骤，包括获取 MongoDB URI、下载并使用 MongoDB CLI 工具进行数据操作。最后，文章还给出了参考资料，供读者进一步了解相关操作。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>本期是一个小事情，就是在 Hugo 博客文章的 link 被修改之后，如何使 Twikoo 评论也跟到正确的位置。</p>
<p>不仅是 Hugo，任何使用 Twikoo 的静态博客都适用这个方法。</p>
<h2 id="前言">前言</h2>
<p>我的博客之前的链接大致都是 <code>https://yoghurtlee.com/posts/&lt;link&gt;</code>，感觉加一个 <code>posts</code> 属实是有点多余。这个好办，改一下 <code>config.toml</code> 就好。</p>
<pre><code class="language-toml">[permalinks]
  # posts = &quot;/posts/:slug/&quot; 这是改之前
  posts = &quot;/:slug/&quot;
</code></pre>
<p>但是再上网站上一看，Twikoo 面板里的评论还在，然而点击查看是 404.</p>
<p>短暂懵了一下后，联想到我从 NotionNext 换到 Hugo 的时候，明明没有做任何迁移，我的 now 页面的评论却还在，我瞬间想到了一种可能：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Twikoo 后台的数据是按照文章链接进行对应的，只要链接不变，文章的评论就在，否则就找不到。</p>
</blockquote>
<p>那只要能修改 Twikoo 后台的数据，就可以完成迁移了。</p>
<h2 id="获取-mongodb-uri">获取 MongoDB URI</h2>
<p>去 Vercel 里找到你的项目，在项目设置-环境变量中找到 <code>MONGODB_URI</code> 把值复制下来备用，它应该具有这样的形式：</p>
<pre><code class="language-txt">mongodb+srv://&lt;某些字符&gt;:&lt;某些字符&gt;@&lt;某些字符&gt;.mongodb.net/&lt;后面的东西&gt;
</code></pre>
<p>把 <code>net/</code> 后面带问号的那一堆删了，我们用不着。</p>
<h2 id="下载-mongodb-cli">下载 MongoDB CLI</h2>
<p>Twikoo 的背后是 MongoDB 数据库。我对操控数据库一窍不通，所幸官方提供了可以操控数据库的 CLI 套件。</p>
<p>由于在 macOS 上尝试之后遇到了不可名状的错误，因此我启动了我的 Windows 备用机（所以，真心推荐每一个喜欢 macOS 的计算机类学生准备一台备用机，指不定什么时候能救命 awa）。</p>
<p>在<a href="https://www.mongodb.com/try/download/database-tools">这里</a>下载相应套件，直接解压就好。</p>
<p>然后进入解压后的文件夹，找到 <code>bin</code> 子文件夹，点进去，会发现一堆二进制文件。</p>
<p>右键-更多-打开终端，把这段命令粘进去（注意，URI 是没有尖括号包裹的，用尖括号只是表示变量的习惯🤣）</p>
<pre><code class="language-bash">./mongoexport --uri &lt;你的URI&gt; --collection comment --type json --out twikoo-comments.json
</code></pre>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p><strong>瘟锌锑逝</strong>
有些教程不会带前面的 <code>./</code>，但是由于我们没有配环境变量，这样会报错。所以我们直接加 <code>./</code>，方便。</p>
</blockquote>
<p>回车执行。一切顺利的话，你应该可以在 <code>bin</code> 文件夹下看到 <code>twikoo_comments.json</code> 文件。</p>
<p>打开这个文件，就可以进行修改了。由于我的需求比较简单，因此使用 VS Code 的查找替换功能，两步就完成了：将 `` 替换为空，将 <code>bulid</code> 替换为 <code>build</code>。如果需求比较复杂，可能需要结合正则表达式进行食用。</p>
<p>改完之后保存，执行这段代码：</p>
<pre><code class="language-bash">./mongoimport --uri &quot;&lt;你的URI&gt;&quot; --collection comment --type json --mode merge --file twikoo-comments.json
</code></pre>
<p>就可以覆盖原本的数据。</p>
<p>将来，如果更改域名或者别的链接修改，都可以照葫芦画瓢地使用。</p>
<p>参考资料：</p>
<ol>
<li><a href="https://www.readfere.com/twikoo_url_modified">静态博客永久链接变更后修改twikoo评论地址 | AppSnitch (readfere.com)</a></li>
<li><a href="https://www.imaegoo.com/2022/twikoo-data-export/">Twikoo 评论数据导出教程 - iMaeGoo's Blog</a></li>
</ol>

      ]]></content:encoded></item><item><title>在Hugo博客中正确渲染多行数学公式</title><link>https://chlor.me/hugo-math-rendering/</link><pubDate>Tue, 20 Feb 2024 15:10:45 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/hugo-math-rendering/</guid><category>折腾</category><category>Hugo</category><category>KaTeX</category><category>博客</category><description>本文介绍了为 Hugo 博客增加基于 KaTeX 的多行数学公式渲染的步骤，包括引入 JavaScript 和修改 Hugo 配置文件等步骤。作者指出，MathJax 能够原生渲染物理和化学公式，而 KaTeX 需要引入扩展包。</description><content:encoded><![CDATA[
        

<div class="my-6 rounded-lg border-l-4 p-4 border-purple-500 bg-purple-50/50 dark:bg-purple-500/10">
    <div class="mb-2 flex items-center gap-2 font-medium pl-2 text-purple-700 dark:text-purple-300">
        <div class="w-5 h-5 i-carbon-star">
        </div>
        <span>Important</span>
    </div>
    <div class="text-foreground/80 dark:text-foreground-dark/80 pl-2">
        <p>本文距离发布已经很久了，在此期间我的数学公式渲染方法出现了变化。我更新了文章的部分内容，使得文章中的方法依然具有基本可用性。在合适的时机我会重写本文。</p>
    </div>
</div>
<p>如果本文的数学公式不渲染，可能是 Swup.js 的问题，刷新页面即可。</p>
<p>—— 2024.11.25</p>
<hr>
<p>各位老友们好，我是 Chlorine。本期可以说是建站教程的一个小番外，也是我迄今为止用时最短的一次折腾。</p>
<h2 id="前言">前言</h2>
<p>作为计算机系的学生，我对于在博客中插入数学公式还是有一定需求的，不仅是技术博客的刚需，有时候对于整活也是必要的。比如：</p>
$$
\begin{cases}
x = \sin t, \\ 
y = \frac{t \cos t}{2}
\end{cases} 
\quad 0 \leq t \leq 2 \pi
$$<p>至于这个参数方程是什么含义，大家可以找个绘图工具，比如 Desmos 或者 Geogebra 试一下（doge）。</p>
<p>但是，就在我昨天发布第一条数学笔记的时候，我发现我的 KaTeX 迟迟无法正确渲染一些公式，例如 <code>\left\{</code>。刚开始我没太在意，随便试了几种方法，改正了就完事了。</p>
<p>但是今天，在我打出上面那串参数方程的时候，我突然发现，换行符 <code>\\</code> 没生效。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>我不信邪，刚刚试了一下这个矩阵式的公式块：</p>
$$
\mathbf{V}_1 \times \mathbf{V}_2 =  
\begin{vmatrix}  
  \mathbf{i}& \mathbf{j}& \mathbf{k} \\[0.4em]
  \frac{\partial X}{\partial u}& \frac{\partial Y}{\partial u}& 0 \\[0.4em] 
  \frac{\partial X}{\partial v}& \frac{\partial Y}{\partial v}& 0 \\[0.4em] 
\end{vmatrix}
$$<p>发现也没正确渲染。</p>
<p>这可麻烦了，毕竟这学期的 VA（2）和高代（高等线性代数选讲），上学期还没填的线代可都靠着多行公式环境活呢。</p>
<p>问了 GitHub Copilot 和 Kimi  AI，都没得到什么有用的信息，遂一头问号大如斗，问号随风满地走。</p>
<p>再回去看那串没被渲染的公式，突然发现了奇怪的东西：</p>
<p><strong>这换行符咋就剩下一个反斜杠了？</strong></p>
<p>众所周知，反斜杠在 Markdown 中是转义符，双反斜杠在单纯的 Markdown 环境里会被解读成单反斜杠。会不会 KaTeX 和 Hugo 内置的 goldmark 渲染器冲突了？毕竟，我的 KaTeX 是自己加的，与原本的工程冲突也很正常。</p>
<p>于是前往收集信息，最终找到了解决方案。</p>
<h2 id="引入-katex">引入 KaTeX</h2>
<p>如果你已经引入了 KaTeX，请跳过这一部分。</p>
<p>众所周知，Markdown 中输入数学公式靠的是 LaTeX，而 <a href="https://katex.org/">KaTeX</a> 是一个轻量化的 LaTeX 公式渲染器。KaTeX 的本质就是一堆 js 和 CSS 文件，因此用 CDN 引入就好了。</p>
<p>在 <code>themes/&lt;你的主题&gt;/layouts/partials/head.html</code> 中加入这段代码即可：</p>
<pre><code class="language-html">{{/* KaTeX */}}
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdmirror.com/npm/katex@0.16.11/dist/katex.min.css&quot; /&gt;
&lt;script defer src=&quot;https://cdn.jsdmirror.com/npm/katex@0.16.11/dist/katex.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;script defer src=&quot;https://cdn.jsdmirror.com/npm/katex@0.16.11/dist/contrib/auto-render.min.js&quot; crossorigin=&quot;anonymous&quot;
  onload=&quot;renderMathInElement(document.body, {
          delimiters: [
            { left: '$$', right: '$$', display: true },
            { left: '$', right: '$', display: false }
          ],
          throwOnError: false
        });&quot;&gt;&lt;/script&gt;
</code></pre>
<p>这里的 CDN 可以替换，例如 jsDelivr 主站、Gcore jsDelivr 等。</p>
<h2 id="设置-passthrough-插件">设置 passthrough 插件</h2>
<p>goldmark 有一个叫 passthrough 的插件，可以识别数学公式的定界符，使得多行公式的双斜杠免遭毒手。</p>
<p>在 <code>config.toml</code> 文件的 <code>markup</code> 下添加这段代码：</p>
<pre><code class="language-toml">[markup.goldmark.extensions.passthrough]
      enable = true
      delimiters.block = [
        [&quot;\\[&quot;, &quot;\\]&quot;],
        [&quot;$$&quot;, &quot;$$&quot;]
      ]
      delimiters.inline = [
        [&quot;\\(&quot;, &quot;\\)&quot;],
        [&quot;$&quot;, &quot;$&quot;]
      ]
</code></pre>
<p>如果你使用的是 <code>config.yaml</code>，那么就添加：</p>
<pre><code class="language-yaml">markup:
  goldmark:
    extensions:
      passthrough:
        delimiters:
          block:
          - - \[
            - \]
          - - $$
            - $$
          inline:
          - - \(
            - \)
          - - $
            - $
        enable: true

</code></pre>
<p>然后就可以正确进行渲染了~</p>
<h2 id="ps">PS</h2>
<ol>
<li>Hugo 官方推荐的方案与这里有所不同，如果你希望能使用 front matter 来控制渲染与否，可以参考<a href="https://gohugo.io/content-management/mathematics/">这里</a>。</li>
<li>如果你有渲染物理/化学公式的需求，MathJax 会更好。KaTeX 需要再引入一些扩展包，我没那个需求，就不整了。</li>
</ol>
<p>下面是一个物理公式的示例：</p>
$$
d \mathord{ \buildrel{ \lower3pt \hbox{$ \scriptscriptstyle \rightharpoonup$}} \over B} = \frac{{{ \mu _0}}}{{4 \pi }} \frac{{Idl \times \mathord{ \buildrel{ \lower3pt \hbox{$ \scriptscriptstyle \rightharpoonup$}} \over r} }}{{{r^3}}} =  \frac{{{ \mu _0}}}{{4 \pi }} \frac{{Idl \sin \theta }}{{{r^2}}}
$$<p>下面是一个化学公式的示例：</p>
$$
\ce{Zn^2+  <=>[+ 2OH-][+ 2H+]  $\underset{\text{amphoteres Hydroxid}}{\ce{Zn(OH)2 v}}$  <=>[+ 2OH-][+ 2H+]  $\underset{\text{Hydroxozikat}}{\ce{[Zn(OH)4]^2-}}$}
$$<p>其真实效果应该是：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240220151045.webp" alt="使用Obsidian进行的渲染" title="使用Obsidian进行的渲染" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        使用Obsidian进行的渲染
    </figcaption>
    
</figure></p>
<ol start="3">
<li>参考资料：<a href="https://blog.f1nley.xyz/post/hugo-math-support/">Hugo 数学公式支持 | Finley's Blog (f1nley.xyz)</a></li>
</ol>

      ]]></content:encoded></item><item><title>Obsidian+Hugo建站教程：2-博客系统，域名，托管服务，DNS解析</title><link>https://chlor.me/how-to-build-a-blog-2/</link><pubDate>Sun, 18 Feb 2024 15:30:14 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/how-to-build-a-blog-2/</guid><category>博客</category><category>教程</category><category>Obsidian</category><description>Obsidian + Hugo 建站教程——各种静态及动态博客系统简介，域名简介以及建议，Vercel 和 Netlify 等托管服务简介，DNS 解析介绍。</description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。本期继续我们的数字博物馆搭建之旅。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>本期的内容技术性比较强，大家可以不必完全理解，会用即可。我本身对这些概念也不算熟悉。</p>
</blockquote>
<h2 id="博客系统">博客系统</h2>
<p>随着我们的展品准备完成，我们需要博物馆的 staff 了——有人向来宾们讲解展品的意义，有人负责装潢收拾博物馆的外观和卫生，有人负责与博物馆场地进行对接，等等。</p>
<p>而在我们的独立博客中，负责这些活计的就是独立博客系统。</p>
<p>独立博客系统是一种项目框架，它可以将我们的博客文章转化为可以在浏览器上展示的 HTML 网页，同时将网站渲染为我们想要的效果。</p>
<h3 id="静态博客和动态博客">静态博客和动态博客</h3>
<p>独立博客框架主要可以分为两种：静态博客和动态博客。简单来说，静态博客会在服务器端根据我们当前的内容生成相应的 HTML 文件，用户需要访问时直接将现成的 HTML 发送到用户端；而动态博客通常基于数据库和服务器端脚本处理用户请求，然后在服务器动态生成网页内容。</p>
<p>这么说比较绕，我用我做过的一个上机报告举个例子吧。</p>
<p>我们做过一个上机作业，大致内容是写一个 C++ 程序，根据用户输入的年份（在一定范围内）生成一份日历并输出。</p>
<p>当时我就想到了两种方案：</p>
<ol>
<li>先写一个生成程序，把这个范围内的所有日历都生成好并储存，等用户输入时直接把对应的日历输出。</li>
<li>直接接受用户输入，根据输入的参数现场生成日历并输出。</li>
</ol>
<p>不十分严谨地说，第一种方案类似于静态博客，第二种类似于动态博客。</p>
<p>静态博客和动态博客各有优缺点，我们简单列一下吧。</p>
<p>静态博客的优点：</p>
<ul>
<li>文章均以 Markdown 文件存储，对于习惯 Markdown 的博主来说迁移成本几乎为 0。</li>
<li>可以免费托管在静态网站托管服务上，节省了服务器成本。</li>
<li>文章不多的时候性能较好。</li>
</ul>
<p>静态博客的缺点：</p>
<ul>
<li>交互性比较差，评论等功能配置起来麻烦。</li>
<li>需要学习一些 Git 等命令，每次更新内容都需要重新生成静态文件并部署到服务器。</li>
</ul>
<p>动态博客的优点：</p>
<ul>
<li>一般具有极其丰富的插件和主题，可定制性一般较强。</li>
<li>一般有后端（管理面板），操作方便。</li>
<li>交互性好，评论、登录等配置起来难度较低。</li>
</ul>
<p>动态博客的缺点：</p>
<ul>
<li>文章存储在数据库中，迁移不方便。</li>
<li>需要服务器，成本较高，且服务器可能成为制约性能的瓶颈（一般不至于）。</li>
</ul>
<h3 id="框架推荐静态博客">框架推荐——静态博客</h3>
<h4 id="hexo">Hexo</h4>
<p>官方网站： <a href="https://hexo.io/">https://hexo.io/</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/hexojs/hexo/">https://github.com/hexojs/hexo/</a></p>
<p>一个基于 Node. js 的快速、简洁且高效的静态博客框架，在静态博客爱好者中很受欢迎。不过我个人对其了解不多，不敢多言。</p>
<h4 id="hugo">Hugo</h4>
<p>官方网站： <a href="https://gohugo.io/">https://gohugo.io/</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/gohugoio/hugo/">https://github.com/gohugoio/hugo/</a></p>
<p>一个基于 Go 语言的静态博客框架，以速度快著称。主题很多，同时支持使用 shortcode（简码）进行高度个人化的定制。也是我们下面系列的主角。</p>
<h4 id="notionnext">NotionNext</h4>
<p>官方网站： <a href="https://tangly1024.com">https://tangly1024.com</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/tangly1024/notionnext/">https://github.com/tangly1024/notionnext/</a></p>
<p>一个基于 Notion 的建站服务，来自大佬 <a href="https://blog.tangly1024.com">tangly</a>，也是我之前使用的系统。</p>
<p>拥有极为美观的界面、多种主题和丰富的插件，同时由于 Notion 的强大，可定制性也比较高，而且<a href="https://docs.tangly1024.com/">说明文档</a>详细到令人落泪，极度 beginner-friendly。</p>
<p>对于喜欢用 Notion 的老友们，这绝对是个福音。</p>
<h4 id="gridea">Gridea</h4>
<p>官方网站： <a href="https://open.gridea.dev/">https://open.gridea.dev/</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/getgridea/gridea/">https://github.com/getgridea/gridea/</a></p>
<p>这是我最初使用的框架。一个小而美的静态博客系统，有一个 user- friendly 的客户端。不过很久不更新了。</p>
<h4 id="valaxy">Valaxy</h4>
<p>官方网站： <a href="https://valaxy.site/">https://valaxy.site/</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/YunYouJun/valaxy">https://github.com/YunYouJun/valaxy</a></p>
<p>大神<a href="https://yunyoujun.cn">云游君</a>的作品，基于 Vite 和 Vue 构建，看着颜值相当高，Markdown 支持也很完善。同时支持热重载，本地开发的时候很美好。</p>
<p>这是我很感兴趣的框架之一，将来可能搞个镜像站。</p>
<h4 id="vanblog">Vanblog</h4>
<p>官方网站： <a href="https://vanblog.mereith.com/">https://vanblog.mereith.com/</a></p>
<p>GitHub 仓库地址： <a href="https://github.com/Mereithhh/vanblog">https://github.com/Mereithhh/vanblog</a></p>
<p>大神 Mereith 的作品，响应速度快，功能极其完善，甚至连图床和站点统计都给你准备好了。</p>
<p>说实话，我感觉 Vanblog 更像是一个动态博客：它有后端，有账号系统，部署也必须要服务器。</p>
<h4 id="其他">其他</h4>
<p>下面的框架也都有不小的名声，但是我没有详细了解过。</p>
<ul>
<li><a href="https://www.jekyll.com.cn/">Jekyll</a></li>
<li><a href="https://vuepress.vuejs.org/">VuePress</a></li>
<li><a href="https://getpelican.com/">Pelican</a></li>
<li><a href="https://vitepress.dev/">VitePress</a></li>
<li><a href="https://docsify.js.org/">Docsify</a></li>
<li>……</li>
</ul>
<h3 id="框架推荐动态博客">框架推荐——动态博客</h3>
<p>动态博客我了解的属实不多，因此只介绍两个有名的吧。</p>
<h4 id="wordpress">Wordpress</h4>
<p>中文名“文派”，官方网站： <a href="https://wordpress.com">https://wordpress.com</a> （商业）， <a href="https://wordpress.org">https://wordpress.org</a> （自托管）</p>
<p>WP 在动态博客界德隆望尊，被誉为“宇宙第一独立博客系统”，拥有极为完善的社区生态、丰富的插件和主题。</p>
<h4 id="ghost">Ghost</h4>
<p>官方网站： <a href="https://ghost.org/">https://ghost.org/</a></p>
<p>一款基于 Node. js 和 MySql 数据库的个人博客系统，非常简洁好看。</p>
<p>在下面的教程中，我会使用 Hugo 作为示例。至于为什么是 Hugo？嗯，这个以后再说。</p>
<h2 id="网页托管服务">网页托管服务</h2>
<p>好的，展品有了，staff 齐了，那是不是应该有个场地了？</p>
<p>对于动态博客，我们需要使用服务器（server）。服务器是一个很复杂的东西，你可以理解为：<strong>服务器就是一台能接受外来访问的机器</strong>。从这个角度来看，任何电子产品（有形的或者无形的）都可以作为服务器。</p>
<p>那就有朋友要问了：那我直接拿自己的电脑/手机/……当服务器不就行了？为什么还要专门去买服务器？</p>
<p>仔细想一想，服务器要有哪些必备的素质？</p>
<ul>
<li>7*24 运行的能力：毕竟你这博物馆是要全天候开放的。</li>
<li>处理大量访问请求的能力。</li>
<li>独立的公网 IP: 这点比较复杂，一会再讲。</li>
</ul>
<p>而我们自己的设备大部分没有这样的能力，就算有也需要非常复杂的折腾，其机会成本极高。考虑到本文的受众，这种方法显然是不合适的。所以如果需要，还是推荐买个服务器，特别是云服务器。和实体服务器相比，云服务器优点还是蛮多的：</p>
<ul>
<li>成本相对较低：现在云服务器的价格已经很喜人了，腾讯云的学生机一年也就 100 多（由此引申出了我计量货币的一种方式，1 年服务器 = 112r）。By contrast，孙哥自己搭的实体服务器，在发挥图吧的各种省钱小妙招之后依然花费上千，更别提各种折腾。所以还是那句话：如果只是想建站，自己搭实在不值。</li>
<li>有独立的公网 IP：这一点留到后面 IP 的部分讲。你只需要知道，我们自己的局域网 （内网）的设备在外网访问是很费劲的。</li>
<li>稳定可靠：这点听上去有点离奇，不过仔细想想：目前的大厂，像国外的 Microsoft Azure，Amazon，国内的阿里云、腾讯云、华为云之类的，提供的云计算服务的稳定性其实比大部分个人搭建的服务器更高。</li>
</ul>
<p>有点跑题了，毕竟我们讲的是静态博客。静态博客当然可以部署在服务器上，但是属实是鸭子睁眼——duck 不必（闭）（通辽歇后语 1/1）。因为我们早就有更方便而且免费的服务了，那就是静态网页托管。</p>
<p>下面列出了一些常见的静态网页托管服务：</p>
<table>
  <thead>
      <tr>
          <th>名称</th>
          <th>pros</th>
          <th>cons</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Vercel（原名 ZEIT）</td>
          <td>- 最广为使用、最受好评的静态网页托管平台（小样本统计）<code>&lt;br&gt;</code>- 服务功能齐全，内置网页模板、自动更新部署、自定义域名、SSL 证书等一样不少</td>
          <td>- 全英文界面，有一定阅读门槛 <code>&lt;br&gt;</code>- 在国内访问有时候会被墙，需要绑定自定义域名加快速度</td>
      </tr>
      <tr>
          <td>Netlify</td>
          <td>- 和 Vercel 功能相似，具有较为充足的免费额度 <code>&lt;br&gt;</code>- 在国内速度比 Vercel 稳定</td>
          <td>似乎会抽风，当然可能是当初我没用对（见<a href="/netlify-not-working">记Netlify DNS抽风的处理</a>）</td>
      </tr>
      <tr>
          <td>GitHub Pages</td>
          <td>- 和 GitHub 高度集成 <code>&lt;br&gt;</code>- 自带一个 <code>&lt;你的用户名&gt;.github.io</code> 域名</td>
          <td>- 只能部署一个项目 <code>&lt;br&gt;</code>- 国内访问慢</td>
      </tr>
      <tr>
          <td>Gitee Pages</td>
          <td>- 和 GitHub Page 很相似 <code>&lt;br&gt;</code>- 国内平台，中文友好，国内速度快</td>
          <td>- 仓库容量限制较紧 <code>&lt;br&gt;</code>- 国际化上可能有一点困难（我猜的）</td>
      </tr>
  </tbody>
</table>
<p>此外还有 Zeabur，腾讯 Coding Pages，CloudFlare Pages 等，不做介绍了。</p>
<p>我们下面会以 Vercel 为例进行讲解。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>如果你想使用 GitHub pages 或者 Gitee pages 来省一个域名的话，那么后续的 Twikoo 评论等推荐使用 Netlify 进行部署。</p>
</blockquote>
<h3 id="vercel-部署项目流程">Vercel 部署项目流程</h3>
<p>我们先来简单科普一下，怎么在 Vercel 上部署项目。</p>
<h4 id="注册账号">注册账号</h4>
<p><a href="https://www.vercel.com">这里</a>是 Vercel 的官网，我们先注册一个账号，选择用 GitHub 登录，计划选择免费计划（hobby）即可。后面可能会将 Vercel 的 application 整合到你的 GitHub 里面。访问权限推荐使用限制访问需要部署的仓库。后续需要访问其他仓库的时候，只需要在部署选择仓库时，随便打几个字母进行搜索，然后点击详情页的配置 GitHub 即可。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240218153014.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h4 id="部署新的项目">部署新的项目</h4>
<p>注册完成以后，我们会进入你的项目列表，点击右上角的 add new，下拉菜单选择 project。</p>
<p>进入后，选择需要导入的 GitHub 库，如果没有其他部署要求，直接点击 deploy 即可。</p>
<p>然后耐心等待，出现 Congratulations 页面就算成功了。</p>
<h4 id="环境变量">环境变量</h4>
<p>环境变量这个事说起来很复杂，就理解为给项目提供的配置信息就可以了。环境变量的添加在 Environment Variables 下拉栏中，直接填进需要的名称和值就好。</p>
<p>对于已经部署的项目，可以在 Settings-Environment Variables 中添加新的环境变量，然后在 Deployments 中选择最新一次部署右侧的三个点，进行 redeploy（重部署）即可生效。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240218153014.png" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<h2 id="ip-地址域名和-dns-解析">IP 地址，域名和 DNS 解析</h2>
<h3 id="ip-地址">IP 地址</h3>
<p>OK，场地有了，大家上哪里去找你呢？</p>
<p>在现实世界中，每一个地方都有地址；在网络世界中，地方被服务器、设备等代替，而与之相关的概念就是 IP 地址。</p>
<p>关于 IP 地址大家不需要了解很多，只科普一个问题：公网 IP 和内网 IP。公网 IP 指的是可以在网络任何位置访问的 IP，是公开的；而内网 IP 只能在内网 （比如局域网）中访问。举个栗子：如果我的网站的 IP 在我家的局域网里，如果我在外面想访问这个 IP，那可就难喽，还得搞内网穿透云云。这就好比你的房子外面有一圈围墙，别人进不了。这墙不是你建造的，是地产开发商 （网络服务商，比如联通和移动）建造的。当然，你可以去找服务商，让他们帮你开个门 （给你分配一个公网 IP）, 这个我没试过，不过据说也挺麻烦。这也是上面我建议，买服务器最好还是用大厂的云服务器。</p>
<p>此外还有一个概念叫“端口”，代表服务器、设备分发信息的出口，可以理解为一个街区的不同建筑或者一座楼的不同层这种具体地址。</p>
<h3 id="域名">域名</h3>
<p>其实有了 IP 之后，理论上我们就可以通过 IP+端口，在导航（浏览器的地址栏）中直接输入这串地址进行访问了。</p>
<p>那域名又是什么鬼？为什么我们平时很少直接输入 IP+端口访问网站？</p>
<p>好，想象你想去一个地方，你接收到的地址是：39°59'59&quot;N，116°19'35&quot;E.</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/emoji/EMJ-confused.webp" alt="黑人问号.webp" title="黑人问号.webp" 
        class="mx-auto rounded-lg block" loading="lazy" width="500"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        黑人问号.webp
    </figcaption>
    
</figure></p>
<p>但假设你接到的是：</p>
<p>中华人民共和国北京市海淀区双清路 30 号清华大学</p>
<p>这是不是就好多了 <del>(虽然给了这个我还是找不到)</del>？而且也更便于记忆。</p>
<p>IP 和域名的关系就类似于这样. IP 一般都是: xxx. xx. xxx. xx 这一串数字，而域名一般是一串自然语言的字符，比如 <a href="https://www.google.com">https://www.google.com</a> 。这样不仅易于记忆，而且更有标识性。</p>
<p>域名是有层级的，顶级域名（TLD）是指具有“网站名称+顶级域名”后缀形式的域名，而二级域名 (SLD)就是具有 &ldquo;网站名称+顶级域名+顶级域名后缀&quot;形式的域名，比如 <code>xxx.github.io</code>，再比如你清的官方网站 <a href="https://www.tsinghua.edu.cn/">https://www.tsinghua.edu.cn/</a> 。<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h4 id="域名后缀推荐">域名后缀推荐</h4>
<p>下面是一些常见的博客域名后缀：<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<table>
  <thead>
      <tr>
          <th>名称</th>
          <th>pros</th>
          <th>cons</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Vercel（原名 ZEIT）</td>
          <td>最广为使用、最受好评的静态网页托管平台（小样本统计）；服务功能齐全，内置网页模板、自动更新部署、自定义域名、SSL 证书等一样不少</td>
          <td>全英文界面，有一定阅读门槛；在国内访问有时候会被墙，需要绑定自定义域名加快速度</td>
      </tr>
      <tr>
          <td>Netlify</td>
          <td>和 Vercel 功能相似，具有较为充足的免费额度；在国内速度比 Vercel 稳定</td>
          <td>似乎会抽风，当然可能是当初我没用对。</td>
      </tr>
      <tr>
          <td>GitHub Pages</td>
          <td>和 GitHub 高度集成；自带一个 <code>&lt;你的用户名&gt;.github.io</code> 域名</td>
          <td>只能部署一个项目；国内访问慢</td>
      </tr>
      <tr>
          <td>Gitee Pages（已停止服务）</td>
          <td>和 GitHub Page 很相似；国内平台，中文友好，国内速度快</td>
          <td>仓库容量限制较紧；国际化上可能有一点困难（我猜的）</td>
      </tr>
  </tbody>
</table>
<p>综合来看，我还是推荐 <code>.com</code> 域名，其次是 <code>.org</code> 和 <code>.me</code>。我个人的域名是 <code>yoghurtlee.com</code>。</p>
<p>购买域名可以在国内的域名注册商处购买，例如阿里云、腾讯云、华为云等；也可以在国外的 Dynadot、Namesilo、GoDaddy 购买。如果你有能支付 USD 的账户，可以用<a href="https://nazhumi.com/">哪煮米</a>等比价网站找一个最合算的网站。</p>
<p>我个人用的是 Dynadot，支持中文和支付宝，价格还算比较合理，WHOIS protection（防止他人查到你购买时的隐私信息）等服务也都有。</p>
<p><a href="https://www.dynadot.com/zh">这里</a>是 Dynadot 的中文官网，买域名的过程我就不赘述了。</p>
<p>此外</p>
<p>顺便放一个查域名时的逆天彩蛋：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240218153014-1.webp" alt="都够买套房了（）" title="都够买套房了（）" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
    <figcaption class="mt-3 text-center text-sm text-muted-foreground/70 dark:text-muted-foreground-dark/70">
        都够买套房了（）
    </figcaption>
    
</figure></p>
<h4 id="备案">备案</h4>
<p>我们常常听到备案这个词。备案是个很广泛的概念，主要包括网站备案，域名备案，ICP 备案等。我们通常说的都是 ICP 备案。</p>
<p>ICP 备案是个很复杂的问题，但是如果使用我推荐的配置，那我们就可以省去备案的麻烦了，因为 Vercel，Netlify，CloudFlare 这些都是国外的企业。</p>
<h2 id="dns-解析服务">DNS 解析服务</h2>
<p>在现实生活中，经纬度和自然语言地址的绑定依赖于约定俗成的规则，而在互联网中则依赖于一种特殊的互联网服务——DNS（Domain Name System，域名系统）解析服务。</p>
<p>关于 DNS 的具体知识我们不多介绍，大家知道这玩意必须得有就完事了。</p>
<p>大部分域名注册商都会提供免费的 DNS 解析服务，但是我更推荐大家使用一个第三方服务—— <a href="https://www.cloudflare.com">CloudFlare</a>。</p>
<p>Cloudflare 是一家提供全球性网络安全和性能优化服务的科技公司，在互联网服务等领域处于世界领先地位。CloudFlare 提供的 DNS 解析服务非常优秀，更可贵的是这项服务有免费计划，对个人博客来说足足够用。</p>
<p>（此外，CloudFlare 还为站长和开发者们提供了大量的免费服务，</p>
<p>注册账号之后，进入 CloudFlare 的仪表板（dashboard）界面，在左侧选择网站，点击右侧的添加站点，输入你的域名。</p>
<p>然后会出现一个“更改名称服务器”的提示，把那两串字符复制下来，回到你的域名注册商（我还是以 Dynadot 为例），在账户界面点击我的域名-管理域名，在需要更改的域名那一栏中点击 DNS 设置。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240218153014-2.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>然后在“服务器”下拉选项中，去掉 Dynadot 默认的域名解析服务器（我记得是有的），选择输入新的名称服务器，将你复制的那两个地址填进去，保存。</p>
<p>然后等一段时间，当 CloudFlare 的仪表板中显示“有效”的时候，就说明域名已经成功被托管到 cf 上了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240218153014-3.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>一定一定要把所有 CloudFlare DNS 的那个 CDN（橙色云朵）关掉！</p>
</blockquote>
<h3 id="a-记录和-cname-记录">A 记录和 CNAME 记录</h3>
<p>这是两种 DNS 记录。简单来说 A 记录就是把域名指向 IP 地址，而 CNAME 记录主要是把一个域名指向另一个域名。</p>
<p>在我们的建站过程中 A 记录一般只需要添加一个（指向 Vercel），CNAME 则一般是用于分发二级域名的。</p>
<p>关于这两种记录的设置可以参考 <a href="https://docs.tangly1024.com/article/vercel-domain">Vercel绑定自定义域名 | NotionNext文档 (tangly1024.com)</a>。尽管说和我们的项目不同，但是方法基本一样（打字真的太累了 QAQ）。</p>
<p>终于写完了，手都要敲麻了 QAQ。</p>
<p>下一期（主体步骤）可能要鸽不短的时间了，因为我想给大家做个开箱即用的库，可能得等到新电脑到了才方便点。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>www 是一个特殊的二级域名 ，代表万维网（world wide web）标准网页。由于互联网发展史上的一些习惯，<code>www.example.com</code> 和 <code>example.com</code> 通常被视为紧密关联的一对域名。例如，<code>google.com</code> 会自动跳转到 <code>www.google.com</code>，而 <code>www.yoghurtlee.com</code> 被我设置为跳转到 <code>yoghurtlee.com</code>。因此，这里给出的清华的域名严格来说是一个<strong>三级域名</strong>。此外，开头的 <code>https://</code> 严格来说不是域名的一部分，它代表网站使用了 SSL/TLS 加密协议，which we will discuss later。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>以上主要价格数据来自 Dynadot，<code>.cn</code> 域名价格来自腾讯云，阿里云和华为云。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

      ]]></content:encoded></item><item><title>Obsidian+Hugo建站教程：1-Markdown，Obsidian与图床</title><link>https://chlor.me/how-to-build-a-blog-1/</link><pubDate>Fri, 16 Feb 2024 20:28:25 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/how-to-build-a-blog-1/</guid><category>博客</category><category>Obsidian</category><category>教程</category><description>Obsidian + Hugo 建站教程——Markdown 语法介绍，Obsidian 配置，使用缤纷云对象存储搭建图床。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/how-to-build-a-blog-1-cover.webp" alt="Obsidian&#43;Hugo建站教程：1-Markdown，Obsidian与图床" />
        </figure>
        <p>各位老友好啊，我是 Chlorine。本期开始，我们进入独立博客建站之旅。</p>
<h2 id="markdown-与-obsidian">Markdown 与 Obsidian</h2>
<p>我在 <a href="/Obsidian+Hugo%E5%BB%BA%E7%AB%99%E6%95%99%E7%A8%8B%EF%BC%9A0-%E5%89%8D%E8%A8%80.md">上一期</a> 中曾经说过，搭建博客就像是搭建一座数字博物馆。博物馆中最重要的东西，自然就是展品了。对于我们的博客，展品就是我们的文章。</p>
<p>关于博客文章怎么写、写什么的问题，不是三言两语就能说清楚的，每一位独立博客的博主也都有各自见仁见智的想法。这里我们只讨论一个问题：<strong>用什么写</strong>。</p>
<p>能找到这里的朋友，应该至少都对 Markdown（简称 md）有一定的了解（大概率已经能熟练使用 Markdown 了）。不过为了完整，我们还是简单介绍一下 Markdown。</p>
<p>搬运 <a href="https://zh.wikipedia.org/wiki/Markdown">Wiki</a>：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者 HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
</blockquote>
<p>说白了，Markdown 就是一种使用特殊记号对文本进行样式标记（给文本赋予特定的样式，例如斜体、粗体等）的语言。</p>
<p>下面的优点由 Kimi AI 进行概括总结：</p>
<ol>
<li><strong>易读性</strong>：Markdown 的语法简单直观，即使没有编程背景的用户也能快速理解和使用。它的设计哲学是“所见即所得”，即最终的输出格式在编辑时就能直观地看到。</li>
<li><strong>易写性</strong>：Markdown 的语法规则很少，这使得编写文档变得快速且不繁琐。它避免了传统 HTML 的复杂标签，使得内容创作者可以专注于内容本身，而不是格式。</li>
<li><strong>跨平台兼容性</strong>：Markdown 文件可以在多种平台和应用程序中使用，包括 GitHub、Reddit、Stack Overflow 等，这使得内容可以在不同的环境中保持一致性。</li>
<li><strong>可扩展性</strong>：虽然 Markdown 本身是固定的，但它可以通过扩展插件或工具链来增加额外的功能，如表格、脚注、数学公式等。</li>
<li><strong>版本控制友好</strong>：Markdown 文件通常是纯文本格式，这使得它们非常适合版本控制系统（如 Git），可以轻松地追踪文档的变更历史。</li>
<li><strong>转换灵活性</strong>：Markdown 文件可以轻松转换为 HTML、PDF、Word 等其他格式，这为内容的发布和分享提供了便利。</li>
<li><strong>社区支持</strong>：由于 Markdown 的流行，有许多工具和编辑器支持 Markdown，如 Typora、Mark Text、Visual Studio Code 等，这些工具提供了丰富的功能和良好的用户体验。</li>
<li><strong>适合快速草稿和笔记</strong>：Markdown 的简洁性使得它成为快速记录想法和草稿的理想选择，尤其是在需要快速整理思路时。</li>
<li><strong>减少视觉干扰</strong>：Markdown 的编辑器通常提供简洁的界面，减少了视觉干扰，有助于提高写作效率。</li>
<li><strong>易于维护</strong>：由于 Markdown 文件是纯文本，它们不需要特定的软件来打开，也不需要担心文件格式的兼容性问题。</li>
</ol>
<p>后面我们会讲到，我们的博客文章需要借助博客框架转换为可展示的 HTML 页面，借助 Git 进行版本控制和提交。那很明显，用 Markdown 再合适不过了。</p>
<p>如果你想快速入门 Markdown，可以参考以下资料：</p>
<ol>
<li><a href="https://markdown.com.cn/">Markdown 官方教程</a></li>
<li><a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程 | 菜鸟教程 (runoob.com)</a></li>
<li><a href="https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">基本撰写和格式语法 - GitHub 文档</a></li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/MarkDown%E8%B6%85%E7%BA%A7%E6%95%99%E7%A8%8B+by+%E6%88%90%E9%9B%99%E9%86%AC">MarkDown超级教程 by 成雙醬 - Obsidian中文教程 - Obsidian Publish</a></li>
</ol>
<p>注意，由于我们后续要使用 Hugo 作为框架，我强烈推荐在写作时严格遵循 GitHub- favored Markdown（GFM）格式标准。</p>
<p>言归正传。既然要用 Markdown 写文章，那就需要一个称手的编辑器。市面上的 md 编辑器极多，代表如 Obsidian、Typora、VS Code（是的，你用来写代码的 VSC 可以当做 Markdown 编辑器，毕竟人家是 code editor 而不是 IDE）等。这里我们重点讲 Obsidian。</p>
<p><a href="https://obsidian.md">Obsidian</a>，中文名为“黑曜石”，是一款免费的跨平台笔记软件，以其完善的 Markdown 支持、双链、关系图谱、本地化存储、强大的可扩展性、良好的社区生态和多样的主题等受到广泛好评。Obsidian 完善的语法支持和丰富的插件会给我们后续的写作带来极大的便利。</p>
<p>能找到这篇文章，相信多少也对 Obsidian 有了解。如果不是，那我强烈推荐你尝试一下这款笔记神器。以下是一些教程：</p>
<ol>
<li><a href="https://space.bilibili.com/443605967?spm_id_from=333.337.0.0">清单控沙牛的个人空间-清单控沙牛个人主页-哔哩哔哩视频 (bilibili.com)</a></li>
<li><a href="https://publish.obsidian.md/help-zh/%E7%94%B1%E6%AD%A4%E5%BC%80%E5%A7%8B">由此开始 - Obsidian 中文帮助 - Obsidian Publish</a></li>
<li><a href="https://forum-zh.obsidian.md/t/topic/3222">Ob新手入门必读——常见Q&amp;A（持续建设ing&hellip;请勿在此回复及提问） - 疑问解答 - Obsidian 中文论坛</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/428519519">想一小时上手obsidian？这一篇就够了。【玩转Obsidian的保姆级教程】 - 知乎 (zhihu.com)</a></li>
</ol>
<h2 id="图床的搭建">图床的搭建</h2>
<p>OK，现在我们似乎已经可以开始进行愉快的创作了，但是让我们先行思考一个问题。</p>
<p>我们知道 Markdown 是纯文本语言，那我们怎么插入图片呢？</p>
<p>事实上，Markdown 的图片是通过链接引用的形式插入的，典型的链接格式为 <code>![图片注释](图片链接，本地或者网络)</code>。Obsidian 还支持在方括号内的注释后面添加 <code>|图片大小</code> 来调整宽度。</p>
<p>那看来我们只需要将图片放在适当的位置进行引用就好了。问题是：<strong>放在哪呢？</strong></p>
<p>如果你的图片不多，你可以将其放置于静态资源文件夹下（后面会讲）。但是我更推荐另一种方式：使用图床。</p>
<p>简单点说，图床（Image Hosting Service，IHS）就是一个能存储图片的服务器。与一般的服务器不同, 它允许将图片以 URL 链接的形式插入文章并展示图片内容。使用图床管理文件可以节省仓库空间，并避免乱七八糟的文件堆积，同时使 Markdown 仓库完全文本化，便于导出和迁移；当然也有缺点，例如隐私性较低，可能跑路（因此要做好备份）等。</p>
<p>图床有很多种，免费的包括 SMMS，路过图床，聚合图床，Imgur 和新浪微博图床（已经无法使用）等，甚至 GitHub 和 Gitee 的仓库也可以当图床（Gitee 已经无法使用，GitHub 需要借助特殊手段）；付费图床主要是各大厂商的对象存储，例如阿里云 OSS，腾讯云 COS 等，一般都很便宜。</p>
<p>这里推荐一些个人觉得比较靠谱的方案：</p>
<ul>
<li><a href="https://smms.app/">SMMS</a>：老牌免费图床，免费用户有 5G 的空间，够用很久了。至于速度嘛，只能说中规中矩。</li>
<li>GitHub+jsDelivr：jsDelivr 专门帮 GitHub 仓库做 CDN，大陆速度比较稳。不过每次都得创建一个 release，怪麻烦的。</li>
<li><a href="https://www.upyun.com/">又拍云</a>：加入又拍云联盟（在网站底下放他们的 logo）可以薅不少的免费额度，用来当图床和全站 CDN 都挺好，可惜需要 ICP 备案。</li>
<li><a href="https://www.qiniu.com/">七牛云</a>：不少大佬的推荐，免费额度较充足，可惜也需要备案。</li>
<li>对象存储：现在的大厂基本都有，价格和质量都差不多，随便挑一个就可以。</li>
<li>不用：没错，不用图床。如果你的图片不多且体积不大，那放在 <code>static</code> 文件夹里面完全没毛病，后续会有讲解。</li>
</ul>
<p>我曾经先后使用 SMMS 和阿里云 OSS，目前使用的方案是缤纷云对象存储，有 50G 免费存储，每个月前 30G 流量免费（S4 出口流量、内置 CDN 回源、内置 CDN 出口流量各 10GB/月），不出意外够我用了。下面以这个图床为例讲解图床的搭建。</p>
<h3 id="缤纷云对象存储创建">缤纷云对象存储创建</h3>
<p>首先进入<a href="https://bitiful.com">缤纷云官网</a>，完成注册和实名认证，这个略过。</p>
<p>然后进入控制台，点击新建存储桶：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240216202825-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="600"  />
    
</figure></p>
<p>新建存储桶后，在左侧选择 accesskey，添加一个子用户并获取对应的 accesskey 和 secretkey，这个很重要，找个地方保存好。权限就选择我们刚才的桶就可以。</p>
<p>然后我们就可以上传图片了。</p>
<h3 id="piclist-的配置">PicList 的配置</h3>
<p>可以上传图片还不够，总不能每次都进去传一遍，太不优雅了。</p>
<p>我们可以使用一些工具，使得我们在 Obsidian 中写作时就直接可以上传图片。</p>
<p>PicList 是一个图床管理工具，基于著名的 PicGo 进行二次开发而成，有更加强大的功能。</p>
<p><a href="https://piclist.cn/">这里</a>是 PicList 的官网，大家可以进去选择对应版本进行安装。</p>
<p>安装后打开主窗口，在右边栏中选择 AWS S3，在设置中配置并保存。两个 key 写刚才保存的那一串，bucket 写桶的名字，自定义节点填 <code>https://&lt;你的桶名&gt;.s3.bitiful.net</code>。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240216202825-2.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="600"  />
    
</figure></p>
<h3 id="image-auto-upload-插件配置">image auto upload 插件配置</h3>
<p>进入 Obsidian 插件市场，搜索 image auto upload 并安装。访问 GitHub 不顺畅的老友可以自行百度搜索 PKMer 插件进行辅助。</p>
<p>安装后启用，进行如下配置：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240216202825-3.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="600"  />
    
</figure></p>
<p>然后就可以做到粘贴图片自动上传了。</p>
<p>此外还有一些进阶的用法，这个我们留到后面讲。</p>

      ]]></content:encoded></item><item><title>Obsidian+Hugo建站教程：0-前言</title><link>https://chlor.me/how-to-build-a-blog-0/</link><pubDate>Fri, 16 Feb 2024 18:49:34 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/how-to-build-a-blog-0/</guid><category>博客</category><category>教程</category><category>Obsidian</category><description>本文是作者关于从 NotionNext 迁移到 Hugo 博客系统的系列文章的开端。文章首先解释了静态博客和独立博客的概念，强调了独立博客的自主性、自由度以及与读者互动的紧密性，同时也指出了其成本、技术要求等缺点。接着，作者提出了独立博客写作的最佳实践，并列出了进行博客写作和管理所需的基本技能和工具。文章最后以一个博物馆的比喻预告了后续将详细讲解博客搭建的各个步骤，旨在为读者提供一个全面的指南。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/how-to-build-a-blog-0-cover.webp" alt="Obsidian&#43;Hugo建站教程：0-前言" />
        </figure>
        <p>声明：</p>
<p>细心如你，应该已经发现了，本期的链接，build 变成了 bulid……</p>
<p>其实我已经发现了，但是我又发现，Twikoo 这货，文章 slug 改了之后，居然评论就没了……</p>
$$
\begin{cases}
x = \sin t, \\ 
y = \frac{t \cos t}{2}
\end{cases} 
\quad 0 \leq t \leq 2 \pi
$$<p>更新：在修改 MongoDB 数据库之后，链接正常了（</p>
<hr>
<p>嗨，大家好，我是 Chlorine。</p>
<p>折腾了一天多，终于完成了从 NotionNext 到 Hugo 的迁移。这个系列的目的就是记录我搭建博客的历程，同时我会尽可能写得详细一点，为同样零基础的老友们提供一点帮助。</p>
<p>本来想给这个系列起一个炫酷的名字，但是想了想，还是使用两个主要工具进行命名吧，也方便想找解决方案的老友们。</p>
<p>本系列的封面图作者为 Unsplash 的 <a href="https://unsplash.com/@withluke">Luke Stackpoole</a>。</p>
<h2 id="独立博客简介">独立博客简介</h2>
<h3 id="what">What？</h3>
<p>什么是静态博客呢？</p>
<p>要说静态博客，首先要说独立博客。</p>
<p>说到博客——或者类似的服务，大家可能会想到新浪微博、知乎、CSDN、博客园等。这样的平台只要注册一个账号，开始写就完事。</p>
<p>例如，我们打开一个博主的知乎首页，我们访问的域名（地址栏里那串字符）一般是这样的： <a href="https://www.zhihu.com/people/xxxxx">https://www.zhihu.com/people/xxxxx</a> ；而你现在访问我的博客首页，链接是这样的： <a href="https://yoghurtlee.com">https://yoghurtlee.com</a> 。</p>
<p>看出区别了吗？直观上来看，知乎首页的域名是依托于知乎的域名的，而我的博客的域名是我自有的。</p>
<p>独立博客指的是不依赖于社交媒体平台或内容聚合网站、拥有自己的域名和托管服务的博客。这样的博客通常由博主自己或者一个小团队进行运营，具有更高的自定义程度，允许博主完全控制网站的设计、内容和功能。这种类型的博客可以是个人兴趣、专业领域分享、商业推广或任何其他目的。</p>
<h3 id="why">Why？</h3>
<p>关于为什么写静态博客而不是在大型博客平台上进行写作，我概括了以下几点原因：</p>
<ul>
<li>独立的域名和服务——网站的全自有性
<ul>
<li>数据掌握在自己手中</li>
<li>站点权重和搜索引擎优化（SEO，简单来讲就是你的网站在搜索引擎的位次）我命由我</li>
</ul>
</li>
<li>高度自由化——独立博客一般都基于开源框架，客制性极高</li>
<li>不受平台审核规则的限制——内容（合法范围内的）自由</li>
<li>与读者更好的互动——这是我的个人感觉，一个订阅人数不过百的小站，比一个几万粉丝的平台号与读者的关系紧密许多</li>
<li>盈利性
<ul>
<li>独立网站可以成为高价值的虚拟财产</li>
<li>在流量足够且你愿意的情况下，你可以通过广告或推广营收</li>
</ul>
</li>
</ul>
<p>当然，独立博客也有缺点：</p>
<ul>
<li>成本——零成本建站当然是完全可行的，但是如果你想拥有自己的顶级域名（TLD）和服务器，那还是需要一点成本的</li>
<li>小众性——博客本身就是一个小众的爱好，我们的站点（目前）又是属于再小不过的站点。</li>
<li>技术要求——即使是门槛最低的建站，也比注册一个账号开始写复杂很多。当然，看着教程建站还是相当简单的～</li>
<li>低流量性——上一条的直接结果</li>
<li>孤独性——这点很复杂和无奈，大家先从直观上想象一下吧</li>
</ul>
<h2 id="best-practice">Best Practice</h2>
<p>下面是我认为的，独立博客写作的最佳实践。</p>
<ul>
<li>稳定的域名和 DNS 解析服务。</li>
<li>在本地快速创建带有相应属性值的博客文章。</li>
<li>使用标准的 Markdown（准确来说，此处指的是 GFM）语法进行书写。</li>
<li>使用图床进行图片的管理。</li>
<li>写作完成后一键上传到 Git 仓库。</li>
<li>站点部署工具自动嗅探仓库变动进行部署。</li>
<li>更新完成。</li>
</ul>
<p>以下我们的所有文章，都围绕着这个 Best Practice 展开。</p>
<h2 id="你必须会的东西">你必须会的东西</h2>
<p>下面的东西是必须会的，如果这些都不会，我就真没辙了。</p>
<ul>
<li>GitHub/Gitee 账号的注册，仓库的 fork</li>
<li>Markdown 语法。如果你不习惯 md，那你可能是走错地方了。</li>
<li>Git 提交（后面会简单讲如何在 VS Code 中可视化提交）</li>
</ul>
<h2 id="我们需要的东西">我们需要的东西</h2>
<ul>
<li>域名：我们以 Dynadot 为例</li>
<li>DNS 解析服务（Opt.）：我们以 CloudFlare 为例</li>
<li>博客框架：我们以 Hugo 为例</li>
<li>Git 仓库：我们以 GitHub 为例</li>
<li>部署服务：我们以 Vercel 为例</li>
<li>Markdown 编辑器：我们以 Obsidian 为例</li>
<li>图床（Opt.）：我们以缤纷云对象存储为例</li>
<li>评论系统（Opt.）：我们以 Twikoo 为例</li>
</ul>
<p>下面我会使用“数字博物馆”这个比喻，将搭建博客的每一步都尽可能讲清楚，希望能够给大家带来一些帮助。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>独立博客，启动！</p>
</blockquote>

      ]]></content:encoded></item><item><title>博客迁移通知</title><link>https://chlor.me/blog-trans/</link><pubDate>Fri, 16 Feb 2024 16:37:35 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/blog-trans/</guid><category>公告</category><description>&lt;p>各位老友们好，我是 Chlorine。&lt;/p>
&lt;p>很高兴地通知大家，在经过将近两天的折腾后，我的博客成功从 NotionNext 迁移到了 Hugo，这意味着我的 Markdown 博客发布流迈上了一个新的台阶。&lt;/p>
&lt;p>关于为什么要迁移，理由有很多，我日后可能会讲。同时我正在着手编写一个完整的 Hugo 博客搭建教程系列，可以期待一下。&lt;/p></description><content:encoded><![CDATA[
        <p>各位老友们好，我是 Chlorine。</p>
<p>很高兴地通知大家，在经过将近两天的折腾后，我的博客成功从 NotionNext 迁移到了 Hugo，这意味着我的 Markdown 博客发布流迈上了一个新的台阶。</p>
<p>关于为什么要迁移，理由有很多，我日后可能会讲。同时我正在着手编写一个完整的 Hugo 博客搭建教程系列，可以期待一下。</p>
<p>目前原站点项目依然存在，但是仅作为纪念站点，不再更新。</p>
<p>祝生活愉快~</p>
<p>Chlorine</p>
<p>2024-02-16</p>

      ]]></content:encoded></item><item><title>Spring Festival Greeting：Embracing and Rebirth</title><link>https://chlor.me/happy-spring-festival-2024/</link><pubDate>Fri, 09 Feb 2024 19:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/happy-spring-festival-2024/</guid><category>公告</category><description>除夕快乐！</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/happy-spring-festival-2024-cover.webp" alt="Spring Festival Greeting：Embracing and Rebirth" />
        </figure>
        <p>嗨，大家好。</p>
<p>我目前的坐标是我的家乡。窗外离散地响着噼啪的爆竹声，不时有着绚丽的烟花照亮夜空。</p>
<p>这是我的小站「园子里的日光」的第一个新年，也在这里给亲爱的读者们赛博拜年。关于贺词，我觉得，「一言」说得比我好得多。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240209190000-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>老实说，在上大学的这段时间，尽管寄能客观上有进步，但是我的专注力、记忆力，以及我的梦想，都处于衰退的状态。</p>
<p>我不想变成我最讨厌的那类人，像《娱乐至死》的封面一样，只留下一具不会思考的躯壳。尽管我当初也不是完全动力十足每天狂卷，但是我至少还是相信着一些东西，相信着世界上还有一些永远无法超越的东西。</p>
<p>尽管，那个「成为世界顶级的科学家」的梦想，的确是如此的幼稚和不切实际，但是那句「追逐人类心智的荣耀」的誓言，依然响彻在每一个「铁马冰河入梦来」的深夜，仿佛是当年的那个少年，依然活在我悠长而苍白的记忆里，永远眼神清澈，永远不谙世事，永远握紧双拳，永远能在日记本中写下「即使在最冷的夜，我的血依然炽热滚烫。」</p>
<p>当然，这不怪清华，也不怪计金。It&rsquo;s all my fault.</p>
<p>这也就是本期的标题「Embracing and Rebirth」的含义。尽管可能已经尘封许久，已经残破不堪，但是那些沉睡在记忆角落的古卷，依然能唤起云与闪电，字里行间，依然有着「八百里分麾下炙，五十弦翻塞外声」的沙场。</p>
<hr>
<p>当然，我不会放弃计算机。这是我生命的一部分，无论未来走向哪条道路，它都会是我亲密的伙伴。我也会永远感奋激发于伟大的开源精神，期待着有一天，能成为 open-source developer 的一员。</p>
<p>谢谢各位老友，肯陪着小氯，陪着小氯的小站一起成长。新的一年，「Here&rsquo;s to growing together and building something great in the world of open source!」</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>为往圣继绝学！</p>
<p>Carry Forward the Legacy of Open Wisdom!</p>
</blockquote>

      ]]></content:encoded></item><item><title>如何为NotionNext Hexo主题添加文章封面图</title><link>https://chlor.me/how-to-add-header-img-to-notionnext-hexo/</link><pubDate>Fri, 09 Feb 2024 12:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/how-to-add-header-img-to-notionnext-hexo/</guid><category>教程</category><category>博客</category><category>Javascript</category><category>NotionNext</category><description>本文记录了作者为 Hexo 主题 NotionNext 添加文章详情页封面图的过程。受 Matery 主题启发，作者通过修改 PostHeader.js 文件，成功实现了封面图的显示，并调整了背景透明度和样式。为优化性能，作者还关闭了 Live2D 看板功能。最终，作者通过多次尝试解决了封面图加载问题，实现了美观的文章详情页设计。</description><content:encoded><![CDATA[
        <p>嗨，大家好，我是 Chlorine.</p>
<p>先行给大家拜个年🎉晚上我会发完整的拜年公告的~</p>
<p>本期依然是寄术力不高的瞎折腾，内容是为 NotionNext 的 Hexo 主题文章详情页添加封面图。如果您是精通 JS 的大佬，请略过.</p>
<p>在刚开始使用 NotionNext 的时候，我最喜欢的是 Matery 主题，有着很漂亮的 Hero 图和文章卡片。但是随着时间的推移，能显示作者介绍，整合类 Algolia 搜索的 Hexo 主题开始渐渐更得我心，更别提 Matery 每次进入文章页面文章内容还会灵性地左移一下，于是我把主题换成了 Hexo.</p>
<p>但是我很快发现了一个问题:<strong>Hexo 主题没有文章封面图</strong>.</p>
<p>容我解释一下: 文章卡片两个主题都是有的，但是在文章详情页，二者的表现有所不同:</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240209120000-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure>
<figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240209120000-2.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>显然是有封面图显示更漂亮.</p>
<p>而加封面图这种小事也不好意思去麻烦人家开发大大，于是我决定自力更生.</p>
<p>我们进入 Github, 找到 <code>themes/hexo</code> 文件夹，这里就是 Hexo 主题的配置文件夹.</p>
<p>我一向不喜欢 Hexo 显示 categories 的功能，因此在一顿试探之后，我发现了控制这个功能的代码，位于 <code>config.js</code> 中:</p>
<pre><code class="language-js">HEXO_HOME_NAV_BUTTONS: true, // 首页是否显示分类大图标按钮
  // 已知未修复bug, 在移动端开启true后会加载不出图片； 暂时建议设置为false。
  HEXO_HOME_NAV_BACKGROUND_IMG_FIXED: false, // 首页背景图滚动时是否固定，true 则滚动时图片不懂动； false则随鼠标滚动 ;
  // 是否显示开始阅读按钮
  HEXO_SHOW_START_READING: true,
</code></pre>
<p>好好好，更有理由改成 false 了🤣</p>
<p>我猜测，加入头图之后很可能加重加载负担，因此我把 live2D 的看板关了.</p>
<p>在我们的中心配置文件 <code>blog.config.js</code> 中第 205 行左右的位置找到:</p>
<pre><code class="language-js">// 悬浮挂件
  WIDGET_PET: process.env.NEXT_PUBLIC_WIDGET_PET || true, // 是否显示宠物挂件
  WIDGET_PET_LINK:
        process.env.NEXT_PUBLIC_WIDGET_PET_LINK ||
        'https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json', // 挂件模型地址 @see https://github.com/xiazeyu/live2d-widget-models
  WIDGET_PET_SWITCH_THEME: process.env.NEXT_PUBLIC_WIDGET_PET_SWITCH_THEME || true, // 点击宠物挂件切换博客主题
</code></pre>
<p>把 <code>WIDGET_PET: process.env.NEXT_PUBLIC_WIDGET_PET</code> 那行改成 false 即可.</p>
<p>下面正式进入魔改环节。作为不会 JavaScript 的小杂鱼，我采取的依然是 <a href="blog&amp;%E9%9A%8F%E7%AC%94/%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E6%87%82CSS%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E9%AD%94%E6%94%B9Typora%E4%B8%BB%E9%A2%98%7C%E9%AD%94%E6%94%B9%20Typora%20%E4%B8%BB%E9%A2%98%E6%97%B6">blog&amp;随笔/如何在不懂CSS的情况下魔改Typora主题|魔改 Typora 主题时</a>的方法: 瞪眼法.</p>
<p>我仔细观察了整个 hexo 文件夹的结构，最后从名字上猜测 <code>components/PostHeader.js</code> 很可能与这件事有关.</p>
<p>点进去，发现 21 行左右这块很可能和头图有关:</p>
<pre><code class="language-js">const headerImage = post?.pageCover ? post.pageCover : siteInfo?.pageCover

  return (
    &lt;div id=&quot;header&quot; className=&quot;w-full h-96 relative md:flex-shrink-0 z-10&quot; &gt;
      &lt;LazyImage priority={true} src={headerImage} className='w-full h-full object-cover object-center absolute top-0'/&gt;

      &lt;header id='article-header-cover'
            className=&quot;bg-black bg-opacity-70 absolute top-0 w-full h-96 py-10 flex justify-center items-center &quot;&gt;
</code></pre>
<p>嗯，从字面上就能猜出来，这块设置了一个透明度是 70%的黑色背景，那能显示头图就出鬼了.</p>
<p>我们找到 Matery 的相应文件，发现这里是:</p>
<pre><code class="language-js">import LazyImage from '@/components/LazyImage'
import NotionIcon from '@/components/NotionIcon'

/**
 * 文章背景图
 */
export default function PostHeader({ post, siteInfo }) {
  const headerImage = post?.pageCoverThumbnail ? post?.pageCoverThumbnail : siteInfo?.pageCover
  const title = post?.title
  return (
        &lt;div id='header' className=&quot;flex h-96 justify-center align-middle items-center w-full relative bg-black&quot;&gt;
            &lt;div className=&quot;z-10 leading-snug font-bold xs:text-4xl sm:text-4xl md:text-5xl md:leading-snug text-4xl shadow-text-md flex justify-center text-center text-white&quot;&gt;
                &lt;NotionIcon icon={post?.pageIcon} /&gt;{title}
            &lt;/div&gt;
            &lt;LazyImage alt={title} src={headerImage} className='pointer-events-none select-none w-full h-full object-cover opacity-30 absolute'
                placeholder='blur' blurDataURL='/bg_image.jpg' /&gt;
        &lt;/div&gt;
  )
}
</code></pre>
<p>这里明显就是有头图的.</p>
<p>在经过锲而不舍的<del>胡乱</del>尝试+询问 AI 之后，我发现了正确的改动方法:</p>
<pre><code class="language-js">// 文章全屏隐藏标头
  if (fullWidth) {
    return &lt;div className='my-8'/&gt;
  }

  const headerImage = post?.pageCoverThumbnail ? post.pageCoverThumbnail : siteInfo?.pageCover

  return (
    &lt;div id=&quot;header&quot; className=&quot;w-full h-96 relative md:flex-shrink-0 z-10&quot; &gt;

      &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-70&quot;&gt;&lt;/div&gt;
      &lt;LazyImage alt={post?.title} src={headerImage} className='w-full h-full object-cover absolute top-0 opacity-30'/&gt;
  
      &lt;header id='article-header-cover'
            className=&quot;absolute top-0 w-full h-96 py-10 flex justify-center items-center &quot;&gt;
</code></pre>
<p>这样就可以在 Hexo 主题也显示好看的封面了捏~</p>
<p>PS: 列一下我踩过的愚蠢的坑:</p>
<ol>
<li>直接拷贝 Matery 的代码</li>
<li>不会加黑色蒙版</li>
<li>乱改模糊加载导致错误</li>
<li>以下省略 114514 条 ()</li>
</ol>

      ]]></content:encoded></item><item><title>瞎折腾MinGW</title><link>https://chlor.me/how-to-update-mingw/</link><pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/how-to-update-mingw/</guid><category>C++</category><category>教程</category><description>这篇文章介绍了作者在更新 MinGW 过程中遇到的各种问题和解决方法。作者首先回顾了自己在学习递归和调试时的困难经历，强调了命令行调试的复杂性。随后，作者分享了自己发现并尝试更新 MinGW 的过程，包括从 GitHub 下载最新版本并替换旧版本的步骤。接着，作者详细描述了如何在 VS Code 中配置可视化调试环境，通过编写和修改配置文件（如 `c_cpp_properties.json`、`launch.json` 和 `tasks.json`）来实现调试功能。尽管成功配置了可视化调试，作者表示自己仍然更习惯使用命令行调试。文章最后感谢了一位学长的教程，并表达了对折腾过程的感慨。</description><content:encoded><![CDATA[
        <p>嗨，大家好，我是 Chlorine.</p>
<p>本期的主要内容是讲述我更新 MinGW 的痛苦经历，寄术力不高，大佬轻喷。引用一句<a href="https://zhuanlan.zhihu.com/p/137332644">某乎上的话</a>:</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>知识就是这样的，也许一个问题在老鸟看来是一颗土坷垃，但对于初学者却是一座大山。</p>
</blockquote>
<h2 id="历史遗留问题">历史遗留问题</h2>
<p>当年我们在学递归之后，老师布置了一个上机作业，要求原文如下:</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>以汉诺塔源程序为对象，参照 PPT 上关于阶乘示例的递归调用与返回过程的示意图，在集成开发环境中，以单步跟踪方式，打开汇编代码和机器代码显示功能，观察函数调用栈（内存）的变化情况，观察程序执行时“当前待执行机器指令”随着单步执行的变化情况。在发生递归调用时，记录函数实参和形参的地址与内容，记录函数调用结束后的返回点指令地址。</p>
</blockquote>
<p>这其实是个简单得离谱的任务，更不用提写上机报告一向是我引以为豪的能力（期末成绩，上机报告部分 99.9 分，扣掉的 0.1 是因为第一篇是用 Obsidian 写的，导出的时候标题没居中）。</p>
<p>可是问题是：<strong>我不会单步跟踪调试</strong>。（上课摆烂的后果 qaq）</p>
<p>跟着助教的讲解视频，查网上的教程，甚至是安了好几个其他的 IDE，都是完不成，我好像就和调试有仇。</p>
<p>最后幸好一位好心的 TA 学长教了我一些命令行调试，才让我把报告写出来（最后成绩是满分 q(≧▽≦q)）。</p>
<p>所以以后我在做单步跟踪调试的时候，一直都是在用命令行。不是说命令行不好，但是的确有点复杂。此外，我在写 C++ 教程的时候，总不能上来就往人家脸上糊命令行吧（）.</p>
<h2 id="补偿性折腾">补偿性折腾</h2>
<p>最近我发现了一个很好玩的 Github 项目: <a href="https://github.com/Bill-Haku/kawaii-gcc">Bill-Haku/kawaii-gcc: GCCコンパイラーを可愛くしましょう！Make your GCC compiler kawaii. (github.com)</a></p>
<p>这里是 B 站解说视频地址: <a href="https://www.bilibili.com/video/BV1gC4y1P7t3?vd_source=b7e941d0715a442723fb5ad229adf1cb">【中文】杂~鱼♡！人家 GCC 也想变得可爱嘛～】</a></p>
<p>说实话，我看完之后，真的感觉：好可爱！</p>
<p>然后我忧伤地得知目前只支持 Cygwin。</p>
<p>但是，我折腾的兴奋度已经被挑起来了。不折腾点什么，我是不会罢休的。</p>
<h2 id="mingw-的更新">MinGW 的更新</h2>
<p>综合以上两段原因，我决定折腾下我的 VS Code + MinGW-w64。</p>
<p>终端里扔个 <code>gcc -v</code>, 发现我的 gcc 居然才 8.1.0，于是我决定更新。</p>
<p>MinGW 没有什么一键更新的命令，同时官网上一大堆离奇的布局看得我五彩缤纷。</p>
<p>于是我找到了 <a href="https://github.com/niXman/mingw-builds-binaries">MinGW-64 的 Github 二进制仓</a>。直接把 release 的最新版本下载下来，解压完事。</p>
<p><em>PS: 我下载的是 <code>x86_64-13.2.0-release-posix-seh-ucrt-rt_v11-rev0.7z</code></em></p>
<p>解压的时候我图省事，解压到了默认的 download 文件夹，本来想着一会给移到我原本的 D 盘去，结果遇见了这样的擀人速度：</p>
<p>（图片丢了，乐）</p>
<p>好吧，不管怎么样，总算是挪过去了。由于我解压之后的文件夹也叫 <code>mingw</code>，因此直接替换了原本的老版本文件，省去了再配一遍环境变量的麻烦。</p>
<p>然后随便开个终端，键入版本检查指令 <code>gcc -v</code>, <code>g++ -v</code> 和 <code>gdb -version</code>，发现更新成功了。</p>
<h2 id="可视化调试的配置">可视化调试的配置</h2>
<p>其实这也不是什么难事，也就是几个文件的事，但是 VS Code 这厮总是给我闹幺蛾子，于是干脆自己动手写（抄）文件.</p>
<p>把原本 C++ 文件夹的 <code>.vscode</code> 子文件夹删空，新建三个文件，把当时留下的代码扔进去：</p>
<pre><code class="language-json">// c_cpp_properties.json
{
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;Win32&quot;,
            &quot;includePath&quot;: [
                &quot;${workspaceFolder}/**&quot;
            ],
            &quot;defines&quot;: [
                &quot;_DEBUG&quot;,
                &quot;UNICODE&quot;,
                &quot;_UNICODE&quot;
            ],
            &quot;compilerPath&quot;: &quot;D:\\\\mingw64\\\\bin\\\\gcc.exe&quot;,
            &quot;intelliSenseMode&quot;: &quot;windows-gcc-x64&quot;,
            &quot;cppStandard&quot;: &quot;c++23&quot;,
            &quot;cStandard&quot;: &quot;c23&quot;
        }
    ],
    &quot;version&quot;: 4
}

</code></pre>
<pre><code class="language-json">// launch.json
{
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;g++.exe - Build and debug active file&quot;,
            &quot;type&quot;: &quot;cppdbg&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot;,
            &quot;args&quot;: [],
            &quot;stopAtEntry&quot;: false,
            &quot;cwd&quot;: &quot;${fileDirname}&quot;,
            &quot;environment&quot;: [],
            &quot;externalConsole&quot;: false,
            &quot;MIMode&quot;: &quot;gdb&quot;,
            &quot;miDebuggerPath&quot;: &quot;D:\\\\mingw64\\\\bin\\\\gdb.exe&quot;,
            &quot;setupCommands&quot;: [
                {
                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,
                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,
                    &quot;ignoreFailures&quot;: true
                }
            ],
            &quot;preLaunchTask&quot;: &quot;C/C++: g++.exe 生成活动文件&quot;
        }
    ]
}

</code></pre>
<pre><code class="language-json">// tasks.json
{
    &quot;tasks&quot;: [
        {
            &quot;type&quot;: &quot;cppbuild&quot;,
            &quot;label&quot;: &quot;C/C++: g++.exe 生成活动文件&quot;,
            &quot;command&quot;: &quot;D:\\\\mingw64\\\\bin\\\\g++.exe&quot;,
            &quot;args&quot;: [
                &quot;-fdiagnostics-color=always&quot;,
                &quot;-g&quot;,
                &quot;${file}&quot;,
                &quot;-o&quot;,
                &quot;${fileDirname}\\\\${fileBasenameNoExtension}.exe&quot;
            ],
            &quot;options&quot;: {
                &quot;cwd&quot;: &quot;${fileDirname}&quot;
            },
            &quot;problemMatcher&quot;: [
                &quot;$gcc&quot;
            ],
            &quot;group&quot;: {
                &quot;kind&quot;: &quot;build&quot;,
                &quot;isDefault&quot;: true
            },
            &quot;detail&quot;: &quot;调试器生成的任务。&quot;
        }
    ],
    &quot;version&quot;: &quot;2.0.0&quot;
}

</code></pre>
<p>重启 VS Code，随便写个 C++ 文件，在左侧工具栏尝试可视化调试，完美。</p>
<p>（图片又丢了，乐）</p>
<h2 id="后记">后记</h2>
<p>就折腾到这吧。尽管说有了可视化调试的方法，但是我可能还是习惯于用命令行。这次折腾大概还是为了解决强迫症的历史遗留问题。</p>
<p>毕竟我还是无法拥有可爱的 GCC qaq</p>
<p>感谢隔壁北大一位学长的教程<a href="https://zhuanlan.zhihu.com/p/610895870">用vscode优雅配置c/c++环境！</a>。</p>

      ]]></content:encoded></item><item><title>如何在不懂CSS的情况下魔改Typora主题</title><link>https://chlor.me/how-to-modify-typora-themes/</link><pubDate>Mon, 29 Jan 2024 12:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/how-to-modify-typora-themes/</guid><category>Typora</category><category>折腾</category><category>CSS</category><description>本文介绍了作者在不熟悉 CSS 的情况下，如何通过修改现有 Typora 主题 Lapis 来创建一个新的主题 Marble 的过程。文章详细描述了从前期准备、确定需要的效果、观察主题结构到具体的修改步骤，包括字体替换、颜色调整、标题样式修改、引用块和代码块样式的变更等。作者通过使用 VS Code、AI 助手（如 ChatGPT 和 Github Copilot）以及大量的试错和学习，成功实现了主题的自定义。最终，作者将新主题 Marble 开源至 Github 和 Gitee，供大家下载使用。</description><content:encoded><![CDATA[
        <p>嗨，大家好，我是 Chlorine。</p>
<p>本期的标题看起来非常扯，和&quot;如何在不懂英语的情况下出一本译著&quot;有一拼。但是这是真的，效果如下：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240129120000-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="525"  />
    
</figure></p>
<p>看起来还挺不错的。事实上我这周末就在干这活。话不多说，直接开讲。</p>
<h2 id="前期准备">前期准备</h2>
<ul>
<li>一个基础主题：毫无疑问，都说了不会写 CSS 了。我选择的依旧是最喜欢的 Lapis 主题。</li>
<li>VS Code 或者其他能编辑 CSS 代码的 IDE</li>
<li>（Optional）AI 助手，例如 ChatGPT 和 Github Copilot。</li>
</ul>
<h2 id="第一步确定你需要的效果">第一步：确定你需要的效果</h2>
<p>魔改的目的是让<strong>已有的东西更好地适应我们的需要</strong>。那你首先就得清楚自己想要什么样式。</p>
<p>以我为例，我的要求如下：</p>
<ol>
<li>字体：换上我最喜欢的霞鹜文楷。</li>
<li>界面颜色：调得柔和一些，Lapis 原本的白色有点刺眼。</li>
<li>标题样式：间距统一；二级标题样式修改；低级标题字体大小调整；二到六级标题加上标注，等等。</li>
<li>引用块：样式调整，去掉左侧的 bar，换成另一个配饰。</li>
<li>代码高亮：采取更加自然柔和的配色方案。</li>
</ol>
<h2 id="第二步观察主题结构">第二步：观察主题结构</h2>
<h3 id="工程结构">工程结构</h3>
<p>我们进入 Typora 的主题文件夹，简单观察下 Lapis 主题的组成部分。可以发现只有两部分：控制样式的 <code>lapis.css</code> 文件和存放字体的 <code>lapis</code> 文件夹。</p>
<h3 id="css-文件结构"><code>.css</code> 文件结构</h3>
<p>这步有点艰难，不仅需要一定的英语水平，还需要瞎猜的胆识。</p>
<p>在 IDE 中打开文件，耐心地从头看到尾。如果你的英语水平足够好，你应该可以猜出很多部分的功能。举几个例子：</p>
<pre><code class="language-css">/*
 * Font-face for Cantarell, Source Han Serif CN and JetBrains Mono
 */

@font-face {
    font-family: &quot;Cantarell&quot;;
    src: url('lapis/Cantarell-VF-fixed.otf');
}

@font-face {
    font-family: &quot;JetBrainsMono&quot;;
    src: url('lapis/JetBrainsMono-Regular.ttf');
}

@font-face {
    font-family: &quot;SourceHanSerifCN&quot;;
    src: url('lapis/SourceHanSerifCN-Medium.otf');
}

@font-face {
    font-family: &quot;SourceHanSerifCN&quot;;
    src: url('lapis/SourceHanSerifCN-Bold.otf');
    font-weight: bold;
}
</code></pre>
<p>开猜。这段明显是定义字体的，引入了 Cantarell，Source Han Serif CN（思源宋体）和 JetBrains Mono 三种字体。根据每一部分的格式，我们可以猜测，我们在引入新的字体时的格式为：</p>
<pre><code class="language-css">@fontface{
	font-family: &quot;&lt;字体名称&gt;&quot;;
    src: url('&lt;字体文件路径&gt;');
}
</code></pre>
<p>同时注意到，粗体字需要单独引入。</p>
<p>再比如：</p>
<pre><code class="language-css">#write h2 {
    background-color: var(--header-span-color);
    color: var(--bg-color);
    padding: 1px 12.5px;
    border-radius: 4px;
    display: inline-block;
}
</code></pre>
<p>H2 显然是二级标题，<code>background-color</code> 是背景颜色的意思，其值是前面定义的 <code>--header-span-color</code>；颜色是 <code>--bg-color</code>，和背景颜色一样，说明想制造出镂空的效果；<code>padding</code> 是内边距的意思；<code>border-radius</code> 看着似乎和圆角大小有关；<code>display</code> 也许是指展示方式，不用管。总而言之，这应该是用来定义二级标题样式的。</p>
<p>诸如此类，一直猜就可以。看不懂不要紧，如果看起来不是和你要改的东西相关就不用管，如果相关，可以询问 AI 助手或者 CV 过去查字典/搜索。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240129120000-2.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="471"  />
    
</figure></p>
<h2 id="第三步开改">第三步：开改</h2>
<p>终于到了开始改的时候了。我会以我的过程为例讲解一下改动的基本思路。</p>
<h3 id="字体修改">字体修改</h3>
<p>在 <code>lapis</code> 文件夹中加入字体文件：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240129120000-3.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>然后在 <code>@font-family</code> 处引入字体文件代替思源宋体：</p>
<pre><code class="language-css">@font-face {
    font-family: &quot;LXGWWenKaiGB&quot;;
    src: url('lapis/LXGWWenKaiGB-Regular.ttf');
}

@font-face {
    font-family: &quot;LXGWWenKaiGB&quot;;
    src: url('lapis/LXGWWenKaiGB-Bold.ttf');
    font-weight: bold;
}
</code></pre>
<p>在 <code>#write</code>（基本配置区）中加入字体的名称：</p>
<pre><code class="language-css">#write {
    max-width: 950px;
    font-size: 1.1rem;
    color: var(--text-color);
    line-height: 1.6;
    word-spacing: 0px;
    letter-spacing: 0px;
    word-break: break-word;
    word-wrap: break-word;
    text-align: justify;

    font-family: 'Cantarell', 'LXGWWenKaiGB', 'JetBrainsMono';
    /* 在上面这里修改 */
    margin-bottom: 20rem;
}
</code></pre>
<p>同时修改下文的目录、标题等处除代码块外所有内容的字族为 <code>'Cantarell', 'LXGWWenKaiGB'</code>。</p>
<p>根据 Github Copilot 的回答，CSS 中会优先使用靠前的字族，在字符搜索不到时递补到后面的字族进行搜索。Cantarell 是纯拉丁字体，没有中文字，这样就可以实现中英文字体分别设置。当然，如果你的字族是中英文混合的，例如 LXGWBrightGB（霞鹜文楷 GB 和 Ysabeau 的融合字体，相当好看），就可以只设置一个。</p>
<h3 id="修改颜色">修改颜色</h3>
<p>颜色代码位于文件开头处 6-42 行（行数为相对于原始文件而言，下同）：</p>
<pre><code class="language-css">:root {
    --text-color: #40464f;
    /* Text */
    --primary-color: #4870ac;
    /* Primary Color */
    --bg-color: #ffffff;
    --side-bar-bg-color: var(--bg-color);
    /* Background */

    --marker-color: #a2b6d4;
    /* List Marker */
    --highlight-color: #ffffb5c2;
    /* Highlight */
    --header-span-color: var(--primary-color);
    /* h2 Span Color */
    --block-bg-color: #f6f8fa;
    /* Block Background */
    --img-shadow-color: #e3e8f0;

    /* Overwrite of Typora Base Color */
    --search-hit-bg-color: var(--select-text-bg-color);
    --search-select-bg-color: #5bb3ff;
    --control-text-hover-color: #a2b6d4;
    --rawblock-edit-panel-bd: var(--block-bg-color);
    --item-hover-bg-color: rgb(246 248 250);
    --active-file-bg-color: var(--block-bg-color);
}
</code></pre>
<p>大家按照自己的喜好修改即可。VS Code 有颜色预览，非常方便。</p>
<h3 id="标题样式">标题样式</h3>
<p>这个比较复杂。首先定位控制标题的代码，位于文件 208-305 行，header 注释的下方。代码太多，我省略了一部分。</p>
<pre><code class="language-css">#write h4,
#write h5,
#write h6 {
    font-weight: normal;
}

#write h1,
#write h2,
#write h3,
#write h4,
#write h5,
#write h6 {
    font-family: 'SourceHanSerifCN';
    padding: 0px;
    color: var(--primary-color);
}

/* 基础样式 */

#write h1 {
    text-align: center;
}

#write h2 {
    background-color: var(--header-span-color);
    color: var(--bg-color);
    padding: 1px 12.5px;
    border-radius: 4px;
    display: inline-block;
}

/* H2的一堆样式 */

#write h1 {
    font-size: 2rem;
}

/* 字体大小 */

#write h1 {
    padding-top: 0.9rem;
    margin-bottom: 2.3rem;
}

/* 设置间距 */

blockquote h3.md-focus:before,
blockquote h4.md-focus:before,
blockquote h5.md-focus:before,
blockquote h6.md-focus:before {
    left: -1.3rem;
}
/* 不知道是什么，也不用知道 */
</code></pre>
<p>首先修改标题字重为粗体（strong）。事实上只需要去掉原本 H4-H6 的设置，因为标题默认是粗体。</p>
<p>下面修改 H2 的样式。请教了 Github Copilot 后，我得到了这样的代码：</p>
<pre><code class="language-css">#write h2 {
    color: var(--primary-color);
    padding: 1px 0px;
    display: inline-block;
    background-image: linear-gradient(to left, transparent, var(--block-bg-color), transparent);
    background-repeat: no-repeat;
    background-size: 120% 1.2px;
    background-position: center bottom;
    /* 做了一条很浅的渐变下划线 */
}
</code></pre>
<p>下面删除除一级标题间距外的间距（margin）代码，加入我们设置的统一间距：</p>
<pre><code class="language-css">#write h2,
#write h3,
#write h4,
#write h5,
#write h6 {
    margin: 0.5em 0 0.5em;
}
</code></pre>
<p>调整字体大小：</p>
<pre><code class="language-css">#write h1 {
    font-size: 2.2em;
}

#write h2 {
    font-size: 2rem;
}

#write h3 {
    font-size: 1.8rem;
}

#write h4 {
    font-size: 1.6rem;
}

#write h5 {
    font-size: 1.4rem;
}

#write h6 {
    font-size: 1.2rem;
}
</code></pre>
<p>为二至六级标题加上 H2-H6 角标。此时需要使用这样的代码：</p>
<pre><code class="language-css">#write h2::before,
#write h3::before,
#write h4::before,
#write h5::before,
#write h6::before {
    vertical-align: super;
    font-size: 0.35em;
    margin-right: 0.4em;
}

#write h2::before {
    content: &quot;H2&quot;;
}

#write h3::before {
    content: &quot;H3&quot;;
}

#write h4::before {
    content: &quot;H4&quot;;
}

#write h5::before {
    content: &quot;H5&quot;;
}

#write h6::before {
    content: &quot;H6&quot;;
}
</code></pre>
<p>前面的一坨是统一的样式，后面是内容。</p>
<h3 id="引用块样式修改">引用块样式修改</h3>
<p>对应源代码的 <code>blockquote</code> 部分。还是询问 AI 助手后得到如下灵感：</p>
<pre><code class="language-css">#write blockquote {
    display: block;
    font-size: .9em;
    overflow: auto;
    padding: 15px 30px 15px 42px;
    margin-bottom: 20px;
    margin-top: 20px;
    background: var(--block-bg-color);
    position: relative;
}

#write blockquote::before {
    content: &quot;&gt;&quot;;
    /*加了一个小标记“&gt;”*/
    font-size: 2.3em;
    position: absolute;
    left: 20px;
    /* 调整左侧位置 */
    top: 50%;
    /* 居中显示 */
    transform: translateY(-55%);
    /* 用于垂直居中 */
    color: #E0E0E0;
}
</code></pre>
<h3 id="分割线样式修改">分割线样式修改</h3>
<p>对应于 dividing line 部分。与前面的 H2 一样使用渐变方案：</p>
<pre><code class="language-css">/* 分割线 Dividing line */

hr {
    margin-top: 20px;
    margin-bottom: 20px;
    border: 0;
    border-top: 1.4px solid;
    border-image: linear-gradient(to right, transparent 10%, #D0DDE6 25%, #D0DDE6 75%, transparent 90%) 1;
    border-radius: 2px;
    /* 渐变分割线 */
}
</code></pre>
<h3 id="代码块">代码块</h3>
<p>这是最让我头大的一部分，头大的原因不是技术问题，而是如何配色。在请教了 AI 助手，并且查了一堆颜色对照表之后，我简单定出了这个方案：</p>
<pre><code class="language-css">/* 关键字 - 海蓝石 */
.cm-s-inner .cm-keyword {
    color: #87d4eb !important;
}

/* 操作符 - 铁灰色 */
.cm-s-inner .cm-operator {
    color: #43464B !important;
}

/* 变量、内置对象、头标题、标签、属性、引用 - 紫水晶 */
.cm-s-inner .cm-variable,
.cm-s-inner .cm-builtin,
.cm-s-inner .cm-header,
.cm-s-inner .cm-tag,
.cm-s-inner .cm-property,
.cm-s-inner .cm-quote {
    color: #9932CC !important;
}

/* 变量2 - 绿松石 */
.cm-s-inner .cm-variable-2 {
    color: #30d5b1 !important;
}

/* 变量3、类型、原子 - 蓝宝石 */
.cm-s-inner .cm-variable-3,
.cm-s-inner .cm-type,
.cm-s-inner .cm-atom {
    color: #3c7ce3 !important;
}

/* 数字 - 玫瑰石膏 */
.cm-s-inner .cm-number {
    color: #e5c0ff !important;
}

/* 定义、限定符 - 青金石 */
.cm-s-inner .cm-def,
.cm-s-inner .cm-qualifier {
    color: #1357a5c2 !important;
}

/* 字符串 - 黄铁矿 */
.cm-s-inner .cm-string {
    color: #8B4513 !important;
}

/* 字符串2 - 绿松石 */
.cm-s-inner .cm-string-2 {
    color: #30D5C8 !important;
}

/* 注释 - 银灰 */
.cm-s-inner .cm-comment {
    color: #C0C0C0 !important;
}

/* 元数据 - 暗金色 */
.cm-s-inner .cm-meta {
    color: #B8860B !important;
}

/* 属性 - 紫水晶 */
.cm-s-inner .cm-attribute {
    color: #9932CC !important;
}

/* 错误 - 铁玫瑰 */
.cm-s-inner .cm-error {
    color: #FFFFFF !important;
    background-color: #D02537 !important;
}

/* 匹配的括号 - 白垩石 */
.cm-s-inner .CodeMirror-matchingbracket {
    text-decoration: underline;
    color: #ffffffc3 !important;
}
</code></pre>
<p>其中的 <code>!important</code> 应该是高优先级的意思。这套方案不是很好看，但也还行。</p>
<h3 id="总结">总结</h3>
<p>我还对文件进行了一些小修改，就不多说了。由于我的修改太多了，我干脆照着原本的文件重写了一个，变成了一个新的主题，这也就是开头那张图。根据我的配色和原本的主题 Lapis（天青石），我把主题命名为 Marble（大理石）。</p>
<p>主题现已开源至 <a href="https://github.com/chlorine3545/typora-theme-marble">Github</a> 和 <a href="https://gitee.com/chlorine3545/typora-theme-marble">Gitee</a>，欢迎大家前去下载尝试。如果可以的话，想要一颗 star (*^▽^*)。</p>
<p>这些修改看着复杂，实际上主要还是依靠猜代码含义和借助 AI。</p>
<h2 id="后记">后记</h2>
<p>总体而言，魔改主题还是挺费事的。不过只要有足够的耐心，虽说写出全新的主题比较难，但是改出一些自己喜欢的效果还是可以的。</p>
<p>Marble 主题我会尽力维护，但是由于不懂 CSS+平时事的确比较多，更新就随缘了。</p>
<p>下一步似乎可以用这种方式魔改 Obsidian 的主题……算了我还是去学学 HTML 和 CSS 吧（乐）</p>

      ]]></content:encoded></item><item><title>收集一些最近发现的网站</title><link>https://chlor.me/some-websites/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/some-websites/</guid><category>安利</category><description>本文分享了作者Chlorine发现的一系列有趣网站，包括时间线生成器MyLens、在线百科全书Encyclopedia Britannica、中国古代妖怪资料库纪妖、佛罗里达奇闻异事集锦Florida Man、博客封面制作工具CoverPaint、代码图片生成器 Carbon、截图美化工具 Pica、Google的开源图片压缩工具Squoosh、森林声音白噪声网站tree.fm、展示全球风景的WindowSwap、加密消息生成器Saltify、临时手机号提供者AnonymSMS、临时邮箱服务10 Minute Mail、模拟黑客打字效果的Hacker Typer，以及随机跳转至有趣网站的The Useless Web。作者还提到通过搜索和随机浏览互联网可以发现更多有趣的网站。</description><content:encoded><![CDATA[
        <p>嗨，大家好，我是 Chlorine。</p>
<p>最近发现了不少有意思的网站，本来打算在周报里提一下就可以了，奈何有点太多了，因此决定单独写一篇。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p><strong>宇宙安全声明</strong></p>
<p>我所指的“有意思”标准比较个人化，同时对于常用的实用网站和一些适合摸鱼的网站基本没有收录，大家也不必较真什么叫有意思，你杠你对。</p>
</blockquote>
<h2 id="mylens">MyLens</h2>
<p>地址： <a href="https://mylens.ai/">https://mylens.ai/</a></p>
<p>在逛博主<a href="https://yinji.org">青山</a>的博客时发现的，作用是根据提示词生成相关的时间线，提示词中英文均可。以下是我测试的几个结果：</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="681"  />
    
</figure></p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-2.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="676"  />
    
</figure></p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-3.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="681"  />
    
</figure></p>
<p>生成后可以下载一个 zip，里面有这种长图和一组用来分享的切图，蛮好玩的。</p>
<h2 id="encyclopedia-britannica">Encyclopedia Britannica</h2>
<p>地址: <a href="https://www.britannica.com/">https://www.britannica.com/</a></p>
<p>我翻译一下，这个网站的中文名叫：《大英百科全书》.</p>
<p>没错，就是那一部“一部足以代表现代文明精华的世界级经典，辉煌时代的智慧结晶，一所没有围墙的大学，仅次于上帝的权威”。</p>
<p>现在都在互联网上了，尽情享用吧。</p>
<h2 id="纪妖">纪妖</h2>
<p>地址： <a href="https://www.cbaigui.com/">https://www.cbaigui.com/</a></p>
<p>收集中国古代的妖怪们，不错的小说素材发掘地。</p>
<h2 id="florida-man">Florida Man</h2>
<p>地址： <a href="https://floridaman.com/">https://floridaman.com/</a></p>
<p>这个网站我发现得比较早, 但是我还是忍不住写了下来.</p>
<p>佛州地方，物华天宝，人杰地灵。同时感谢佛州官方公开的案件记录，让我们能更直接地欣赏到佛州英雄好汉对于地球 online 中人类系统 bug 的绝妙利用。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-4.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="441"  />
    
</figure></p>
<p>比抽象搞笑视频更搞笑，还能顺便练英语，谁不喜欢呢。</p>
<p>我随便翻译两个不是很恶心的吧，翻译水平有限，请见谅：</p>
<p><a href="https://floridaman.com/florida-woman-stole-walmart-plans-apply-job-walmart/">佛罗里达一曾盗窃沃尔玛的女子打算在沃尔玛求职</a></p>
<p><a href="https://floridaman.com/state-tattooed-on-head-calls-911-for-a-ride-home/">一头上有佛州纹身的男子打电话让 911送他回家</a></p>
<p><a href="https://floridaman.com/florida-man-with-all-gas-no-brakes-neck-tattoo-crashes-while-fleeing-police-video/">佛罗里达一男子将“只踩油门不刹车”纹在脖子上炫耀驾驶技术，结果在逃脱警察追捕时撞车</a></p>
<p><a href="https://floridaman.com/florida-man-gets-beat-up-by-the-easter-bunny/">佛罗里达一男子被复活节小兔暴打</a></p>
<p><a href="https://floridaman.com/florida-man-tries-shoot-puppy-puppy-shoots-instead/">佛罗里达一男子试图射杀小狗，结果被小狗反杀</a></p>
<h2 id="coverpaint">CoverPaint</h2>
<p>地址： <a href="https://coverpaint.xiaole.site/zh">https://coverpaint.xiaole.site/zh</a></p>
<p>一个 Github 的开源项目，用于制作格式统一的博客封面。</p>
<p>放下我这周周报的封面：</p>
<p><figure class="my-8">
    <img src="" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure> <figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-5.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure>
图片依然来自优秀的 <a href="https://unsplash.com/">Unsplash</a>.</p>
<p>项目的仓库在 <a href="https://github.com/youngle316/cover-paint">https://github.com/youngle316/cover-paint</a> , 看样子能自部署，可惜现在我只会用 Vercel, 看不懂思密达。</p>
<h2 id="carbon">Carbon</h2>
<p>地址： <a href="https://carbon.now.sh/">https://carbon.now.sh/</a></p>
<p>字面意思是碳，实际效果相当于碳的某同素异形体。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-6.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="558"  />
    
</figure></p>
<p>这个网站的作用是把代码变成易于分享的好看图片，我贴个自己做的图吧。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-7.webp" alt="毁灭吧.webp(doge)" 
        class="mx-auto rounded-lg block" loading="lazy" width="392"  />
    
</figure></p>
<p>各种样式都蛮丰富的，喜欢贴代码图的小伙伴应该会喜欢。</p>
<h2 id="pica">Pica</h2>
<p>地址： <a href="https://pika.style/">https://pika.style/</a></p>
<p>帮你美化你的截图，设计师们可能会喜欢吧。</p>
<h2 id="squoosh">Squoosh</h2>
<p>地址： <a href="https://squoosh.app/">https://squoosh.app/</a></p>
<p>来自 Google 的开源图片压缩网站，压缩速度和质量好得夸张。唯一的缺点是不支持批量压缩。</p>
<p>自从发现了这个网站后，我就丢掉了访问极度不稳定的 tinypng. 这个网站在我现在写博客的过程中功不可没，我的每一张图片都会丢进去极限压缩并导出 <code>.webp</code>，来把大小缩减到最低。</p>
<p>源代码在 <a href="https://github.com/GoogleChromeLabs/squoosh">https://github.com/GoogleChromeLabs/squoosh</a> , 技术力高的朋友可以自己部署，我就只用 Edge 自带的功能，把网页下载到本地变成应用了。</p>
<p>值得一提的是，这个网站在大陆也可以访问。</p>
<h2 id="treefm">tree.fm</h2>
<p>地址： <a href="https://www.tree.fm/">https://www.tree.fm/</a></p>
<p>聆听森林的声音。当一个白噪声电台挺不错的。</p>
<h2 id="windowswap">WindowSwap</h2>
<p>地址： <a href="https://www.window-swap.com/">https://www.window-swap.com/</a></p>
<p>想看看，此时世界上的另一个人，窗外是怎样的风景吗？</p>
<h2 id="saltify">Saltify</h2>
<p>地址： <a href="https://www.saltify.io/">https://www.saltify.io/</a></p>
<p>字面意思是盐化，但是和食盐没什么关系。</p>
<p>这个网站可以生成带有密码和生命周期的消息，感觉适合用来说悄悄话。</p>
<h2 id="anonymsms">AnonymSMS</h2>
<p>地址： <a href="https://anonymsms.com/">https://anonymsms.com/</a></p>
<p>一个匿名短信验证网站，可以给你提供一个临时的手机号接验证码。原本好像只有米国和带嘤的手机号，现在多了几个地区。</p>
<p>不知道能不能用这个网站申请 ChatGPT API 一类的服务？🤣</p>
<h2 id="10-minute-mail">10 Minute Mail</h2>
<p>地址： <a href="https://10minutemail.com/">https://10minutemail.com/</a></p>
<p>字面意思，创建一个临时邮箱，和上面的 AnonymSMS 功能相似。</p>
<h2 id="hacker-typer">Hacker Typer</h2>
<p>地址： <a href="https://hackertyper.com/">https://hackertyper.com/</a></p>
<p>黑客模拟器，一个在键盘上随便乱打就能假装你是黑客的网站。大小所限，我就不放 GIF 了。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240128120000-8.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy" width="502"  />
    
</figure></p>
<p>不过，这个网站也只能拿来装装，真想有黑客的技术力，还是得好好学计算机～</p>
<h2 id="the-useless-web">The Useless Web</h2>
<p>地址： <a href="https://theuselessweb.com/">https://theuselessweb.com/</a></p>
<p>一个网站任意门，可以带你随机穿越到一个没什么用的网站。</p>
<hr>
<p>先说这么多吧，今天或者明天会更周报。</p>
<p>关于发现这些网站的方式，可以在 Google 里直接键入 interesting websites，里面就会有很多推荐，在发现国外网站方面尤其好用。当然，也可以在互联网中随机游走，会随缘碰到一些网站。</p>

      ]]></content:encoded></item><item><title>有用与有趣之间</title><link>https://chlor.me/between-interesting-and-useful/</link><pubDate>Fri, 26 Jan 2024 12:00:00 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/between-interesting-and-useful/</guid><category>随笔</category><description>本文探讨了作者在写技术博客时的内心挣扎和对内容「有用」与「有趣」之间关系的思考。作者因担心技术水平不够和追求完美，迟迟没有发布笔记。同时，反思写博客的目的，是为了记录自己有意义的内容，还是迎合读者。作者认为，不必过于执着于内容是否有用，只要能带来温暖的生命体验，独立博客就有其独特的价值。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/IMG-20240126120000-0.webp" alt="有用与有趣之间" />
        </figure>
        <h1 id="有用与有趣之间">有用与有趣之间</h1>
<p>事情的起因是这样的。我最近在看视频预习 OOP （面向对象编程）的知识，于是用 Obsidian 记了不少笔记。由于我很早就有将笔记作为博客发布的想法，因此，我在写笔记的时候也花了些心思，希望尽可能的引人入胜。</p>
<p>可是到了要发布的时候我却算了。一方面，是自己的技术力实在太弱；另一方面，是我的一个比较大的想法——把程设和 OOP 两门课的所有知识整合好，编写成一份完整的“学徒写给学徒”的 C++ 入门教程。</p>
<p>不过这个工作量很大，因为我初期没有很多 C++ 的笔记。而且，正如《C++ Primer Plus》里面说的，随着我们的学习，这些词汇将从花里胡哨的词语变为论述中必不可少的术语。即使你的知识稍多一点，也很难回到最初清澈而愚蠢的状态去写教程了。</p>
<p>而我的强迫症又不能允许我先发后面的知识，于是卡住，给大家一种我一直在鸽的印象。</p>
<p>此外，我也会时常担心我的文章写得不好，读者会不喜欢。这种担心在写笔记 （技术博客）的时候尤其明显。</p>
<hr>
<p>我订阅了一个很喜欢的博客站—— <a href="https://lillianwho.com/">夜猫日记 (lillianwho.com)</a>。这是我见到的第一个独立博客，不夸张地说，我是受这位博主的影响才有了建站的念头的。</p>
<p>我一般都是安静地浏览文章，但是今天我却突然想到：如果有一个人给我的博客留了言，只要不是广告或者恶意中伤的言论，我都会很开心。那是不是其他漂流在互联网海洋的孤岛，它们的主人也是这么想的呢？</p>
<p>于是我码了一段留言，大意是对文章的看法表示赞同，并简单表示了感谢。</p>
<p>不久后我就收到了回复。</p>
<p><figure class="my-8">
    <img src="https://img.clnya.fun/IMG-20240126120000-1.webp" alt="" 
        class="mx-auto rounded-lg block" loading="lazy"  />
    
</figure></p>
<p>我陷入了沉思.</p>
<p>在我眼里，这个小站已经非常优秀了，无论是颜值还是内容。然而，它的主人和我却有一样的担心。而且我有足够的理由推测，许多的博主也有这样的顾虑。</p>
<p><strong>担心「写得不好」，是人之常情。但是如果 （像我一样）因此而畏手畏脚，是否有些过激了？</strong></p>
<p>感觉在这点上，博主<a href="https://yinji.org/">青山</a>说得蛮好的：</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>上周没有更新周报，回顾一周，并没有值得记录的事情，而我不想为了写而写，必须是要记录一些对我有意义的内容。这其实也涉及一个话题，我们写博客是为了写我们想记录的内容，还是为了写希望读者阅读的内容？过去我可能是后者，打着“每日一博”的旗号坚持更新，希望获得阅读量、评论和反馈，现在我是前者，希望记录有意义的内容，如果恰巧能让读者也喜欢，不胜荣幸。</p>
</blockquote>
<p>原文链接：<a href="https://yinji.org/5195.html">周报 #07 – 铲屎官、内容与外表、新闻女王 | 印记 (yinji.org)</a></p>
<p>可惜，道理我懂，但是很难像青山看得那么开。可能这也算是 INFJ 的一个缺点吧。</p>
<p>此外，似乎还有另外一个问题：<strong>何为有用？</strong></p>
<p>这个问题的哲学浓度有点超标，不过，忘记在哪听过一个说法：中国古代似乎没有专职的哲学家，因为在中国古代，读哲学是为了让人成为人，而不是成为某种特殊的人。</p>


<blockquote class="my-6 border-l-4 border-border/60 dark:border-border-dark/60 pl-4 
    bg-card/20 dark:bg-card-dark/20">
    <p>人不一定应当是宗教的，但他一定应当是哲学的。
—— 冯友兰《中国哲学简史》</p>
</blockquote>
<p>扯远了。这个问题我还给不出明确的回答，但是我至少能分清一件事，就是<strong>好笑和有趣有本质的不同</strong>。</p>
<p>一个无厘头的抽象视频，当然非常好笑，但是我不觉得它有趣；而一篇简单分享自己下午茶动手煎了个鸡蛋的博文，一点也不好笑，但是看着看着，嘴角却不自觉勾起一抹弧度。</p>
<p>知乎曾经用过一个 slogan 「与世界分享你的知识、经验和见解」, 我觉得，再加上一个词「生命体验」, 就能概括独立博客的使命 （这个词有点大）了。</p>
<p>是的，生命体验。这个词听起来很玄乎，但是很容易实例化。而我觉得，在这个「泛娱乐化」的时代，能够带着温暖和平静将自己的生命体验写成博客，就已经是有趣且有意义的了。</p>
<p>从这个意义上说，独立博客就是博主的数字生命。</p>
<p>而「知识、经验和见解」—— 更加「有用」的「干货」, 我不想为这两种内容划个高下，毕竟，发动机的汽油和手中的热巧克力都是不可或缺的。</p>
<p>所以，我觉得，也不必执着于是否「有用」了。即使它们真的是无用的，能够耐心地将你的知识、经验、见解和生命体验从头看到尾的读者，想必也是懂得它们的「无用之用」的吧 （笑）。</p>

      ]]></content:encoded></item><item><title>2023年度总结</title><link>https://chlor.me/farewell-to-2023/</link><pubDate>Sun, 31 Dec 2023 23:59:59 +0000</pubDate><author>Chlorine</author><guid>https://chlor.me/farewell-to-2023/</guid><category>公告</category><description>本文记录了作者在2023年至2024年交替之际的反思和感想。作者首先表达了对跨年的淡然态度，指出生活和时间的连续性，不会因新年到来而自动改变。接着回顾了2023年，称其为个人生命中的高光年份，提到了上半年的模糊记忆、六月的高考、被清华大学录取以及最终选择了计金专业的决定。作者还分享了暑假的完美时光和大学生活的适应过程。文章末尾以一段简单的Go语言代码迎接2024年，表达了对新一年的期许，同时也含蓄地表达了对过去的遗憾以及对未来的希望。</description><content:encoded><![CDATA[
        <figure>
          <img src="https://img.clnya.fun/cover/farewell-to-2023-cover.webp" alt="2023年度总结" />
        </figure>
        <p>转眼间，就到了 2023 的最后一天了。</p>
<p>和大多数人不一样，我对「跨年」并没有什么概念。今早起来，也没有感受到什么特别的神圣感或者仪式感。该吃吃该喝喝该学学该玩玩，和一年中普通的一天没什么区别。</p>
<p>我也没有立什么 New year resolution。时间是连续的，生活也是。你不可能期待到了某个时间节点之后生活就自己改观了，要想改变，还是得循序渐进。</p>
<p>不过，话说回来，在我现在十八又二分之一年的生命中，2023 年，的确可以说是最高光的一年。</p>
<p>我对上半年的记忆相当模糊，大概只有过年的全家福，老师们的细心辅导，每天都能吃到的美食，以及居家学习中刷过的成堆的卷。</p>
<p>然后是六月。炎热而明媚的阳光，以及我拄着拐杖进考场的场景。</p>
<p>然后，就是烟花，来自外界的赞誉，以及和清北招生老师的谈话。</p>
<p>最后还是选了清华。半路改道，来了计金。</p>
<p>然后是录取通知书，和那两个月。</p>
<p>说那个暑假是我人生中最完美的一段时光为时尚早，但是大概也就是了。</p>
<p>毕竟，几乎完全没有任何遗憾的感觉，可遇而不可求。</p>
<p>然后，就是园子里的几个月。从想家，到以此为家；从不适应大学的模式，到完全记不起来高中的模式。</p>
<p>要问我这半年有没有什么遗憾，肯定有。总体上我不是个卷人，而且有时候非常摆，错失了许多良机。</p>
<p>所幸，为时不晚。</p>
<pre><code class="language-go">package main

import ()

func main(){
	println (&quot;Hello 2024!&quot;)
}
</code></pre>

      ]]></content:encoded></item></channel></rss>